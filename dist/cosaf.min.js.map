{
  "version": 3,
  "sources": ["../node_modules/stlics/src/problem/element.ts", "../node_modules/stlics/src/problem/variable.ts", "../node_modules/stlics/src/problem/domain.ts", "../node_modules/stlics/src/problem/domain-ranged.ts", "../node_modules/stlics/src/problem/domain-arbitrary.ts", "../node_modules/stlics/src/problem/constraint.ts", "../node_modules/stlics/src/problem/constraint-1.ts", "../node_modules/stlics/src/problem/constraint-2.ts", "../node_modules/stlics/src/problem/constraint-3.ts", "../node_modules/stlics/src/problem/constraint-n.ts", "../node_modules/stlics/src/problem/problem.ts", "../node_modules/stlics/src/solver/solver.ts", "../node_modules/stlics/src/util/assignment.ts", "../node_modules/stlics/src/util/assignment-list.ts", "../node_modules/stlics/src/util/domain-pruner.ts", "../node_modules/stlics/src/solver/fuzzy/fuzzy-forward-checking.ts", "../node_modules/stlics/src/solver/fuzzy/fuzzy-breakout.ts", "../node_modules/stlics/src/solver/fuzzy/srs3.ts", "../src/vision.ts", "../src/parameters.ts", "../node_modules/voronoi/src/vertex.ts", "../node_modules/voronoi/src/plane.ts", "../node_modules/voronoi/src/edge.ts", "../node_modules/voronoi/src/face.ts", "../node_modules/voronoi/src/mesh.ts", "../node_modules/voronoi/src/voronoi.ts", "../node_modules/iroay/src/table/cc-min.ts", "../node_modules/iroay/src/math.ts", "../node_modules/iroay/src/eval/category.ts", "../node_modules/iroay/src/eval/conspicuity.ts", "../node_modules/iroay/src/eval/difference.ts", "../node_modules/iroay/src/cs/lms.ts", "../node_modules/iroay/src/cs/hsl.ts", "../node_modules/iroay/src/cs/rgb.ts", "../node_modules/iroay/src/cs/yiq.ts", "../node_modules/iroay/src/cs/lrgb.ts", "../node_modules/iroay/src/const.ts", "../node_modules/iroay/src/cs/xyy.ts", "../node_modules/iroay/src/cs/lch.ts", "../node_modules/iroay/src/cs/lab.ts", "../node_modules/iroay/src/table/hc2xy-all-min.ts", "../node_modules/iroay/src/lib/kdt.ts", "../node_modules/iroay/src/cs/pccs.ts", "../node_modules/iroay/src/cs/munsell.ts", "../node_modules/iroay/src/cs/xyz.ts", "../node_modules/iroay/src/sim/color-vision.ts", "../node_modules/iroay/src/util.ts", "../node_modules/iroay/src/color.ts", "../src/value.ts", "../src/scheme.ts", "../src/relation-factory1.ts", "../src/candidates.ts", "../src/domain-factory2.ts", "../src/relation-factory2.ts", "../src/domain-factory1.ts", "../src/adjuster.ts"],
  "sourcesContent": ["/**\n * The common class of variables and constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nexport class Element {\n\n\t#index: number = -1;\n\t#name: string = '';\n\n\t/**\n\t * It is used when the user wishes to associate an arbitrary object with each element.\n\t */\n\tuserObject: any = null;\n\n\t/**\n\t * Used when the solver wants to associate an arbitrary object with each element.\n\t */\n\tsolverObject: any = null;\n\n\t// Called only from Problem.\n\tsetIndex(index: number): void {\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * Sets the name.\n\t *\n\t * @param name string representing the name.\n\t */\n\tsetName(name: string): void {\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * Get the index on the owned problem.\n\t * Each variable and constraint is assigned a serial number as an index, which is used to access it through the problem.\n\t *\n\t * @return Integer value representing the index.\n\t */\n\tindex(): number {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * Gets the name.\n\t *\n\t * @return String representing the name.\n\t */\n\tname(): string {\n\t\treturn this.#name;\n\t}\n\n}\n", "/**\n * Class that represents a variable.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Problem } from './problem';\nimport { Element } from './element';\nimport { Constraint } from './constraint';\nimport { Domain } from './domain';\n\nexport class Variable extends Element {\n\n\tstatic readonly #INVALID: number = Number.MIN_VALUE;\n\n\t#owner: Problem;\n\n\t#d: Domain;\n\t#v: number = Variable.#INVALID;\n\t#cs: Constraint[] = [];\n\n\t// Called only from Problem.\n\tconstructor(owner: Problem, d: Domain) {\n\t\tsuper();\n\t\tthis.#owner = owner;\n\t\tthis.#d = d;\n\t}\n\n\t/**\n\t * Gets a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\tconst n = this.name();\n\t\tconst np = n ? `(${n})` : '';\n\t\tconst v = this.isEmpty() ? '<empty>' : ('' + this.value());\n\n\t\treturn `x${this.index()}${np} = ${v}`;\n\t}\n\n\t/**\n\t * Gets the number of associated constraints.\n\t * @return Number of constraints.\n\t */\n\tsize(): number {\n\t\treturn this.#cs.length;\n\t}\n\n\t/**\n\t * Gets the associated constraints by specifying their indices.\n\t * @param index Index.\n\t * @return A constraint.\n\t */\n\tat(index: number): Constraint | undefined {\n\t\treturn this.#cs.at(index);\n\t}\n\n\t/**\n\t * Checks whether or not the variable is associated with the specified constraint.\n\t * @param c A constraint.\n\t * @return True if associated.\n\t */\n\thas(c: Constraint): boolean {\n\t\treturn this.#cs.includes(c);\n\t}\n\n\t/**\n\t * Gets the index of a specified constraint.\n\t * If not found, returns -1.\n\t * @param c A constraint.\n\t * @return Index.\n\t */\n\tindexOf(c: Constraint): number {\n\t\treturn this.#cs.indexOf(c);\n\t}\n\n\t/**\n\t * Collects the variables connected via the associated constraints.\n\t * @return An array of variables\n\t */\n\tneighbors(): Variable[] {\n\t\tconst xs: Variable[] = [];\n\n\t\tfor (const c of this.#cs) {\n\t\t\tfor (const x of c) {\n\t\t\t\tif (x !== this) {\n\t\t\t\t\txs.push(x);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn xs;\n\t}\n\n\t/**\n\t * Gets the iterator of the associated constraints.\n\t */\n\t[Symbol.iterator](): Iterator<Constraint> {\n\t\treturn this.#cs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Gets the problem that owns this variable.\n\t * @return Owner.\n\t */\n\towner(): Problem {\n\t\treturn this.#owner;\n\t}\n\n\t// Called only from Problem.\n\tconnect(c: Constraint): void {\n\t\tif (this.#cs.includes(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cs.push(c);\n\t}\n\n\t// Called only from Problem.\n\tdisconnect(c: Constraint): void {\n\t\tif (!this.#cs.includes(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cs = this.#cs.filter(\n\t\t\t(i: Constraint): boolean => i !== c\n\t\t);\n\t}\n\n\t/**\n\t * Gets the domain of the variable.\n\t * @return The domain.\n\t */\n\tdomain(): Domain;\n\n\t/**\n\t * Sets a new domain to the variable.\n\t * The variable will be in unassigned state.\n\t * @param d Domain to be assigned.\n\t */\n\tdomain(d: Domain): void;\n\n\tdomain(d?: Domain): Domain | void {\n\t\tif (d === undefined) {\n\t\t\treturn this.#d;\n\t\t} else {\n\t\t\tthis.#d = d;\n\t\t\tthis.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value: number): void {\n\t\tthis.#v = value;  // Do not change #val except here.\n\t}\n\n\t/**\n\t * Sets the state of the variable to unassigned.\n\t */\n\tclear(): void {\n\t\t// Do not use the invalid value except here and below (isEmpty).\n\t\tthis.assign(Variable.#INVALID);\n\t}\n\n\t/**\n\t * Gets the value of the variable.\n\t * @returnThe value of the variable.\n\t */\n\tvalue(): number {\n\t\treturn this.#v;\n\t}\n\n\t/**\n\t * Checks whether the value is unassigned or not.\n\t * @return True if unassigned.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.value() === Variable.#INVALID;\n\t}\n\n}\n", "/**\n * An abstract class that represents a variable domain.\n * The domain is immutable.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nexport abstract class Domain {\n\n\t/**\n\t * Checks whether the specified value is included as an element of the domain.\n\t *\n\t * @param v A value.\n\t * @return True if the value is included.\n\t */\n\tabstract contains(v: number): boolean;\n\n\t/**\n\t * Gets the index of the specified value. If it does not exist, -1 is returned.\n\t *\n\t * @param v A value.\n\t * @return The index.\n\t */\n\tabstract indexOf(v: number): number;\n\n\t/**\n\t * Gets the size of the domain, including the pruned elements.\n\t *\n\t * @return The size.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the value at the specified index. The retrieved value may have been pruned.\n\t *\n\t * @param index An index.\n\t * @return The value.\n\t */\n\tabstract at(index: number): number;\n\n\t/**\n\t * Gets the iterator of the values of the domain.\n\t */\n\tabstract [Symbol.iterator](): Iterator<number>;\n\n\t/**\n\t * Gets an arbitrary value, regardless of whether it has been pruned or not.\n\t *\n\t * @return A value.\n\t */\n\trandom(): number {\n\t\treturn this.at(Math.floor(Math.random() * this.size()));\n\t}\n\n}\n", "/**\n * A variable domain with contiguous integer elements.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Domain } from './domain';\n\nexport class DomainRanged extends Domain {\n\n\t#min: number;\n\t#max: number;\n\n\tconstructor(min: number, max: number) {\n\t\tsuper();\n\t\tthis.#min = min | 0;\n\t\tthis.#max = max | 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(v: number): boolean {\n\t\treturn this.#min <= v && v <= this.#max;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: number): number {\n\t\treturn (this.#min <= v && v <= this.#max) ? (v - this.#min) : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#max - this.#min + 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#min + index;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\tlet v: number = this.#min;\n\t\tconst max: number = this.#max;\n\t\treturn {\n\t\t\tnext(): IteratorResult<number> {\n\t\t\t\tif (v <= max) {\n\t\t\t\t\treturn { value: v++, done: false };\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: null, done: true };\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n}\n", "/**\n * A variable domain with arbitrary elements.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Domain } from './domain';\n\nexport class DomainArbitrary extends Domain {\n\n\t#vs: number[];\n\n\tconstructor(vs: number[]) {\n\t\tsuper();\n\t\tthis.#vs = [...vs];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(v: number): boolean {\n\t\treturn this.#vs.includes(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: number): number {\n\t\treturn this.#vs.indexOf(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#vs.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#vs[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\treturn this.#vs[Symbol.iterator]();\n\t}\n\n}\n", "/**\n * The class represents a constraint.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Element } from './element';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\nimport { CrispRelation, FuzzyRelation } from './relation';\n\nexport abstract class Constraint extends Element {\n\n\t/**\n\t * The constant indicating that the satisfaction degree is not defined.\n\t */\n\tstatic UNDEFINED: -1 = -1;\n\n\trel: Relation;\n\n\t// Called only from Problem.\n\tconstructor(r: Relation) {\n\t\tsuper();\n\t\tthis.rel = r;\n\t}\n\n\t/**\n\t * Returns the crisp relation between variables.\n\t * @return Relation.\n\t */\n\tcrispRelation(): CrispRelation {\n\t\treturn this.rel as CrispRelation;\n\t}\n\n\t/**\n\t * Returns the fuzzy relation between variables.\n\t * @return Relation.\n\t */\n\tfuzzyRelation(): FuzzyRelation {\n\t\treturn this.rel as FuzzyRelation;\n\t}\n\n\t/**\n\t * Returns whether this is a fuzzy constraint.\n\t * @return True if it is fuzzy constraint.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn 'satisfactionDegree' in this.rel;\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\tconst n = this.name();\n\t\tconst np = n ? `(${n})` : '';\n\t\tconst s = this.satisfactionDegree();\n\t\tconst sn = s === Constraint.UNDEFINED ? 'UNDEFINED' : ('' + s);\n\n\t\treturn `c${this.index()}${np} = ${sn}`;\n\t}\n\n\t/**\n\t * Returns the order of the constraint, i.e., the number of (associated) variables in the scope.\n\t * @return Order.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the associated variable by specifying its index.\n\t * @param index Index.\n\t * @return A variable.\n\t */\n\tabstract at(index: number): Variable | undefined;\n\n\t/**\n\t * Returns whether the specified variable is associated or not.\n\t * @param x A variable.\n\t * @return True if it is associated.\n\t */\n\tabstract has(x: Variable): boolean;\n\n\t/**\n\t * Gets the index of a specified variable.\n\t * If not found, returns -1.\n\t * @param x A variable.\n\t * @return Index.\n\t */\n\tabstract indexOf(x: Variable): number;\n\n\t/**\n\t * Returns the set of constraints connected via the associated variables.\n\t * @return A set of constraints.\n\t */\n\tabstract neighbors(): Constraint[];\n\n\t/**\n\t * Gets the iterator of the associated variables.\n\t */\n\tabstract [Symbol.iterator](): Iterator<Variable>;\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Returns the number of scope variables that have not been assigned a value.\n\t * @return Number of variables\n\t */\n\tabstract emptyVariableSize(): number;\n\n\t/**\n\t * Returns whether or not the satisfaction (degree) is defined.\n\t * Satisfaction (degree) is defined when all associated variables have values assigned to them.\n\t * @return True if it is defined.\n\t */\n\tabstract isDefined(): boolean;\n\n\t/**\n\t * Returns whether or not this constraint is satisfied.\n\t * @return 1 if satisfied, 0 if not, UNDEFINED if undefined\n\t */\n\tabstract isSatisfied(): -1 | 0 | 1;\n\n\t/**\n\t * Gets the current satisfaction degree.\n\t * @return Degree 0 - 1, UNDEFINED if undefined.\n\t */\n\tabstract satisfactionDegree(): number;\n\n\t/**\n\t * Calculates the highest consistency degree.\n\t * That is, it seeks the highest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The highest consistency degree.\n\t */\n\tabstract highestConsistencyDegree(): number;\n\n\t/**\n\t * Calculates the lowest consistency degree.\n\t * That is, it seeks the lowest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The lowest consistency degree.\n\t */\n\tabstract lowestConsistencyDegree(): number;\n\n}\n", "/**\n * The class represents an unary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class Constraint1 extends Constraint {\n\n\t#xs: [Variable] = [] as unknown as [Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable) {\n\t\treturn x === this.#xs[0];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\treturn (x === this.#xs[0]) ? 0 : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\treturn this.#xs[0].isEmpty() ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 0;\n\n\t\tfor (const v of this.#xs[0].domain()) {\n\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v);\n\t\t\tif (s > cd) {\n\t\t\t\tcd = s;\n\t\t\t}\n\t\t\tif (cd === 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\n\t\tfor (const v of this.#xs[0].domain()) {\n\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v);\n\t\t\tif (s < cd) {\n\t\t\t\tcd = s;\n\t\t\t}\n\t\t\tif (cd === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an binary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class Constraint2 extends Constraint {\n\n\t#xs: [Variable, Variable] = [] as unknown as [Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x1: Variable, x2: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x1, x2];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs[0] === x || this.#xs[1] === x;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\tif (x === this.#xs[0]) return 0;\n\t\tif (x === this.#xs[1]) return 1;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[1]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tif (this.#xs[0].isEmpty()) ++n;\n\t\tif (this.#xs[1].isEmpty()) ++n;\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty() && !this.#xs[1].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value(), this.#xs[1].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value(), this.#xs[1].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 0;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an 3-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class Constraint3 extends Constraint {\n\n\t#xs: [Variable, Variable, Variable] = [] as unknown as [Variable, Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x1: Variable, x2: Variable, x3: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x1, x2, x3];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs[0] === x || this.#xs[1] === x || this.#xs[2] === x;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\tif (x === this.#xs[0]) return 0;\n\t\tif (x === this.#xs[1]) return 1;\n\t\tif (x === this.#xs[2]) return 2;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[1]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[2]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tif (this.#xs[0].isEmpty()) ++n;\n\t\tif (this.#xs[1].isEmpty()) ++n;\n\t\tif (this.#xs[2].isEmpty()) ++n;\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty() || this.#xs[2].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value(), this.#xs[1].value(), this.#xs[2].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty() || this.#xs[2].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value(), this.#xs[1].value(), this.#xs[2].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst v3: number = this.#xs[2].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\t\tconst d3: Domain = this.#xs[2].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v3 of d3) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\t\tcd = s;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst v3: number = this.#xs[2].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\t\tconst d3: Domain = this.#xs[2].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v3 of d3) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\t\tcd = s;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an n-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class ConstraintN extends Constraint {\n\n\t#xs: Variable[];\n\t#vs: number[];  // For reuse.\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, ...xs: Variable[]) {\n\t\tsuper(r);\n\t\tthis.#xs = [...xs];\n\t\tthis.#vs = new Array(this.#xs.length);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#xs.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs.includes(x);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\treturn this.#xs.indexOf(x);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const x of this.#xs) {\n\t\t\tfor (const c of x) {\n\t\t\t\tif (c !== this) {\n\t\t\t\t\tcs.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\t++n;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tthis.#vs[i] = x.value();\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(...this.#vs) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn Constraint.UNDEFINED;\n\t\t\t}\n\t\t\tthis.#vs[i] = x.value();\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c: number = 0;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vs[i] = x.value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkHCD(emptyIndices, 0, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c: number = 0;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vs[i] = x.value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkLCD(emptyIndices, 0, 1);\n\t}\n\n\tcheckHCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index: number = emptyIndices[currentStep];\n\t\tconst d: Domain = this.#xs[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\tcheckLCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index: number = emptyIndices[currentStep];\n\t\tconst d: Domain = this.#xs[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents a constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { DomainRanged } from './domain-ranged';\nimport { DomainArbitrary } from './domain-arbitrary';\nimport { Constraint } from './constraint';\nimport { Constraint1 } from './constraint-1';\nimport { Constraint2 } from './constraint-2';\nimport { Constraint3 } from './constraint-3';\nimport { ConstraintN } from './constraint-n';\nimport { Relation } from './relation';\n\nexport class Problem {\n\n\t#fv: (o: Problem, d: Domain) => Variable = (o: Problem, d: Domain): Variable => new Variable(o, d);\n\t#fc: (r: Relation, xs: Variable[]) => Constraint = (r: Relation, xs: Variable[]): Constraint => {\n\t\tif (xs.length === 1) {\n\t\t\treturn new Constraint1(r, xs[0]);\n\t\t}\n\t\tif (xs.length === 2) {\n\t\t\treturn new Constraint2(r, xs[0], xs[1]);\n\t\t}\n\t\tif (xs.length === 3) {\n\t\t\treturn new Constraint3(r, xs[0], xs[1], xs[2]);\n\t\t}\n\t\treturn new ConstraintN(r, ...xs);\n\t};\n\n\t#isFuzzy: boolean = false;\n\t#xs: Variable[] = [];\n\t#cs: Constraint[] = [];\n\n\t// Methods for Modifying Factories --------\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetVariableFactory(fn: (o: Problem, d: Domain) => Variable): void {\n\t\tthis.#fv = fn;\n\t}\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetConstraintFactory(fn: (r: Relation, xs: Variable[]) => Constraint): void {\n\t\tthis.#fc = fn;\n\t}\n\n\t// Generation Methods --------\n\n\t/**\n\t * Adds a variable to this problem.\n\t * @param Variable v A variable.\n\t */\n\taddVariable(x: Variable): void {\n\t\tx.setIndex(this.#xs.length);\n\t\tthis.#xs.push(x);\n\t}\n\n\t/**\n\t * Generates a domain.\n\t * @param args {\n\t *   @type Array 'values' Multiple values.\n\t *\n\t *   @type Number 'min' Minimum value.\n\t *   @type Number 'max' Maximum value.\n\t * }\n\t * @return A domain.\n\t */\n\tcreateDomain(args: { values: number[]; } | { min: number, max: number; }): Domain | null {\n\t\tif ('values' in args) {\n\t\t\treturn new DomainArbitrary(args.values);\n\t\t} else if ('min' in args && 'max' in args) {\n\t\t\treturn new DomainRanged(args.min, args.max);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Generates a variable.\n\t * @param Array args {\n\t *   @type string 'name'   Display name.\n\t *   @type Domain 'domain' A domain.\n\t *   @type *      'value'  A value.\n\t * }\n\t * @return A variable.\n\t */\n\tcreateVariable(args: { name: string, domain: Domain, value?: number; } | { variable: Variable; }): Variable {\n\t\tif ('variable' in args) {\n\t\t\tconst x: Variable = this.#fv(this, args.variable.domain());\n\t\t\tthis.addVariable(x);\n\t\t\tx.setName(x.name());\n\t\t\tx.assign(x.value());\n\t\t\treturn x;\n\t\t} else {\n\t\t\tif (args.value !== undefined && !args.domain.contains(args.value)) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t\tconst x: Variable = this.#fv(this, args.domain);\n\t\t\tthis.addVariable(x);\n\t\t\tif (args.name) {\n\t\t\t\tx.setName(args.name);\n\t\t\t}\n\t\t\tif (args.value) {\n\t\t\t\tx.assign(args.value);\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Generates a constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args: { name?: string, variables: Variable[], relation: Relation; }): Constraint | null {\n\t\tfor (const x of args.variables) {\n\t\t\tif (x.owner() !== this) return null;\n\t\t}\n\t\tconst c: Constraint = this.#fc(args.relation, args.variables);\n\t\tc.setIndex(this.#cs.length);\n\t\tthis.#cs.push(c);\n\t\tfor (const x of args.variables) {\n\t\t\tx.connect(c);\n\t\t}\n\t\tif (c.isFuzzy()) {\n\t\t\tthis.#isFuzzy = true;\n\t\t}\n\t\tif ('name' in args) {\n\t\t\tc.setName(args.name as string);\n\t\t}\n\t\treturn c;\n\t}\n\n\t//  Modification Methods --------\n\n\t/**\n\t * Remove the constraint.\n\t * @param c Constraints to be removed.\n\t */\n\tremoveConstraint(c: Constraint): void {\n\t\tconst index: number = this.#cs.indexOf(c);\n\t\tthis.#cs.splice(index, 1);\n\t\tfor (let i: number = index; i < this.#cs.length; ++i) {\n\t\t\tthis.#cs[i].setIndex(i);\n\t\t}\n\t\tfor (const x of c) {\n\t\t\tx.disconnect(c);\n\t\t}\n\t\tthis.#isFuzzy = false;\n\t\tfor (const c of this.#cs) {\n\t\t\tif (c.isFuzzy()) {\n\t\t\t\tthis.#isFuzzy = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Changes the status of all variables to unassigned.\n\t */\n\tclearAllVariables(): void {\n\t\tfor (const x of this.#xs) {\n\t\t\tx.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the order of variables.\n\t * The index of each variable is reassigned.\n\t */\n\treverseVariables(): void {\n\t\tthis.#xs.reverse();\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tthis.#xs[i].setIndex(i);\n\t\t}\n\t}\n\n\t/**\n\t * Sorts variables using a specified comparator.\n\t * The index of each variable is reassigned.\n\t * @param comparator A comparator.\n\t */\n\tsortVariables(comparator: (a: Variable, b: Variable) => number): void {\n\t\tthis.#xs.sort(comparator);\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tthis.#xs[i].setIndex(i);\n\t\t}\n\t}\n\n\t// Methods for Variables --------\n\n\t/**\n\t * Returns the number of variables in the problem.\n\t * @return Number of variables\n\t */\n\tvariableSize(): number {\n\t\treturn this.#xs.length;\n\t}\n\n\t/**\n\t * Returns a variable by index.\n\t * @param index Index (0 <= index < getVariableSize()).\n\t * @return A variable\n\t */\n\tvariableAt(index: number): Variable {\n\t\treturn this.#xs[index];\n\t}\n\n\t/**\n\t * Returns a variable by name.\n\t * @param name Name.\n\t * @return A variable.\n\t */\n\tvariableOf(name: string): Variable | null {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.name() === name) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the variable is contained or not.\n\t * @param x A variable.\n\t * @return True if contained.\n\t */\n\thasVariable(x: Variable): boolean {\n\t\treturn this.#xs.includes(x);\n\t}\n\n\t/**\n\t * Returns the list of variables.\n\t * The returned list is not allowed to be modified.\n\t * @return The variable list.\n\t */\n\tvariables(): Variable[] {\n\t\treturn this.#xs;\n\t}\n\n\t// Methods for Constraints --------\n\n\t/**\n\t * Gets the number of constraints in the problem.\n\t * @return Number of constraints\n\t */\n\tconstraintSize(): number {\n\t\treturn this.#cs.length;\n\t}\n\n\t/**\n\t * Returns a constraint with an index.\n\t * @param index Index (0 <= index < constraintSize()).\n\t * @return A constraint.\n\t */\n\tconstraintAt(index: number): Constraint {\n\t\treturn this.#cs[index];\n\t}\n\n\t/**\n\t * Returns a constraint by name.\n\t * @param name Name.\n\t * @return A constraint.\n\t */\n\tconstraintOf(name: string): Constraint | null {\n\t\tfor (const c of this.#cs) {\n\t\t\tif (c.name() === name) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the constraint is contained or not.\n\t * @param c A constraint\n\t * @return True if contained.\n\t */\n\thasConstraint(c: Constraint): boolean {\n\t\treturn this.#cs.includes(c);\n\t}\n\n\t/**\n\t * Returns the list of constraint.\n\t * The returned list is not allowed to be modified.\n\t * @return The constraint list.\n\t */\n\tconstraints(): Constraint[] {\n\t\treturn this.#cs;\n\t}\n\n\t/**\n\t * Gets the constraints that exist between the specified variables.\n\t * Returns an empty array if no constraints exist.\n\t * If there are multiple constraints between two variables (including the case of n-ary constraints (2 < n)), they will be included in the return array.\n\t * @param v1 Variable 1\n\t * @param v2 Variable 2\n\t * @return Constraints.\n\t */\n\tconstraintsBetween(v1: Variable, v2: Variable): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\t\tfor (const c of v1) {\n\t\t\tif (c.has(v2)) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Finds the set of worst satisfiable constraints in a fuzzy constraint satisfaction problem.\n\t * @return Array of constraints and worst satisfaction degree.\n\t */\n\tconstraintsWithWorstSatisfactionDegree(): [Constraint[], number] {\n\t\tconst cs: Constraint[] = [];\n\t\tlet cur: number = 1;\n\t\tfor (const c of this.#cs) {\n\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\tif (s < cur) {\n\t\t\t\tcur = s;\n\t\t\t\tcs.length = 0;\n\t\t\t\tcs.push(c);\n\t\t\t} else if (s - cur < Number.MIN_VALUE * 10) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn [cs, cur];\n\t}\n\n\t// State acquisition methods --------\n\n\t/**\n\t * Returns the worst satisfaction degree for the constraints contained in the fuzzy constraint satisfaction problem.\n\t * If the degree cannot be determined because the variable has not yet been assigned a value or for some other reason, -1 is returned.\n\t * @return Worst satisfaction degree.\n\t */\n\tworstSatisfactionDegree(): number {\n\t\tlet cs: number = 1;\n\t\tfor (const c of this.#cs) {\n\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\tif (s === Constraint.UNDEFINED) return Constraint.UNDEFINED;\n\t\t\tif (s < cs) cs = s;\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Gets the average of satisfaction degrees of the fuzzy constraints.\n\t * @return Average of satisfaction degrees.\n\t */\n\taverageSatisfactionDegree(): number {\n\t\tlet ave: number = 0;\n\t\tfor (const c of this.#cs) {\n\t\t\tave += c.satisfactionDegree();\n\t\t}\n\t\tave = ave / this.#cs.length;\n\t\treturn ave;\n\t}\n\n\t/**\n\t * Returns the number of variables in the problem that have not been assigned a value.\n\t * @return Number of variables with no value assigned.\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * Gets the constraint density (number of constraints/number of variables).\n\t * @return Constraint density.\n\t */\n\tconstraintDensity(): number {\n\t\treturn this.constraintSize() / this.variableSize();\n\t}\n\n\t/**\n\t * Returns whether the constraint satisfaction problem has any variables with empty domain.\n\t * @return True if it exists.\n\t */\n\thasEmptyDomain(): boolean {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.domain().size() === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return True if it is a fuzzy constraint satisfaction problem.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn this.#isFuzzy;\n\t}\n\n}\n", "/**\n * The class for solvers for finding solutions to CSPs.\n *\n * @author Takuto Yanagida\n * @version 2024-12-10\n */\n\nimport { Problem } from '../problem/problem';\nimport { AssignmentList } from '../util/assignment-list';\n\nexport class Solver {\n\n\tprotected debug: boolean = true;\n\n\t#debugOutput: (e: any) => void = (e: any): void => console.log(e);\n\n\t/**\n\t * The crisp/fuzzy CSP solved by the solver.\n\t */\n\tprotected pro: Problem;\n\n\t/**\n\t *  Limit number of iterations.\n\t */\n\tprotected iterLimit: number|null = null;\n\n\t/**\n\t * Time limit.\n\t */\n\tprotected timeLimit: number|null = null;\n\n\t/**\n\t * Target 'satisfied constraint rate' or 'constraint satisfaction degree'.\n\t */\n\tprotected targetDeg: number|null = 0.8;\n\n\t/**\n\t * Listeners of this solver.\n\t */\n\t#listeners: ((as: AssignmentList, wd: number) => boolean)[] = [];\n\n\t/**\n\t * Generates a solver given a CSP.\n\t * @param pro A CSP.\n\t */\n\tconstructor(pro: Problem) {\n\t\tthis.pro = pro;\n\t}\n\n\t/**\n\t * Returns the name of the solver.\n\t * @return The name.\n\t */\n\tname(): string {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Placeholder for implementing an algorithm.\n\t * The solve method calls this method and returns the return value of this method.\n\t * @return True if the algorithm succeeds,\n\t */\n\texec(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets and limits the maximum number of iterations for the solver's behavior.\n\t * After the specified number of iterations, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param count Maximum value; null means not set.\n\t */\n\tsetIterationLimit(count: number|null = null): void {\n\t\tthis.iterLimit = count;\n\t}\n\n\t/**\n\t * Sets a time limit on the solver's behavior.\n\t * If the specified time is exceeded, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param msec Time limit. null means not set.\n\t */\n\tsetTimeLimit(msec: number|null = null): void {\n\t\tthis.timeLimit = msec;\n\t}\n\n\t/**\n\t * The goal to be achieved, which is the condition for stopping the solver, is set as the constraint satisfaction degree (fuzzy) or the percentage of constraints satisfied (crisp).\n\t * The solver stops as success if the specified percentage is reached or exceeded. The specific behavior depends on the solver.\n\t * @param rate Degree or rate. null indicates not set.\n\t */\n\tsetTargetRate(rate: number|null = null): void {\n\t\tthis.targetDeg = rate;\n\t}\n\n\t/**\n\t * Computes the solution to a CSP.\n\t * The specific meaning of the return value depends on the implementation of the algorithm.\n\t * @return True if the algorithm succeeds\n\t */\n\tsolve(): boolean {\n\t\treturn this.exec();\n\t}\n\n\taddListener(l: (solution: AssignmentList, worstDegree: number) => boolean): void {\n\t\tthis.#listeners.push(l);\n\t}\n\n\tremoveListener(l: (solution: AssignmentList, worstDegree: number) => boolean): void {\n\t\tthis.#listeners.splice(this.#listeners.indexOf(l), 1);\n\t}\n\n\tfoundSolution(solution: AssignmentList, worstDegree: number): boolean {\n\t\tlet finish: boolean = false;\n\n\t\tfor (const l of this.#listeners) {\n\t\t\tif (l(solution, worstDegree)) {\n\t\t\t\tfinish = true;\n\t\t\t}\n\t\t}\n\t\treturn finish;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Sets whether to output debug strings.\n\t * @param boolean flag Do output if true.\n\t */\n\tsetDebugMode(flag: boolean): void {\n\t\tthis.debug = flag;\n\t}\n\n\t/**\n\t * Sets a function that used for outputting debug strings.\n\t * @param function fn Function called when debug output.\n\t */\n\tsetDebugOutput(fn: (e: any) => void): void {\n\t\tthis.#debugOutput = fn;\n\t}\n\n\tprotected debugOutput(str: any): void {\n\t\tif (this.debug) this.#debugOutput(str);\n\t}\n\n}\n", "/**\n * The class represents a pair of variables and the values to be assigned to them.\n *\n * @author Takuto Yanagida\n * @version 2024-10-22\n */\n\nimport { Variable } from '../problem/variable';\n\nexport class Assignment {\n\n\t#x: Variable;\n\t#v: number;\n\n\tconstructor(args: { assignment: Assignment; } | { variable: Variable; value?: number|null }) {\n\t\tif ('assignment' in args) {\n\t\t\tthis.#x = args.assignment.variable();\n\t\t\tthis.#v = args.assignment.value();\n\t\t} else if ('variable' in args) {\n\t\t\tthis.#x = args.variable;\n\t\t\tthis.#v = args.value ?? args.variable.value();\n\t\t} else {\n\t\t\tthrow new RangeError();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns a value to a stored variable.\n\t */\n\tapply(): void {\n\t\tthis.#x.assign(this.#v);\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\treturn `v${this.#x.index()} <- ${this.#v}`;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return Value.\n\t */\n\tvalue(): number {\n\t\treturn this.#v;\n\t}\n\n\t/**\n\t * Gets the variable.\n\t * @return Variable.\n\t */\n\tvariable(): Variable {\n\t\treturn this.#x;\n\t}\n\n}\n", "/**\n * The class represents multiple variables and their assignments.\n *\n * @author Takuto Yanagida\n * @version 2024-10-22\n */\n\nimport { Assignment } from './assignment';\nimport { Variable } from '../problem/variable';\nimport { Problem } from '../problem/problem';\n\nexport class AssignmentList {\n\n\tstatic fromVariables(xs: Iterable<Variable>): AssignmentList {\n\t\tconst al = new AssignmentList();\n\t\tal.setVariables(xs);\n\t\treturn al;\n\t}\n\n\t#as: Assignment[] = [];\n\n\tconstructor() {\n\t}\n\n\tsetProblem(p: Problem): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const x of p.variables()) {\n\t\t\tthis.#as.push(new Assignment({ variable: x, value: x.value() }));\n\t\t}\n\t}\n\n\tsetAssignmentList(al: AssignmentList): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const a of al) {\n\t\t\tthis.#as.push(new Assignment({ variable: a.variable(), value: a.value() }));\n\t\t}\n\t}\n\n\tsetVariables(xs: Iterable<Variable>): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const x of xs) {\n\t\t\tthis.#as.push(new Assignment({ variable: x, value: x.value() }));\n\t\t}\n\t}\n\n\taddVariable(variable: Variable, value: number | null = null): void {\n\t\tthis.#as.push(new Assignment({ variable, value }));\n\t}\n\n\tapply(): void {\n\t\tfor (const a of this.#as) a.apply();\n\t}\n\n\t/**\n\t * Remove all assignments.\n\t */\n\tclear(): void {\n\t\tthis.#as.length = 0;\n\t}\n\n\t/**\n\t * Checks whether the list is empty or not.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#as.length === 0;\n\t}\n\n\t/**\n\t * Gets the number of assignments.\n\t * @return Number of assignments.\n\t */\n\tsize(): number {\n\t\treturn this.#as.length;\n\t}\n\n\tdifferenceSize(): number {\n\t\tlet diff: number = 0;\n\n\t\tfor (const a of this.#as) {\n\t\t\tif (a.variable().value() !== a.value()) {\n\t\t\t\t++diff;\n\t\t\t}\n\t\t}\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Gets the assignments by specifying their indices.\n\t * @param index Index.\n\t * @return An assignment.\n\t */\n\tat(index: number): Assignment {\n\t\treturn this.#as[index];\n\t}\n\n\t/**\n\t * Gets the iterator of the assignments.\n\t */\n\t[Symbol.iterator](): Iterator<Assignment> {\n\t\treturn this.#as[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Gets an arbitrary assignment.\n\t *\n\t * @return An assignment.\n\t */\n\trandom(): Assignment {\n\t\treturn this.#as[Math.floor(Math.random() * this.#as.length)];\n\t}\n\n}\n", "/**\n * This class holds the branch pruning states for a domain.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nexport class DomainPruner {\n\n\tstatic #UNHIDDEN: number = -1;\n\n\t#hiddenLevels: number[];\n\t#hiddenSize: number = 0;\n\n\t/**\n\t * Generates a class that holds branch pruning states for a domain.\n\t * @param size Size of the corresponding domain\n\t */\n\tconstructor(size: number) {\n\t\tthis.#hiddenLevels = new Array(size);\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t}\n\n\t/**\n\t * Returns the size of the erased element.\n\t * @return Size of the erased element.\n\t */\n\thiddenSize(): number {\n\t\treturn this.#hiddenSize;\n\t}\n\n\t/**\n\t * Erases the element at the specified index.\n\t * @param index Index.\n\t * @param level Level.\n\t */\n\thide(index: number, level: number): void {\n\t\tif (this.#hiddenLevels[index] === DomainPruner.#UNHIDDEN) {\n\t\t\t++this.#hiddenSize;\n\t\t}\n\t\tthis.#hiddenLevels[index] = level;\n\t}\n\n\t/**\n\t * Returns whether the element is empty or not.\n\t * Returns true if all elements have been erased.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#hiddenLevels.length === this.#hiddenSize;\n\t}\n\n\t/**\n\t * Returns whether or not the element at the specified index has been erased.\n\t * @param index Index.\n\t * @return True if erased.\n\t */\n\tisValueHidden(index: number): boolean {\n\t\treturn this.#hiddenLevels[index] !== DomainPruner.#UNHIDDEN;\n\t}\n\n\t/**\n\t * Restores the value that had been erased, by specifying a level.\n\t * @param level Level\n\t */\n\treveal(level: number): void {\n\t\tfor (let i = 0; i < this.#hiddenLevels.length; ++i) {\n\t\t\tif (this.#hiddenLevels[i] === level) {\n\t\t\t\tthis.#hiddenLevels[i] = DomainPruner.#UNHIDDEN;\n\t\t\t\t--this.#hiddenSize;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restores all erased values.\n\t */\n\trevealAll(): void {\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t\tthis.#hiddenSize = 0;\n\t}\n\n}\n", "/**\n * This class implements the forward checking method for fuzzy CSP.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-12-10\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Domain } from '../../problem/domain';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class FuzzyForwardChecking extends Solver {\n\n\tstatic CONTINUE: number = 0;\n\tstatic TERMINATE: number = 1;\n\n\t#xs: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\t#relCons: Constraint[][][] = [];  // Table to cache constraints between two variables.\n\n\t#solWorstDeg: number = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#useMRV: boolean = false;\n\t#degInc: number = 0;\n\n\t#sequence: Variable[];\n\t#unaryCons: Constraint[];\n\t#checkedCons: boolean[];\n\t#pruneIntensively: boolean = false;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p: Problem, worstSatisfactionDegree: number | null = null) {\n\t\tsuper(p);\n\t\tthis.#xs = [...this.pro.variables()];\n\t\tthis.#sequence = new Array(this.pro.variableSize());\n\t\tthis.#initializeRelatedConstraintTable();\n\t\tthis.#checkedCons = new Array(this.pro.constraintSize());\n\n\t\tconst temp: Constraint[] = [];\n\t\tfor (const c of this.pro.constraints()) {\n\t\t\tif (c.size() === 1) temp.push(c);\n\t\t}\n\t\tthis.#unaryCons = [...temp];  // To make it even if it is empty.\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'Forward Checking for Fuzzy CSPs';\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag: boolean): void {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree: number): void {\n\t\tthis.#degInc = degree;\n\t}\n\n\t/**\n\t * Specifies whether or not to intensively prune branches when the problem contains 3- or n-ary constraints.\n\t * Depending on the problem, intensive pruning may increase processing time.\n\t * Default is false.\n\t * @param flag Whether or not to intensively prune branches.\n\t */\n\tsetIntensivePruning(flag: boolean): void {\n\t\tthis.#pruneIntensively = flag;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate: number | null = null): void {\n\t\tthis.targetDeg = rate;\n\t\tif (this.targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e: number = Number.MIN_VALUE;\n\t\t\tthis.#solWorstDeg = this.targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this.targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this.targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable(): void {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j: number = 0; j < this.#xs.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#xs.length));\n\n\t\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this.pro.constraintsBetween(this.#xs[i], this.#xs[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index: number, vj_index: number): Constraint[] {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Prune elements of the domain that make the unary constraint worse than the current worst degree.\n\t#pruneUnaryConstraints(): boolean {\n\t\tfor (const c of this.#unaryCons) {\n\t\t\tconst x = c.at(0) as Variable;\n\t\t\tconst orgVal: number = x.value();  // Save the value.\n\t\t\tconst d: Domain = x.domain();\n\t\t\tconst dp: DomainPruner = x.solverObject;\n\n\t\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\t\tx.assign(d.at(i));\n\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\tdp.hide(i, -1);  // Here's a branch pruning!\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.assign(orgVal);  // Restore the value.\n\t\t\tif (dp.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tfor (let i: number = 0, n: number = d_i.size(); i < n; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdp_i.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are two unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency2(level: number, vi: Variable, c: Constraint) {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tlet vj: Variable | null = null;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== vi) {\n\t\t\t\tvj = x;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst d_j: Domain = (vj as Variable).domain();\n\t\tconst dp_j: DomainPruner = (vj as Variable).solverObject;\n\t\tloop_i: for (let i: number = 0, ni: number = d_i.size(); i < ni; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j: number = 0, nj: number = d_j.size(); j < nj; ++j) {\n\t\t\t\tif (dp_j.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(d_j.at(j));  // Tentative assignment to vj\n\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t}\n\t\t\tdp_i.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are three unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency3(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tlet vj: Variable | null = null;\n\t\tlet vk: Variable | null = null;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== vi) {\n\t\t\t\tif (vj === null) {\n\t\t\t\t\tvj = x;\n\t\t\t\t} else {\n\t\t\t\t\tvk = x;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst d_j: Domain = (vj as Variable).domain();\n\t\tconst d_k: Domain = (vk as Variable).domain();\n\t\tconst dp_j: DomainPruner = (vj as Variable).solverObject;\n\t\tconst dp_k: DomainPruner = (vk as Variable).solverObject;\n\n\t\tloop_i: for (let i: number = 0, ni: number = d_i.size(); i < ni; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j: number = 0, nj: number = d_j.size(); j < nj; ++j) {\n\t\t\t\tif (dp_j.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(d_j.at(j));  // Tentative assignment to vj\n\t\t\t\tfor (let k: number = 0, nk: number = d_k.size(); k < nk; ++k) {\n\t\t\t\t\tif (dp_k.isValueHidden(k)) continue;\n\t\t\t\t\t(vk as Variable).assign(d_k.at(k));  // Tentative assignment to vk\n\t\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp_i.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vk as Variable).clear();\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// In the case of polynomial constraints and when there are four or more unassigned variables, all combinations of assignments of unassigned variables are examined and pruned.\n\t#checkForwardConsistencyN(level: number, v_i: Variable, c: Constraint, emptySize: number): boolean {\n\t\tconst d_i: Domain = v_i.domain();\n\t\tconst dp_i: DomainPruner = v_i.solverObject;\n\t\tconst emp = new Array(emptySize - 1);\n\t\tlet j: number = 0;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== v_i) {\n\t\t\t\temp[j++] = x;\n\t\t\t}\n\t\t}\n\t\tconst indexes = new Array(emp.length);\n\n\t\tloop_i: for (let i: number = 0, n: number = d_i.size(); i < n; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tv_i.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tindexes.fill(0);\n\n\t\t\tcomLoop: while (true) {\n\t\t\t\tlet hidden: boolean = false;\n\t\t\t\tfor (let k: number = 0; k < emp.length; ++k) {\n\t\t\t\t\tconst d_k: Domain = emp[k].domain();\n\t\t\t\t\tconst dp_k: DomainPruner = emp[k].solverObject;\n\t\t\t\t\tif (dp_k.isValueHidden(indexes[k])) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\temp[k].assign(d_k.at(indexes[k]));\n\t\t\t\t}\n\t\t\t\tif (!hidden) {\n\t\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t\tfor (let k: number = 0; k < emp.length; ++k) {\n\t\t\t\t\tindexes[k] += 1;\n\t\t\t\t\tif (indexes[k] < emp[k].domain().size()) break;\n\t\t\t\t\tindexes[k] = 0;\n\t\t\t\t\tif (k === emp.length - 1) break comLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp_i.hide(i, level);\n\t\t}\n\t\tfor (const x of emp) {\n\t\t\tx.clear();\n\t\t}\n\t\tv_i.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number, index: number): boolean {\n\t\tfor (const x_i of this.#xs) {\n\t\t\tif (!x_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(index, x_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tconst emptySize: number = c.emptyVariableSize();\n\t\t\t\tif (emptySize === 1) {\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, x_i, c)) return false;\n\t\t\t\t} else if (this.#pruneIntensively) {  // Depends on options\n\t\t\t\t\tif (emptySize === 2) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency2(level, x_i, c)) return false;\n\t\t\t\t\t} else if (emptySize === 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency3(level, x_i, c)) return false;\n\t\t\t\t\t} else if (emptySize > 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistencyN(level, x_i, c, emptySize)) return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Checks to see if the current variable assignment makes the degree of the past variable worse than the current worst degree.\n\t#checkBackwardConsistency(vc: Variable): boolean {\n\t\tthis.#checkedCons.fill(false);  // Reuse.\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {  // Find past variables.\n\t\t\tconst x_i: Variable = this.#xs[i];\n\t\t\tif (x_i === vc || x_i.isEmpty()) continue;  // If it is a future variable or a present variable.\n\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(vc.index(), i);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (this.#checkedCons[c.index()]) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\tif (s !== Constraint.UNDEFINED && s <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.#checkedCons[c.index()] = true;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t#refresh(): void {\n\t\tfor (let i: number = 0; i < this.#sequence.length; ++i) {\n\t\t\tconst index_x_i: number = this.#sequence[i].index();\n\n\t\t\tfor (let j: number = i + 1; j < this.#sequence.length; ++j) {\n\t\t\t\tconst x_j: Variable = this.#sequence[j];\n\t\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(index_x_i, x_j.index());\n\n\t\t\t\tfor (const c of cs) {\n\t\t\t\t\tconst orgVal: number = x_j.value();\n\t\t\t\t\tconst d_j: Domain = x_j.domain();\n\t\t\t\t\tconst dp_j: DomainPruner = x_j.solverObject;\n\n\t\t\t\t\tfor (let k: number = 0, n: number = d_j.size(); k < n; ++k) {\n\t\t\t\t\t\tif (dp_j.isValueHidden(k)) continue;\n\t\t\t\t\t\tx_j.assign(d_j.at(k));\n\t\t\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\t\t\tdp_j.hide(k, i);  // Here's a branch pruning!\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tx_j.assign(orgVal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV(): number {\n\t\tlet index: number = 0;\n\t\tlet size: number = Number.MAX_VALUE;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (!x.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst d: Domain = x.domain();\n\t\t\tconst s: number = d.size() - x.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level: number): number {\n\t\tlet bc: number = FuzzyForwardChecking.CONTINUE;\n\t\tconst xc_index: number = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst xc: Variable = this.#xs[xc_index];\n\t\tconst d: Domain = xc.domain();\n\t\tconst dp: DomainPruner = xc.solverObject;\n\t\tthis.#sequence[level] = xc;\n\n\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\tif (dp.isValueHidden(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((this.iterLimit && this.iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txc.assign(d.at(i));\n\n\t\t\tfor (const x of this.#xs) x.solverObject.reveal(level);\n\t\t\tif (!this.#checkBackwardConsistency(xc)) continue;\n\t\t\tif (!this.#checkForward(level, xc_index)) continue;\n\n\t\t\tconst nextLevel: number = level + 1;\n\t\t\tbc = (nextLevel === this.#xs.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardChecking.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const x of this.#xs) x.solverObject.reveal(level);\n\t\t}\n\t\txc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level: number): number {\n\t\tlet bc: number = FuzzyForwardChecking.CONTINUE;\n\t\tconst xc: Variable = this.#xs[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d: Domain = xc.domain();\n\t\tconst dp: DomainPruner = xc.solverObject;\n\t\tthis.#sequence[level] = xc;\n\n\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\tif (dp.isValueHidden(i)) continue;\n\t\t\tif ((this.iterLimit && this.iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txc.assign(d.at(i));\n\n\t\t\tconst deg: number = this.pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this.pro);\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;\n\t\t\t\tif (this.targetDeg !== null && this.targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.#pruneUnaryConstraints();\n\t\t\t\tthis.#refresh();\n\t\t\t}\n\t\t}\n\t\txc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec(): boolean {\n\t\tthis.#endTime = (this.timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this.timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tx.solverObject = new DomainPruner(x.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis.pro.clearAllVariables();\n\t\tif (!this.#pruneUnaryConstraints()) return false;  // Since _worstSatisfactionDegree_ has been updated, call this function.\n\n\t\tlet success: boolean = false;\n\t\twhile (true) {\n\t\t\tconst bc: number = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) {\n\t\t\t\tif (this.iterLimit && this.iterLimit < this.#iterCount++) {\n\t\t\t\t\tthis.debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tthis.debugOutput('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.debugOutput(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\tif (this.foundSolution(this.#sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tthis.#solWorstDeg += this.#degInc;  // Find the next solution within the limit.\n\t\t\t} else if (this.targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis.debugOutput('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const x of this.#xs) {\n\t\t\t\tx.solverObject.revealAll();\n\t\t\t}\n\t\t}\n\t\tthis.#sol.apply();\n\t\tfor (const x of this.#xs) {\n\t\t\tx.solverObject = null;  // Delete branch pruner\n\t\t}\n\t\treturn success;\n\t}\n\n}\n", "/**\n * Class implements a solver using the breakout method for fuzzy CSP.\n *\n * @author Takuto Yanagida\n * @version 2024-12-10\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { Assignment } from '../../util/assignment';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\n\nexport class FuzzyBreakout extends Solver {\n\n\t#isRandom: boolean = true;\n\n\t#ws: number[];\n\t#lastSolDeg: number = 0;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\n\t\tthis.#ws = new Array(this.pro.constraintSize());\n\t\tthis.#ws.fill(1);\n\t}\n\n\tname(): string {\n\t\treturn 'Fuzzy Breakout';\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of local solutions, but makes the solution unrepeatable.\n\t * @param flag Whether the randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n\t#findCandidates(worstXs: Iterable<Variable>, canList: AssignmentList): void {\n\t\tlet maxDiff: number = 0;\n\n\t\tfor (const x of worstXs) {\n\t\t\tconst x_v: number = x.value();  // Save the value\n\n\t\t\tlet nowVio: number = 0;\n\t\t\tfor (const c of x) {\n\t\t\t\tnowVio += (1 - c.satisfactionDegree()) * this.#ws[c.index()];\n\t\t\t}\n\t\t\tout: for (const v of x.domain()) {\n\t\t\t\tif (x_v === v) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tx.assign(v);\n\t\t\t\tlet diff: number = nowVio;\n\n\t\t\t\tfor (const c of x) {\n\t\t\t\t\tdiff -= (1 - c.satisfactionDegree()) * this.#ws[c.index()];\n\t\t\t\t\t// If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t\tif (diff < maxDiff) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // Found assignments that are better than ever before.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(x, v);\n\t\t\t\t} else if (maxDiff !== 0) {  // Found assignments that can be improved to the same level as before.\n\t\t\t\t\tcanList.addVariable(x, v);\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.assign(x_v);  // Restore the value.\n\t\t}\n\t}\n\n\t#listWorstVariables(worstCs: Iterable<Constraint>): Iterable<Variable> {\n\t\tconst xs = new Set<Variable>();\n\n\t\tfor (const c of worstCs) {\n\t\t\tfor (const x of c) {\n\t\t\t\txs.add(x);\n\t\t\t}\n\t\t}\n\t\treturn Array.from<Variable>(xs);\n\t}\n\n\texec(): boolean {\n\t\tconst endTime: number = (this.timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this.timeLimit);\n\t\tlet iterCount: number = 0;\n\n\t\tfor (const x of this.pro.variables()) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\tx.assign(x.domain().at(0));\n\t\t\t}\n\t\t}\n\n\t\tconst deg: number = this.pro.worstSatisfactionDegree();\n\t\tconst canList = new AssignmentList();\n\n\t\tconst sol = new AssignmentList();\n\n\t\twhile (true) {\n\t\t\tconst [vcs, wsd] = this.pro.constraintsWithWorstSatisfactionDegree();\n\t\t\tthis.debugOutput(`worst satisfaction degree: ${wsd}`);\n\n\t\t\t// Failure if repeated a specified number\n\t\t\tif (this.iterLimit && this.iterLimit < iterCount++) {\n\t\t\t\tthis.debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Failure if time limit is exceeded\n\t\t\tif (endTime < Date.now()) {\n\t\t\t\tthis.debugOutput('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.#lastSolDeg < wsd) {\n\t\t\t\tsol.setProblem(this.pro);\n\t\t\t\tthis.#lastSolDeg = wsd;\n\n\t\t\t\tif (this.foundSolution(sol, this.#lastSolDeg)) {  // Call hook\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Success if the degree improves from specified\n\t\t\tif (this.targetDeg && this.targetDeg <= wsd) {\n\t\t\t\tthis.debugOutput('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis.#findCandidates(this.#listWorstVariables(vcs), canList);\n\n\t\t\tif (0 < canList.size()) {\n\t\t\t\tconst a: Assignment = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\t\ta.apply();\n\t\t\t\tcanList.clear();\n\t\t\t\tthis.debugOutput('\\t' + a);\n\t\t\t} else {\n\t\t\t\tfor (const c of vcs) {\n\t\t\t\t\tthis.#ws[c.index()] += 1;\n\t\t\t\t}\n\t\t\t\tthis.debugOutput('breakout');\n\t\t\t}\n\t\t}\n\t\tif (this.targetDeg === null && deg < this.pro.worstSatisfactionDegree()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n", "/**\n * This class implements the SRS algorithm.\n *\n * @author Takuto Yanagida\n * @version 2024-12-10\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Constraint } from '../../problem/constraint';\nimport { Assignment } from '../../util/assignment';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\n\nexport class SRS3 extends Solver {\n\n\t// Threshold for adopting a candidate assignment at repair time (should be 0 if strictly following SRS 3)\n\tstatic REPAIR_THRESHOLD = 0;\n\n\t#closedList: Set<TreeNode> = new Set<TreeNode>();\n\t#openList: Set<TreeNode> = new Set<TreeNode>();  // LinkedHashSet is used in the original implementation.\n\t#nodes: TreeNode[] = [];\n\t#neighborConstraints: (Constraint[] | null)[] = [];  // Cache\n\n\t#c_stars: Set<TreeNode> = new Set<TreeNode>();  // ArrayList is used in the original implementation.\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#isRandom: boolean = true;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\n\t\tfor (const c of this.pro.constraints()) {\n\t\t\tthis.#nodes.push(new TreeNode(c));\n\t\t\tthis.#neighborConstraints.push(null);\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'SRS 3';\n\t}\n\n\t#getNeighborConstraints(c: Constraint): Constraint[] {\n\t\tconst i: number = c.index();\n\n\t\tif (this.#neighborConstraints[i] === null) {\n\t\t\tthis.#neighborConstraints[i] = c.neighbors();\n\t\t}\n\t\treturn this.#neighborConstraints[i];\n\t}\n\n\t#repair(c0: Constraint): boolean {\n\t\tthis.debugOutput('repair');\n\n\t\tconst canList = new AssignmentList();\n\t\tconst minDeg0: number = c0.satisfactionDegree();  // Target c0 should certainly be an improvement over this.\n\t\tconst min: number = this.pro.worstSatisfactionDegree();  // Lower bound of neighborhood constraints.\n\t\tlet maxDeg0: number = c0.satisfactionDegree();  // Satisfaction degree of target c0 for the most improvement so far.\n\n\t\t// If a candidate satisfying the condition is stronger than the previous candidates,\n\t\t// it is replaced, and if no candidate is found until the end, it fails.\n\t\tfor (const x of c0) {\n\t\t\tconst x_v: number = x.value();  // Save the value\n\n\t\t\tout: for (const v of x.domain()) {\n\t\t\t\tif (x_v === v) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tx.assign(v);\n\t\t\t\tconst deg0: number = c0.satisfactionDegree();\n\t\t\t\t// If target c0 cannot be improved, the assignment is rejected.\n\t\t\t\tif (minDeg0 > deg0 || maxDeg0 - deg0 > SRS3.REPAIR_THRESHOLD) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const c of x) {\n\t\t\t\t\tif (c === c0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst deg: number = c.satisfactionDegree();\n\t\t\t\t\t// If one of the neighborhood constraints c is less than or equal to the worst, the assignment is rejected.\n\t\t\t\t\tif (deg !== Constraint.UNDEFINED && deg < min) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (deg0 > maxDeg0) {\n\t\t\t\t\tmaxDeg0 = deg0;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t}\n\t\t\t\tcanList.addVariable(x, v);\n\t\t\t}\n\t\t\tx.assign(x_v);  // Restore the value\n\t\t}\n\t\tif (canList.size() > 0) {\n\t\t\tconst a: Assignment = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\ta.apply();\n\t\t\tthis.debugOutput('\\t' + a);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t#shrink(node: TreeNode): void {\n\t\tthis.debugOutput('shrink');\n\n\t\tlet removeCStar: boolean = false;\n\t\twhile (true) {\n\t\t\tnode = node.parent() as TreeNode;\n\t\t\tif (this.#c_stars.delete(node)) {\n\t\t\t\tremoveCStar = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.#repair((node.parent() as TreeNode).getObject())) break;\n\t\t}\n\t\tconst temp: TreeNode[] = [];\n\t\tnode.getDescendants(temp);  // temp contains node.\n\n\t\tfor (const n of temp) {\n\t\t\tn.clear();  // Prepare for reuse\n\t\t\tthis.#openList.delete(n);\n\t\t\tthis.#closedList.delete(n);\n\t\t}\n\n\t\tif (!removeCStar) {\n\t\t\tthis.#openList.add(node);\n\t\t}\n\t}\n\n\t#spread(node: TreeNode): void {\n\t\tthis.debugOutput('spread');\n\t\tthis.#closedList.add(node);\n\n\t\tfor (const c of this.#getNeighborConstraints(node.getObject())) {\n\t\t\tconst tnc: TreeNode = this.#nodes[c.index()];\n\n\t\t\tif (!this.#closedList.has(tnc) && !this.#openList.has(tnc)) {  // For constraints that are not included in Open or Closed.\n\t\t\t\tnode.add(tnc);\n\t\t\t\tthis.#openList.add(tnc);\n\t\t\t}\n\t\t}\n\t}\n\n\t#srs(): boolean {\n\t\tthis.debugOutput('srs');\n\n\t\tconst [wsd_cs,] = this.pro.constraintsWithWorstSatisfactionDegree();\n\t\tfor (const c of wsd_cs) {\n\t\t\tconst cn: TreeNode = this.#nodes[c.index()];\n\t\t\tcn.setParent(null);\n\t\t\tthis.#c_stars.add(cn);\n\t\t}\n\t\tthis.#closedList.clear();\n\t\tthis.#openList.clear();\n\t\tfor (const n of this.#c_stars) {\n\t\t\tthis.#openList.add(n);\n\t\t}\n\n\t\twhile (this.#c_stars.size && this.#openList.size) {\n\t\t\tif (this.iterLimit && this.iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis.debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis.debugOutput('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst node = this.#openList.values().next().value as TreeNode;\n\t\t\tthis.#openList.delete(node);\n\n\t\t\tif (this.#repair(node.getObject())) {\n\t\t\t\tif (this.#c_stars.delete(node)) continue;  // If the repaired node is included in C* (to be deleted)\n\t\t\t\tif (this.#repair((node.parent() as TreeNode).getObject())) {\n\t\t\t\t\tthis.#shrink(node);  // When its improvement leads to the improvement of its parents\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.#spread(node);\n\t\t}\n\t\treturn true;\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime = (this.timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this.timeLimit);\n\t\tthis.#iterCount = 0;\n\t\tif (this.targetDeg && this.targetDeg <= this.pro.worstSatisfactionDegree()) {\n\t\t\treturn true;\n\t\t}\n\t\tconst sol = new AssignmentList();\n\n\t\tlet success: boolean = false;\n\t\twhile (true) {\n\t\t\tconst ret: boolean = this.#srs();\n\t\t\tif (!ret || this.#c_stars.size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst solutionWorstDeg: number = this.pro.worstSatisfactionDegree();\n\t\t\tif (-1 === solutionWorstDeg) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.debugOutput(`\\tfound a solution: ${solutionWorstDeg}\\t${this.targetDeg}`);\n\t\t\tsol.setProblem(this.pro);\n\n\t\t\tif (this.foundSolution(sol, solutionWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.targetDeg === null) {  // Satisfaction degree is not specified\n\t\t\t\tsuccess = true;\n\t\t\t} else if (this.targetDeg <= solutionWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis.debugOutput('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of falling into a local solution, but makes the solution unrepeatable.\n\t * @param flag If true, randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\nclass TreeNode {\n\n\t#children: TreeNode[] = [];\n\t#parent: TreeNode | null;\n\t#obj: any;\n\n\tconstructor(obj: any) {\n\t\tthis.#parent = null;\n\t\tthis.#obj = obj;\n\t}\n\n\tadd(tn: TreeNode): void {\n\t\ttn.#parent = this;\n\t\tthis.#children.push(tn);\n\t}\n\n\tclear(): void {\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.#parent = null;\n\t\t}\n\t\tthis.#children.length = 0;\n\t}\n\n\tgetDescendants(tns: TreeNode[]): void {\n\t\ttns.push(this);\n\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.getDescendants(tns);\n\t\t}\n\t}\n\n\tgetObject(): any {\n\t\treturn this.#obj;\n\t}\n\n\tparent(): TreeNode | null {\n\t\treturn this.#parent;\n\t}\n\n\tsetParent(p: TreeNode | null): void {\n\t\tthis.#parent = p;\n\t}\n\n}\n", "/**\n * Color visions.\n *\n * @author Takuto Yanagida\n * @version 2024-11-06\n */\n\nexport enum Vision {\n\tTRICHROMACY,\n\tPROTANOPIA,\n\tDEUTERANOPIA,\n\tMONOCHROMACY\n};\n", "/**\n * Represents parameters for a color adjustment system, including differences, tolerances,\n * color vision checks, and solver settings.\n *\n * @author Takuto Yanagida\n * @version 2024-10-29\n */\n\nimport { Vision } from './vision';\n\nexport class Parameters {\n\n\t// Domain settings -----------------------------------------------------------\n\n\t#maxDiff    : number = 50;\n\t#maxHueDiff : number = 3.5;\n\t#maxToneDiff: number = 4;\n\t#resolution : number = 5;\n\n\t/**\n\t * Sets the maximum allowable color difference.\n\t *\n\t * @param diff - The maximum color difference.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetMaximumDifference(diff: number): Parameters {\n\t\tthis.#maxDiff = diff;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the maximum allowable color difference.\n\t *\n\t * @returns The maximum color difference.\n\t */\n\tgetMaximumDifference(): number {\n\t\treturn this.#maxDiff;\n\t}\n\n\t/**\n\t * Sets the maximum allowable hue difference.\n\t *\n\t * @param diff - The maximum hue difference.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetMaximumHueDifference(diff: number): Parameters {\n\t\tthis.#maxHueDiff = diff;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the maximum allowable hue difference.\n\t *\n\t * @returns The maximum hue difference.\n\t */\n\tgetMaximumHueDifference(): number {\n\t\treturn this.#maxHueDiff;\n\t}\n\n\t/**\n\t * Sets the maximum allowable tone difference.\n\t *\n\t * @param diff - The maximum tone difference.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetMaximumToneDifference(diff: number): Parameters {\n\t\tthis.#maxToneDiff = diff;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the maximum allowable tone difference.\n\t *\n\t * @returns The maximum tone difference.\n\t */\n\tgetMaximumToneDifference(): number {\n\t\treturn this.#maxToneDiff;\n\t}\n\n\t/**\n\t * Sets the resolution for color adjustments.\n\t *\n\t * @param resolution - The color resolution.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetResolution(resolution: number): Parameters {\n\t\tthis.#resolution = resolution;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the resolution for color adjustments.\n\t *\n\t * @returns The color resolution.\n\t */\n\tgetResolution(): number {\n\t\treturn this.#resolution;\n\t}\n\n\t// Constraint settings -------------------------------------------------------\n\n\t#doCheckT: boolean = false;\n\t#doCheckP: boolean = true;\n\t#doCheckD: boolean = true;\n\t#doCheckM: boolean = false;\n\n\t// Traditional Method\n\t#tarDiffT: number = 20;\n\t#tarDiffP: number = 20;\n\t#tarDiffD: number = 20;\n\t#tarDiffM: number = 20;\n\n\t// Method to Store Ratio for Trichromacy\n\t#isRatioMode: boolean = true;\n\n\t#doKeepHue : boolean = true;\n\t#hueTol    : number  = 0.5;  // 0: same, 1: adjacent, 2-3: similar (max: 3.5)\n\t#doKeepTone: boolean = true;\n\t#toneTol   : number  = 0.5;  // 0.5: same, 2: similar (max: 4)\n\n\t#conspicuity    : boolean = false;\n\t#conspicuityRate: number  = 0.5;  // [0.01, 0.99]\n\n\t/**\n\t * Sets the color vision checks for trichromacy, protanopia, deuteranopia, and monochromacy.\n\t *\n\t * @param trichromacy - Whether to check trichromacy.\n\t * @param protanopia - Whether to check protanopia.\n\t * @param deuteranopia - Whether to check deuteranopia.\n\t * @param monochromacy - Whether to check monochromacy.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetVisionChecked(trichromacy: boolean, protanopia: boolean, deuteranopia: boolean, monochromacy: boolean): Parameters {\n\t\tthis.#doCheckT = trichromacy;\n\t\tthis.#doCheckP = protanopia;\n\t\tthis.#doCheckD = deuteranopia;\n\t\tthis.#doCheckM = monochromacy;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if a specific type of color vision (trichromacy, protanopia, deuteranopia, or monochromacy) is enabled.\n\t *\n\t * @param vis - The vision type to check.\n\t * @returns `true` if the specified vision check is enabled, `false` otherwise.\n\t */\n\tdoCheckVision(vis: Vision): boolean {\n\t\tswitch (vis) {\n\t\t\tcase Vision.TRICHROMACY : return this.#doCheckT;\n\t\t\tcase Vision.PROTANOPIA  : return this.#doCheckP;\n\t\t\tcase Vision.DEUTERANOPIA: return this.#doCheckD;\n\t\t\tcase Vision.MONOCHROMACY: return this.#doCheckM;\n\t\t}\n\t}\n\n\n\t// Start - Traditional Method\n\n\t/**\n\t * Sets the target color differences for trichromacy, protanopia, deuteranopia, and monochromacy.\n\t *\n\t * @param trichromacy - Target difference for trichromacy.\n\t * @param protanopia - Target difference for protanopia.\n\t * @param deuteranopia - Target difference for deuteranopia.\n\t * @param monochromacy - Target difference for monochromacy.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetTargetDifferences(trichromacy: number, protanopia: number, deuteranopia: number, monochromacy: number): Parameters {\n\t\tthis.#tarDiffT = trichromacy;\n\t\tthis.#tarDiffP = protanopia;\n\t\tthis.#tarDiffD = deuteranopia;\n\t\tthis.#tarDiffM = monochromacy;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the target difference for a specified color vision type.\n\t *\n\t * @param vis - The vision type.\n\t * @returns The target difference for the specified vision type.\n\t */\n\tgetTargetDifference(vis: Vision): number {\n\t\tswitch (vis) {\n\t\t\tcase Vision.TRICHROMACY : return this.#tarDiffT;\n\t\t\tcase Vision.PROTANOPIA  : return this.#tarDiffP;\n\t\t\tcase Vision.DEUTERANOPIA: return this.#tarDiffD;\n\t\t\tcase Vision.MONOCHROMACY: return this.#tarDiffM;\n\t\t}\n\t}\n\n\t// End - Traditional Method\n\n\n\t// Start - Method to Store Ratio for Trichromacy\n\n\t/**\n\t * Enables or disables ratio mode.\n\t *\n\t * @param enabled - Whether to enable ratio mode.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetRatioModeEnabled(enabled: boolean): Parameters {\n\t\tthis.#isRatioMode = enabled;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if ratio mode is enabled.\n\t *\n\t * @returns `true` if ratio mode is enabled, `false` otherwise.\n\t */\n\tisRatioModeEnabled(): boolean {\n\t\treturn this.#isRatioMode;\n\t}\n\n\t// End - Method to Store Ratio for Trichromacy\n\n\n\t/**\n\t * Sets whether hue should be preserved.\n\t *\n\t * @param f - Whether to preserve hue.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetHuePreserved(f: boolean): Parameters {\n\t\tthis.#doKeepHue = f;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if hue is set to be preserved.\n\t *\n\t * @returns `true` if hue is preserved, `false` otherwise.\n\t */\n\tdoPreserveHue(): boolean {\n\t\treturn this.#doKeepHue;\n\t}\n\n\t/**\n\t * Sets the tolerance for hue difference.\n\t *\n\t * @param difference - The allowable hue difference.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetHueTolerance(difference: number): Parameters {\n\t\tthis.#hueTol = difference;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the hue tolerance.\n\t *\n\t * @returns The allowable hue difference.\n\t */\n\tgetHueTolerance(): number {\n\t\treturn this.#hueTol;\n\t}\n\n\t/**\n\t * Sets whether tone should be preserved.\n\t *\n\t * @param f - Whether to preserve tone.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetTonePreserved(f: boolean): Parameters {\n\t\tthis.#doKeepTone = f;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if tone is set to be preserved.\n\t *\n\t * @returns `true` if tone is preserved, `false` otherwise.\n\t */\n\tdoPreserveTone(): boolean {\n\t\treturn this.#doKeepTone;\n\t}\n\n\t/**\n\t * Sets the tolerance for tone difference.\n\t *\n\t * @param difference - The allowable tone difference.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetToneTolerance(difference: number): Parameters {\n\t\tthis.#toneTol = difference;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the tone tolerance.\n\t *\n\t * @returns The allowable tone difference.\n\t */\n\tgetToneTolerance(): number {\n\t\treturn this.#toneTol;\n\t}\n\n\t/**\n\t * Sets whether conspicuity is checked.\n\t *\n\t * @param enabled - Whether conspicuity check is enabled.\n\t */\n\tsetConspicuityChecked(enabled: boolean): void {\n\t\tthis.#conspicuity = enabled;\n\t}\n\n\t/**\n\t * Checks if conspicuity is set to be checked.\n\t *\n\t * @returns `true` if conspicuity is checked, `false` otherwise.\n\t */\n\tdoCheckConspicuity(): boolean {\n\t\treturn this.#conspicuity;\n\t}\n\n\t/**\n\t * Sets the conspicuity rate.\n\t *\n\t * @param rate - The conspicuity rate (range [0.01, 0.99]).\n\t */\n\tsetConspicuityRate(rate: number): void {\n\t\tthis.#conspicuityRate = rate;\n\t}\n\n\t/**\n\t * Retrieves the conspicuity rate.\n\t *\n\t * @returns The conspicuity rate.\n\t */\n\tgetConspicuityRate(): number {\n\t\treturn this.#conspicuityRate;\n\t}\n\n\t// Solver settings -----------------------------------------------------------\n\n\t#timeLimit           : number | null = 8000;\n\t#targetDesirability  : number | null = 0.8;\n\t#solver              : SolverType    = SolverType.FC;\n\t#isBottleneckResolved: boolean       = false;\n\n\t/**\n\t * Sets the time limit for the solver in milliseconds.\n\t *\n\t * @param timeLimit - The time limit in milliseconds.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetTimeLimit(timeLimit: number | null): Parameters {\n\t\tthis.#timeLimit = timeLimit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the time limit for the solver.\n\t *\n\t * @returns The time limit in milliseconds.\n\t */\n\tgetTimeLimit(): number | null {\n\t\treturn this.#timeLimit;\n\t}\n\n\t/**\n\t * Sets the desirability target value for the solver.\n\t *\n\t * @param d - The desirability value.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetTargetDesirability(d: number | null): Parameters {\n\t\tthis.#targetDesirability = d;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the desirability target for the solver.\n\t *\n\t * @returns The desirability target value.\n\t */\n\tgetTargetDesirability(): number | null {\n\t\treturn this.#targetDesirability;\n\t}\n\n\t/**\n\t * Sets the solver to use for color adjustment.\n\t *\n\t * @param s - The solver algorithm.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetSolver(s: SolverType): Parameters {\n\t\tthis.#solver = s;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the solver in use for color adjustment.\n\t *\n\t * @returns The solver algorithm.\n\t */\n\tgetSolverType(): SolverType {\n\t\treturn this.#solver;\n\t}\n\n\t/**\n\t * Sets whether the bottleneck should be resolved in the color adjustment.\n\t *\n\t * @param resolved - Whether bottleneck resolution is enabled.\n\t * @returns The current `Parameters` instance for method chaining.\n\t */\n\tsetBottleneckResolved(resolved: boolean): Parameters {\n\t\tthis.#isBottleneckResolved = resolved;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if bottleneck resolution is enabled for color adjustment.\n\t *\n\t * @returns `true` if bottleneck resolution is enabled, `false` otherwise.\n\t */\n\tisBottleneckResolved(): boolean {\n\t\treturn this.#isBottleneckResolved;\n\t}\n\n}\n\nexport enum SolverType {\n\tFC,\n\tSRS3,\n\tFUZZY_BREAKOUT\n};\n", "/**\n * Vertex\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nexport type Vertex = [number, number, number];\n\nexport function add(a: Vertex, b: Vertex): Vertex {\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n}\n\nexport function sub(a: Vertex, b: Vertex): Vertex {\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n}\n\nexport function intDiv(a: Vertex, b: Vertex, m: number = 0.5): Vertex {\n\tconst n: number = 1 - m;\n\treturn [\n\t\ta[0] * n + b[0] * m,\n\t\ta[1] * n + b[1] * m,\n\t\ta[2] * n + b[2] * m,\n\t];\n}\n", "/**\n * Plane\n *\n * @author Takuto Yanagida\n * @version 2024-11-22\n */\n\nimport { Vertex } from './vertex';\nimport { Edge } from './edge';\n\n/**\n * Represents a plane in 3D space defined by the equation AX + BY + CZ + D = 0.\n * This class provides methods to calculate the side of a point relative to the plane,\n * and to find intersections of edges or vertices with the plane.\n */\nexport class Plane {\n\n\tstatic readonly E: number = 0.001;\n\n\t#A: number;\n\t#B: number;\n\t#C: number;\n\t#D: number;\n\n\t/**\n\t * Creates a plane from a specified center point and a direction vector.\n\t * The direction vector (from p0 to p1) defines the plane's orientation.\n\t *\n\t * @param p0 - The center point on the plane.\n\t * @param p1 - A point determining the direction vector of the plane.\n\t */\n\tconstructor(p0: Vertex, p1: Vertex) {\n\t\tconst len: number = Math.sqrt(p1[0] * p1[0] + p1[1] * p1[1] + p1[2] * p1[2]);\n\t\tthis.#A = p1[0] / len;\n\t\tthis.#B = p1[1] / len;\n\t\tthis.#C = p1[2] / len;\n\t\tthis.#D = - this.#A * p0[0] - this.#B * p0[1] - this.#C * p0[2];\n\t}\n\n\t/**\n\t * Determines the relative position of a given vertex to the plane.\n\t * Returns -1 if the point is below the plane, 1 if above, and 0 if on the plane.\n\t *\n\t * @param p - The vertex to evaluate.\n\t * @returns -1, 0, or 1 indicating the side of the plane the vertex is on.\n\t */\n\tside(p: Vertex): -1 | 0 | 1 {\n\t\tconst t: number = this.#A * p[0] + this.#B * p[1] + this.#C * p[2] + this.#D;\n\t\tif (t < -Plane.E) return -1;\n\t\tif (t > Plane.E) return 1;\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Calculates the side of each vertex in a list relative to the plane.\n\t *\n\t * @param vs - An array of vertices to evaluate.\n\t * @returns A map of each vertex to its side relative to the plane.\n\t */\n\tsides(vs: Vertex[]): Map<Vertex, number> {\n\t\tconst sides: Map<Vertex, number> = new Map();\n\n\t\tfor (const v of vs) {\n\t\t\tsides.set(v, this.side(v));\n\t\t}\n\t\treturn sides;\n\t}\n\n\t/**\n\t * Calculates the intersection point of a line segment with the plane, if any.\n\t * The line segment is defined by two vertices, and the intersection point\n\t * is returned if it lies within the segment bounds.\n\t *\n\t * @param v0 - The starting vertex of the line segment.\n\t * @param v1 - The ending vertex of the line segment.\n\t * @returns The intersection vertex if it exists within the segment, otherwise null.\n\t */\n\t#intersection(v0: Vertex, v1: Vertex): Vertex | null {\n\t\tconst d: number = this.#A * (v0[0] - v1[0]) + this.#B * (v0[1] - v1[1]) + this.#C * (v0[2] - v1[2]);\n\t\tif (Math.abs(d) < 0.001) {\n\t\t\treturn null;\n\t\t}\n\t\tconst u: number = (this.#A * v0[0] + this.#B * v0[1] + this.#C * v0[2] + this.#D) / d;\n\t\tif (u < 0 || 1 < u) {\n\t\t\treturn null;\n\t\t}\n\t\treturn [v0[0] + u * (v1[0] - v0[0]), v0[1] + u * (v1[1] - v0[1]), v0[2] + u * (v1[2] - v0[2])];\n\t}\n\n\t/**\n\t * Calculates intersection points of a list of edges with the plane.\n\t * Each intersection is stored for both the edge and its paired edge if applicable.\n\t *\n\t * @param es - An array of edges to check for intersections with the plane.\n\t * @returns A map of each edge to its intersection vertex, if any.\n\t */\n\tintersections(es: Edge[]): Map<Edge, Vertex> {\n\t\tconst ret: Map<Edge, Vertex> = new Map();\n\n\t\tfor (const e of es) {\n\t\t\tif (ret.has(e)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst v: Vertex | null = this.#intersection(e.getBegin(), e.getEnd() as Vertex);\n\t\t\tif (v) {\n\t\t\t\tret.set(e, v);\n\t\t\t\tif (e.pair) {\n\t\t\t\t\tret.set(e.pair, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n", "/**\n * Edge\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex } from './vertex';\n\n/**\n * Represents an edge in a geometric structure, connecting two vertices.\n * Each edge may have a paired edge in the opposite direction and a next edge within the same face.\n */\nexport class Edge {\n\n\t#bgn: Vertex;\n\t#end!: Vertex;\n\n\t/**\n\t * The next edge in the same face\n\t */\n\tpublic next: Edge | null = null;\n\n\t/**\n\t * The paired edge in the opposite direction\n\t */\n\tpublic pair: Edge | null = null;\n\n\t/**\n\t * Creates an instance of Edge with the specified beginning vertex.\n\t *\n\t * @param v - The starting vertex of this edge.\n\t */\n\tconstructor(v: Vertex) {\n\t\tthis.#bgn = v;\n\t}\n\n\tsetNext(e: Edge): void {\n\t\tthis.next = e;\n\t\tthis.#end = e.#bgn;\n\t}\n\n\t/**\n\t * Returns the starting vertex of this edge.\n\t *\n\t * @returns The starting vertex of the edge.\n\t */\n\tgetBegin(): Vertex {\n\t\treturn this.#bgn;\n\t}\n\n\t/**\n\t * Returns the ending vertex of this edge.\n\t *\n\t * @returns The ending vertex of the edge, defined as the starting vertex of the next edge.\n\t */\n\tgetEnd(): Vertex {\n\t\treturn this.#end;\n\t}\n\n}\n", "/**\n * Face\n *\n * @author Takuto Yanagida\n * @version 2024-11-22\n */\n\nimport { Vertex } from './vertex';\nimport { Edge } from './edge';\n\n/**\n * Represents a face in a geometric structure, composed of edges that form a closed loop.\n * Each face has a reference to its first edge and provides methods to calculate points\n * within or along its edges in a plane.\n */\nexport class Face {\n\n\tstatic readonly E: number = 0.001;\n\n\t#firstEdge: Edge;\n\n\t/**\n\t * Creates an instance of Face, setting up the circular linkage of edges\n\t * to define a closed face.\n\t *\n\t * @param es - An array of edges that form the face.\n\t */\n\tconstructor(es: Edge[]) {\n\t\tconst n: number = es.length;\n\n\t\tfor (let i: number = 0; i < n - 1; ++i) {\n\t\t\tes[i].setNext(es[i + 1]);\n\t\t}\n\t\tes[n - 1].setNext(es[0]);\n\n\t\tthis.#firstEdge = es[0];\n\t}\n\n\t/**\n\t * Calculates the number of edges that compose this face.\n\t *\n\t * @returns The total number of edges in the face.\n\t */\n\tlength(): number {\n\t\tlet ret: number = 0;\n\t\tlet e: Edge = this.#firstEdge;\n\t\tdo {\n\t\t\tret += 1;\n\t\t\te = e.next as Edge;\n\t\t} while (e !== this.#firstEdge);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns the vertices on the specified side of the face based on a provided side reference.\n\t *\n\t * @param refSide - The reference side of the face.\n\t * @param vertToSide - A map associating each vertex with a specific side.\n\t * @param edgeToInter - A map providing intersection points for edges that intersect a plane.\n\t * @returns An array of vertices on the specified side of the face.\n\t */\n\tverticesOf(refSide: number, vertToSide: Map<Vertex, number>, edgeToInter: Map<Edge, Vertex>): Vertex[] {\n\t\tconst ret: Vertex[] = [];  // Array to store vertices on the specified side.\n\n\t\tlet e: Edge = this.#firstEdge;\n\t\tdo {\n\t\t\tconst v: Vertex = e.getBegin();\n\t\t\tif (vertToSide.get(v) as number * refSide >= 0) {\n\t\t\t\tret.push(v);  // Adds vertex on the specified side.\n\t\t\t}\n\t\t\tif (edgeToInter.has(e)) {\n\t\t\t\tret.push(edgeToInter.get(e) as Vertex);  // Adds intersection point of edge with plane.\n\t\t\t}\n\t\t\te = e.next as Edge;\n\t\t} while (e !== this.#firstEdge);\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Counts grid points within the face restricted to a specific plane (common z-coordinate).\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The center y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns The count of grid points within the face.\n\t */\n\tcountGridPoints(cx: number, cy: number, resolution: number): number {\n\t\tlet ret: number = 0;\n\n\t\tconst pc: number = this.#countInternalPoints(cx, cy, resolution);\n\t\tret += pc;\n\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst pc: number = this.#countInternalPoints(cx, cy + inc * resolution, resolution);\n\t\t\tif (0 === pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst pc: number = this.#countInternalPoints(cx, cy - inc * resolution, resolution);\n\t\t\tif (0 === pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns internal grid points along the x-axis within the boundaries of the face on a given plane.\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns The number of internal grid points at the specified y-coordinate.\n\t */\n\t#countInternalPoints(cx: number, cy: number, resolution: number): number {\n\t\tconst ips: number[] = this.#getIntersectionPoints(cy);\n\n\t\tlet [x0, x1] = ips;\n\t\tif (x0 > x1) {\n\t\t\t[x0, x1] = [x1, x0];\n\t\t}\n\t\tlet pc: number = 0;\n\t\tif (x0 < cx && cx < x1) {\n\t\t\tpc += 1;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pc;\n\t\t\tconst x: number = cx + inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpc += 1;\n\t\t\t}\n\t\t\tif (pc === s) break;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pc;\n\t\t\tconst x: number = cx - inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpc += 1;\n\t\t\t}\n\t\t\tif (pc === s) break;\n\t\t}\n\t\treturn pc;\n\t}\n\n\t/**\n\t * Calculates grid points within the face restricted to a specific plane (common z-coordinate).\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The center y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns An array of 3D points within the face on the specified plane.\n\t */\n\tgetGridPoints(cx: number, cy: number, resolution: number): [number, number, number][] {\n\t\tconst ret: [number, number, number][] = [];\n\t\tconst z: number = this.#firstEdge.getBegin()[2];\n\n\t\tconst ps: number[] = this.#getInternalPoints(cx, cy, resolution);\n\t\tfor (const x of ps) {\n\t\t\tret.push([x, cy, z]);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst y: number = cy + inc * resolution;\n\t\t\tconst ps: number[] = this.#getInternalPoints(cx, y, resolution);\n\t\t\tif (0 === ps.length) break;\n\t\t\tfor (const x of ps) {\n\t\t\t\tret.push([x, y, z]);\n\t\t\t}\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst y: number = cy - inc * resolution;\n\t\t\tconst ps: number[] = this.#getInternalPoints(cx, y, resolution);\n\t\t\tif (0 === ps.length) break;\n\t\t\tfor (const x of ps) {\n\t\t\t\tret.push([x, y, z]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Computes the x-coordinates of grid points within the face boundaries at a specific y-coordinate.\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The y-coordinate at which to compute points.\n\t * @param resolution - The resolution of the grid.\n\t * @returns An array of x-coordinates of internal grid points at the specified y-coordinate.\n\t */\n\t#getInternalPoints(cx: number, cy: number, resolution: number): number[] {\n\t\tconst ips: number[] = this.#getIntersectionPoints(cy);\n\n\t\tlet [x0, x1] = ips;\n\t\tif (x0 > x1) {\n\t\t\t[x0, x1] = [x1, x0];\n\t\t}\n\t\tconst pts: number[] = [];\n\t\tif (x0 < cx && cx < x1) {\n\t\t\tpts.push(cx);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pts.length;\n\t\t\tconst x: number = cx + inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpts.push(x);\n\t\t\t}\n\t\t\tif (pts.length === s) break;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pts.length;\n\t\t\tconst x: number = cx - inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpts.push(x);\n\t\t\t}\n\t\t\tif (pts.length === s) break;\n\t\t}\n\t\treturn pts;\n\t}\n\n\t/**\n\t * Calculates the x-coordinates where the face's edges intersect a horizontal line at a specified y-coordinate.\n\t *\n\t * @param y - The y-coordinate at which to find intersections.\n\t * @returns An array of x-coordinates where the edges intersect the horizontal line.\n\t */\n\t#getIntersectionPoints(y: number): number[] {\n\t\tconst pts: number[] = [];\n\n\t\tfor (let e: Edge = this.#firstEdge; ; e = e.next as Edge) {\n\t\t\tconst xs: number[] = Face.#getIntersection(e, y);\n\t\t\tpts.push(...xs);\n\t\t\tif (e.next === this.#firstEdge) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn Face.#removeDuplicates(pts);\n\t}\n\n\t/**\n\t * Calculates the x-coordinate(s) where a given edge intersects a horizontal line at a specified y-coordinate.\n\t *\n\t * @param e - The edge to check for intersection.\n\t * @param y - The y-coordinate of the horizontal line.\n\t * @returns An array of x-coordinates where the edge intersects the line; empty if no intersection.\n\t */\n\tstatic #getIntersection(e: Edge, y: number): number[] {\n\t\tconst [x0, y0] = e.getBegin();\n\t\tconst [x1, y1] = e.getEnd();\n\n\t\tif (y < Math.min(y0, y1) || Math.max(y0, y1) < y) {\n\t\t\treturn [];\n\t\t}\n\t\tif (Math.abs(y0 - y1) < Face.E) {\n\t\t\treturn [x0, x1];\n\t\t}\n\t\tconst A: number = y1 - y0;\n\t\tconst B: number = -(x1 - x0);\n\t\tconst C: number = - A * x0 - B * y0;\n\n\t\tif (Math.abs(A) < Face.E) {\n\t\t\treturn [];\n\t\t}\n\t\treturn [-(B * y + C) / A];\n\t}\n\n\t/**\n\t * Removes near-duplicate numbers from an array, considering values within a small epsilon (Face.E) as duplicates.\n\t *\n\t * @param vs - An array of numbers.\n\t * @returns A new sorted array with near-duplicates removed.\n\t */\n\tstatic #removeDuplicates(vs: number[]): number[] {\n\t\tif (vs.length === 0) return [];\n\n\t\tvs.sort((a: number, b: number): number => a - b);\n\t\tconst res: number[] = [];\n\t\tlet cur: number = vs[0];\n\n\t\tfor (let i: number = 1; i < vs.length; i++) {\n\t\t\tif (Face.E < vs[i] - vs[i - 1]) {\n\t\t\t\tres.push(cur);\n\t\t\t\tcur = vs[i];\n\t\t\t}\n\t\t}\n\t\tres.push(cur);\n\t\treturn res;\n\t}\n\n}\n", "/**\n * Mesh\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex, add } from './vertex';\nimport { Edge } from './edge';\nimport { Face } from './face';\nimport { Plane } from './plane';\n\n/**\n * Represents a mesh structure composed of vertices, edges, and faces in 3D space.\n * The Mesh class provides methods to build the mesh, split it along a plane, and\n * compute cross-sections.\n */\nexport class Mesh {\n\n\t#vs: Vertex[] = [];\n\t#es: Edge[]   = [];\n\t#fs: Face[]   = [];\n\n\t/**\n\t * Builds the mesh using a set of vertices and face indices.\n\t * Each face is formed by a series of edges created from the vertices.\n\t *\n\t * @param vs - The vertices of the mesh.\n\t * @param faceIndex - Array of vertex indices, where each sub-array defines the vertices of a face.\n\t */\n\tstatic buildMesh(vs: Vertex[], faceIndex: number[][]): Mesh {\n\t\tconst m = new Mesh();\n\t\tfor (const v of vs) {\n\t\t\tm.#vs.push([...v]);\n\t\t}\n\t\tfor (const vis of faceIndex) {\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const vi of vis) {\n\t\t\t\tfaceEs.push(new Edge(m.#vs[vi]));\n\t\t\t}\n\t\t\tm.#es.push(...faceEs);\n\t\t\tm.#fs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(m.#es);\n\t\treturn m;\n\t}\n\n\t/**\n\t * Pairs edges that are at the same position but in opposite directions.\n\t * This method ensures that half-edges have corresponding paired edges.\n\t *\n\t * @param es - Array of edges in the mesh.\n\t */\n\tstatic #pairEdges(es: Edge[]): void {\n\t\tfor (const e0 of es) {\n\t\t\tif (e0.pair !== null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const e1 of es) {\n\t\t\t\tif (e0 === e1 || e1.pair !== null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Matching edge in opposite direction\n\t\t\t\tif (e0.getBegin() === e1.getEnd() && e1.getBegin() === e0.getEnd()) {\n\t\t\t\t\te0.pair = e1;\n\t\t\t\t\te1.pair = e0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconstructor() {\n\t}\n\n\t/**\n\t * Splits the mesh along a specified plane and generates new faces and vertices on one side of the plane.\n\t *\n\t * @param p - The plane to split the mesh along.\n\t * @param site - The reference vertex to determine which side of the plane to retain.\n\t */\n\tsplitMesh(p: Plane, site: Vertex): void {\n\t\tconst siteSide: number = p.side(site);\n\t\tif (siteSide === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst edgeToInter: Map<Edge, Vertex> = p.intersections(this.#es);\n\t\tif (edgeToInter.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst sides: Map<Vertex, number> = p.sides(this.#vs);  // Check if each vertex is on front or back side of the plane\n\t\tconst newVs: Vertex[] = [];\n\t\tconst newEs: Edge[]   = [];\n\t\tconst newFs: Face[]   = [];\n\n\t\tfor (const f of this.#fs) {\n\t\t\tconst newFaceVs: Vertex[] = f.verticesOf(siteSide, sides, edgeToInter);\n\n\t\t\tif (newFaceVs.length <= 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If there are three or more vertices on the reference side, create a new face\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const v of newFaceVs) {\n\t\t\t\tif (!newVs.includes(v)) {\n\t\t\t\t\tnewVs.push(v);\n\t\t\t\t}\n\t\t\t\tfaceEs.push(new Edge(v));\n\t\t\t}\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(newEs);\n\n\t\tconst unpairedEs: Edge[] = newEs.filter((e: Edge): boolean => e.pair === null);\n\n\t\t// Handle unpaired edges to form a closed loop, creating a new face\n\t\tif (unpairedEs.length > 0) {\n\t\t\tconst faceEs: Edge[] = Mesh.#createFaceEdgesFromUnpairedEdges(unpairedEs);\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tthis.#vs = newVs;\n\t\tthis.#fs = newFs;\n\t\tthis.#es = newEs;\n\t}\n\n\t/**\n\t * Computes the cross-section of the mesh along a specified plane.\n\t * Returns a face that represents the cross-section if it exists.\n\t *\n\t * @param org - The origin vertex for the plane.\n\t * @param norm - The normal vector for the plane.\n\t * @returns A Face representing the cross-section or null if no intersection exists.\n\t */\n\tcrossSection(org: Vertex, norm: Vertex): Face | null {\n\t\tconst p       : Plane = new Plane(org, norm);\n\t\tconst siteSide: number = p.side(add(org, norm));\n\t\tif (siteSide === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// Determine front or back side for each vertex\n\t\tconst edgeToInter: Map<Edge, Vertex> = p.intersections(this.#es);\n\t\tif (edgeToInter.size === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst sides: Map<Vertex, number> = p.sides(this.#vs);\n\t\tconst newEs: Edge[]   = [];\n\t\tconst newFs: Face[]   = [];\n\n\t\tfor (const f of this.#fs) {\n\t\t\tconst newFaceVs: Vertex[] = f.verticesOf(siteSide, sides, edgeToInter);\n\n\t\t\tif (newFaceVs.length <= 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Create a new face if there are three or more vertices on the reference side\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const v of newFaceVs) {\n\t\t\t\tfaceEs.push(new Edge(v));\n\t\t\t}\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(newEs);\n\n\t\tconst unpairedEs: Edge[] = newEs.filter((e: Edge): boolean => e.pair === null);\n\n\t\t// Form a closed loop with unpaired edges to create a new face if possible\n\t\tif (unpairedEs.length > 0) {\n\t\t\tconst faceEs: Edge[] = Mesh.#createFaceEdgesFromUnpairedEdges(unpairedEs);\n\t\t\tif (faceEs.length > 2) {\n\t\t\t\treturn new Face(faceEs);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic #createFaceEdgesFromUnpairedEdges(unpairedEs: Edge[]): Edge[] {\n\t\tconst faceEs: Edge[] = [];\n\t\tlet e: Edge = unpairedEs[0];\n\t\tdo {\n\t\t\tif (e.next === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet next: Edge = e.next;\n\t\t\twhile (next && !unpairedEs.includes(next)) {\n\t\t\t\tnext = (next.pair as Edge).next as Edge;\n\t\t\t}\n\t\t\tconst ne: Edge = new Edge(next.getBegin());\n\t\t\tfaceEs.push(ne);\n\t\t\tne.pair = e;\n\t\t\te.pair  = ne;\n\t\t\te       = next;\n\t\t} while (e !== unpairedEs[0]);\n\n\t\tfaceEs.reverse();\n\t\treturn faceEs;\n\t}\n\n}\n", "/**\n * Voronoi Partition\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex, intDiv, sub } from './vertex';\nimport { Plane } from './plane';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\n\n/**\n * Represents a Voronoi partition in 3D space. This class provides methods to create and\n * manage Voronoi cells using a set of sites, adjacency tables, and weight tables.\n * Each cell is represented as a mesh structure.\n */\nexport class Voronoi {\n\n\tstatic readonly FACE_INDEXES: number[][] = [\n\t\t[0, 1, 2, 3], [1, 0, 4, 5], [0, 3, 7, 4],\n\t\t[2, 1, 5, 6], [5, 4, 7, 6], [3, 2, 6, 7]\n\t];\n\n\t#defaultVs: Vertex[];\n\n\t#sites: Vertex[] = [];\n\t#cells: Mesh[] = [];;\n\n\t/**\n\t * Initializes the Voronoi partition with default vertices defining a bounding box.\n\t *\n\t * @param x0 - Minimum x-coordinate for the bounding box.\n\t * @param x1 - Maximum x-coordinate for the bounding box.\n\t * @param y0 - Minimum y-coordinate for the bounding box.\n\t * @param y1 - Maximum y-coordinate for the bounding box.\n\t * @param z0 - Minimum z-coordinate for the bounding box.\n\t * @param z1 - Maximum z-coordinate for the bounding box.\n\t */\n\tconstructor(x0: number, x1: number, y0: number, y1: number, z0: number, z1: number) {\n\t\tthis.#defaultVs = [\n\t\t\t[x1, y1, z1], [x0, y1, z1],\n\t\t\t[x0, y1, z0], [x1, y1, z0],\n\t\t\t[x1, y0, z1], [x0, y0, z1],\n\t\t\t[x0, y0, z0], [x1, y0, z0],\n\t\t];\n\t}\n\n\t/**\n\t * Adds a site for the Voronoi partition.\n\t *\n\t * @param site - Coordinates of the site as a tuple [x, y, z].\n\t */\n\taddSite(site: [number, number, number]): void {\n\t\tthis.#sites.push([...site]);\n\t}\n\n\t/**\n\t * Initializes and creates Voronoi cells based on optionally provided adjacency and weight tables.\n\t *\n\t * @param adjacencyTable - Optional adjacency table for defining relationships between sites.\n\t * @param weightTable - Optional weight table that affects partitioning.\n\t */\n\tcreateCells(adjacencyTable: number[][] | null = null, weightTable: number[][] | null = null): void {\n\t\tthis.#cells.length = 0;\n\n\t\tif (!adjacencyTable && !weightTable) {\n\t\t\tthis.#divide1();\n\t\t} else if (adjacencyTable && !weightTable) {\n\t\t\tthis.#divide2(adjacencyTable);\n\t\t} else if (adjacencyTable && weightTable) {\n\t\t\tthis.#divide3(adjacencyTable, weightTable);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells.\n\t */\n\t#divide1(): void {\n\t\tfor (const s of this.#sites) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tfor (const t of this.#sites) {\n\t\t\t\tif (s === t) continue;\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells based on adjacency\n\t * tables.\n\t *\n\t * @param adjTab - Optional adjacency table for the sites.\n\t */\n\t#divide2(adjTab: number[][]): void {\n\t\tfor (const [i, s] of this.#sites.entries()) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tfor (let a of adjTab[i]) {\n\t\t\t\tconst t: Vertex = this.#sites[a];\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells based on adjacency\n\t * and weight tables.\n\t *\n\t * @param adjTab - Optional adjacency table for the sites.\n\t * @param weiTab - Optional weight table that influences partitioning.\n\t */\n\t#divide3(adjTab: number[][], weiTab: number[][]): void {\n\t\tfor (const [i, s] of this.#sites.entries()) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tconst as: number[] = adjTab[i];\n\t\t\tconst ws: number[] = weiTab[i];\n\n\t\t\tfor (let j: number = 0; j < as.length; ++j) {\n\t\t\t\tconst t: Vertex = this.#sites[as[j]];\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t, ws[j]), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\n\t/**\n\t * Counts a grid of points within a specified cell at a given resolution.\n\t *\n\t * @param index - The index of the cell for which to calculate grid points.\n\t * @param resolution - The spacing between grid points.\n\t * @returns Count of the points.\n\t */\n\tcountGrids(index: number, resolution: number): number {\n\t\tlet ret : number = 0;\n\n\t\tconst norm: Vertex = [0, 0, 1];\n\t\tconst s   : Vertex = this.#sites[index];\n\t\tconst c   : Mesh   = this.#cells[index];\n\n\t\tconst f: Face | null = c.crossSection([0, 0, s[2]], norm);\n\t\tif (f) {\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] + inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tif (!pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] - inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tif (!pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Calculates a grid of points within a specified cell at a given resolution.\n\t *\n\t * @param index - The index of the cell for which to calculate grid points.\n\t * @param resolution - The spacing between grid points.\n\t * @returns A list of 3D coordinates representing grid points within the cell.\n\t */\n\tgetGrids(index: number, resolution: number): Vertex[] {\n\t\tconst ret : Vertex[] = [];\n\n\t\tconst norm: Vertex = [0, 0, 1];\n\t\tconst s   : Vertex = this.#sites[index];\n\t\tconst c   : Mesh   = this.#cells[index];\n\n\t\tconst f: Face | null = c.crossSection([0, 0, s[2]], norm);\n\t\tif (f) {\n\t\t\tret.push(...f.getGridPoints(s[0], s[1], resolution));\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] + inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst ps: Vertex[] = f.getGridPoints(s[0], s[1], resolution);\n\t\t\tif (!ps.length) break;\n\t\t\tret.push(...ps);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] - inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst ps: Vertex[] = f.getGridPoints(s[0], s[1], resolution);\n\t\t\tif (!ps.length) break;\n\t\t\tret.push(...ps);\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n", "export const CC_TABLE = {\n\t 2: '...................5.................557................557...............55777.............55.777............55577777...........55577777..........5557777777........55511..6767.......333.116666666......3331.666666.......3333116666........33331116...........33333.............3333..............33...................................................................................',\n\t 5: '5..................55................557...............55777..............55777.............5577777...........555777777.........5557777777.........55a77777777.......555aa77777727.....555aaa66666666....3353aa666666666...33333a6666666......33333366666.......333333366.........33333333..........333333.............3333..............33................3..............................',\n\t10: '5..................57................557...............55777..............557777............5577777...........555777777.........55577777788.......555aa777..88.......555aa77...222.....555aa.68668.222...5333aa666666999...33333a66666699....3333333666666......3333333666........333333336.........3333333...........333333.............333...............33................3............',\n\t20: '.......................................77..............55777..............557777............557777............557777788.........55577778888.......555577.88888.......555.78888888......555aa.8888882.....5533.a888999999...33333366999999....3333333669999......33333334.99.......333333344.........33333333..........333333............33333..............33................3............',\n\t30: '..........................................................................5.77..............55777.............55777.............55577.8...........55557788...........55557888..........555508888.........3535348888........33333449999.......333333449999.......33333344449.......333333444.........33333334..........333333............33333..............333...............3............',\n\t40: '..............................................................................................77..............55577.............55577.............555578.............5550.8............5555088...........5333008...........35333449..........333333444..........333334444.........333333444.........33333344..........3333333...........33333..............333...............3............'\n};\n", "/**\n * Color-related math.\n *\n * @author Takuto Yanagida\n * @version 2024-08-19\n */\n\n/**\n * Conversion factor from degrees to radians.\n */\nexport const DEG_RAD: number = Math.PI / 180;\n\n/**\n * Conversion factor from radians to degrees.\n */\nexport const RAD_DEG: number = 180 / Math.PI;\n\n/**\n * Twice PI.\n */\nexport const PI2: number = Math.PI * 2;\n\n/**\n * Calculates the angle in radians from the given two numbers `as` and `bs`.\n * This function uses the standard `atan2` function and adds 2\u03C0 if `bs` is negative.\n * @param {number} as The number to be used as the x-coordinate.\n * @param {number} bs The number to be used as the y-coordinate.\n * @returns {number} The calculated angle in radians.\n */\nexport function atan2rad(bs: number, as: number): number {\n\treturn Math.atan2(bs, as) + (bs < 0 ? PI2 : 0);\n}\n\n/**\n * Calculates the magnitude (length) of the vector from the origin to the point (a, b).\n * @param {number} a The x-coordinate of the point.\n * @param {number} b The y-coordinate of the point.\n * @returns {number} The Euclidean distance from the origin to (a, b).\n */\nexport function mag(a: number, b: number): number {\n\treturn Math.sqrt(a * a + b * b);\n}\n", "/**\n * Determination of the basic categorical color.\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from './../type';\nimport { CC_TABLE } from './../table/cc-min';\nimport { mag } from '../math';\n\n/**\n * Basic Categorical Colors\n */\nexport const CATEGORICAL_COLORS: string[] = [\n\t'white', 'black', 'red', 'green',\n\t'yellow', 'blue', 'brown', 'purple',\n\t'pink', 'orange', 'gray',\n];\n\nconst Y_TO_LUM = 60;\n\nconst LUM_TABLE: number[] = [2, 5, 10, 20, 30, 40];\n\n/**\n * Find the basic categorical color of the specified color.\n * @param {Triplet} xyy xyY color\n * @return {string} Basic categorical color\n */\nexport function categoryOfXyy([sx, sy, y]: Triplet): string {\n\tconst lum: number = Math.pow(y * Y_TO_LUM, 0.9);  // magic number\n\n\tlet diff: number = Number.MAX_VALUE;\n\tlet clu: number = 0;\n\tfor (let l of LUM_TABLE) {\n\t\tconst d: number = Math.abs(lum - l);\n\t\tif (d < diff) {\n\t\t\tdiff = d;\n\t\t\tclu = l;\n\t\t}\n\t}\n\tconst t: string = CC_TABLE[clu as 2 | 5 | 10 | 20 | 30 | 40] as string;\n\tsx *= 1000;\n\tsy *= 1000;\n\tlet dis: number = Number.MAX_VALUE;\n\tlet cc: number | string = 1;\n\tfor (let i: number = 0; i < 18 * 21; i += 1) {\n\t\tif (t[i] === '.') continue;\n\t\tconst x: number = (i % 18) * 25 + 150;\n\t\tconst y: number = ((i / 18) | 0) * 25 + 75;\n\t\tconst d: number = mag(sx - x, sy - y);\n\t\tif (d < dis) {\n\t\t\tdis = d;\n\t\t\tcc = t[i];\n\t\t}\n\t}\n\tconst ci: number = (cc === 'a') ? 10 : parseInt(cc as string);\n\treturn CATEGORICAL_COLORS[ci];\n}\n", "/**\n * Calculation of the conspicuity degree.\n * Reference: Effective use of color conspicuity for Re-Coloring system,\n * Correspondences on Human interface Vol. 12, No. 1, SIG-DE-01, 2010.\n *\n * @author Takuto Yanagida\n * @version 2024-08-18\n */\n\nimport { Triplet } from './../type';\nimport { RAD_DEG, atan2rad } from './../math';\n\n/**\n * Calculate the conspicuity degree.\n * @param {Triplet} lab L*, a*, b* of CIELAB color\n * @return {number} Conspicuity degree [0, 180]\n * TODO Consider chroma (ab radius of LAB)\n */\nexport function conspicuityOfLab([, as, bs]: Triplet): number {\n\tconst rad = atan2rad(bs, as);\n\tconst h = rad * RAD_DEG;\n\tconst a = 35;  // Constant\n\tif (h < a) return Math.abs(180 - (360 + h - a));\n\telse return Math.abs(180 - (h - a));\n}\n", "/**\n * Calculation of the color difference.\n *\n * @author Takuto Yanagida\n * @version 2024-11-09\n */\n\nimport { Triplet } from '../type';\nimport { DEG_RAD, RAD_DEG, atan2rad, mag } from '../math';\n\n/**\n * They are sensual expressions of color difference by NBS unit.\n * The values represent the lower limit of each range.\n */\nexport enum NBS {\n\tTrace       = 0.0,\n\tSlight      = 0.5,\n\tNoticeable  = 1.5,\n\tAppreciable = 3.0,\n\tMuch        = 6.0,\n\tVeryMuch    = 12.0,\n};\n\n/**\n * Dental Materials J. 27(1), 139-144 (2008)\n */\nexport const DE_TO_NBS = 0.92;\n\n/**\n * Calculate distance of two vectors\n * @param {Triplet} vs1 vector 1\n * @param {Triplet} vs2 vector 2\n * @return {number} Distance\n */\nexport function distance([v11, v12, v13]: Triplet, [v21, v22, v23]: Triplet): number {\n\treturn Math.sqrt((v11 - v21) * (v11 - v21) + (v12 - v22) * (v12 - v22) + (v13 - v23) * (v13 - v23));\n}\n\n/**\n * Color difference calculation method by CIE 76\n * @param {Triplet} lab1 L*, a*, b* of CIELAB color 1\n * @param {Triplet} lab2 L*, a*, b* of CIELAB color 2\n * @return {number} Color difference\n */\nexport function CIE76([ls1, as1, bs1]: Triplet, [ls2, as2, bs2]: Triplet): number {\n\treturn Math.sqrt((ls1 - ls2) * (ls1 - ls2) + (as1 - as2) * (as1 - as2) + (bs1 - bs2) * (bs1 - bs2));\n}\n\n/**\n * Color difference calculation method by CIEDE2000\n * Reference: http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf\n * http://d.hatena.ne.jp/yoneh/20071227/1198758604\n * @param {Triplet} lab1 L*, a*, b* of CIELAB color 1\n * @param {Triplet} lab2 L*, a*, b* of CIELAB color 2\n * @return {number} Color difference\n */\nexport function CIEDE2000([ls1, as1, bs1]: Triplet, [ls2, as2, bs2]: Triplet): number {\n\tconst C1 = mag(as1, bs1), C2 = mag(as2, bs2);\n\tconst Cb = (C1 + C2) / 2;\n\tconst G = 0.5 * (1 - Math.sqrt(Math.pow(Cb, 7) / (Math.pow(Cb, 7) + Math.pow(25, 7))));\n\tconst ap1 = (1 + G) * as1, ap2 = (1 + G) * as2;\n\tconst Cp1 = mag(ap1, bs1), Cp2 = mag(ap2, bs2);\n\tconst hp1 = (bs1 === 0 && ap1 === 0) ? 0 : atan(bs1, ap1), hp2 = (bs2 === 0 && ap2 === 0) ? 0 : atan(bs2, ap2);\n\n\tconst DLp = ls2 - ls1;\n\tconst DCp = Cp2 - Cp1;\n\tlet Dhp = 0;\n\tif (Cp1 * Cp2 < 1e-10) {\n\t\tDhp = 0;\n\t} else if (Math.abs(hp2 - hp1) <= 180) {\n\t\tDhp = hp2 - hp1;\n\t} else if (hp2 - hp1 > 180) {\n\t\tDhp = (hp2 - hp1) - 360;\n\t} else if (hp2 - hp1 < -180) {\n\t\tDhp = (hp2 - hp1) + 360;\n\t}\n\tconst DHp = 2 * Math.sqrt(Cp1 * Cp2) * sin(Dhp / 2);\n\n\tconst Lbp = (ls1 + ls2) / 2;\n\tconst Cbp = (Cp1 + Cp2) / 2;\n\tlet hbp = 0;\n\tif (Cp1 * Cp2 < 1e-10) {\n\t\thbp = hp1 + hp2;\n\t} else if (Math.abs(hp2 - hp1) <= 180) {\n\t\thbp = (hp1 + hp2) / 2;\n\t} else if (Math.abs(hp2 - hp1) > 180 && hp1 + hp2 < 360) {\n\t\thbp = (hp1 + hp2 + 360) / 2;\n\t} else if (Math.abs(hp2 - hp1) > 180 && hp1 + hp2 >= 360) {\n\t\thbp = (hp1 + hp2 - 360) / 2;\n\t}\n\tconst T = 1 - 0.17 * cos(hbp - 30) + 0.24 * cos(2 * hbp) + 0.32 * cos(3 * hbp + 6) - 0.2 * cos(4 * hbp - 63);\n\tconst Dth = 30 * Math.exp(-sq((hbp - 275) / 25));\n\tconst RC = 2 * Math.sqrt(Math.pow(Cbp, 7) / (Math.pow(Cbp, 7) + Math.pow(25, 7)));\n\tconst SL = 1 + 0.015 * sq(Lbp - 50) / Math.sqrt(20 + sq(Lbp - 50));\n\tconst SC = 1 + 0.045 * Cbp;\n\tconst SH = 1 + 0.015 * Cbp * T;\n\tconst RT = -sin(2 * Dth) * RC;\n\n\tconst kL = 1, kC = 1, kH = 1;\n\tconst DE = Math.sqrt(sq(DLp / (kL * SL)) + sq(DCp / (kC * SC)) + sq(DHp / (kH * SH)) + RT * (DCp / (kC * SC)) * (DHp / (kH * SH)));\n\treturn DE;\n}\n\nfunction sq(v: number) { return v * v; }\nfunction atan(y: number, x: number) { return atan2rad(y, x) * RAD_DEG; }\nfunction sin(deg: number) { return Math.sin(deg * DEG_RAD); }\nfunction cos(deg: number) { return Math.cos(deg * DEG_RAD); }\n", "/**\n * This class converts the LMS color system.\n *\n * @author Takuto Yanagida\n * @version 2024-11-10\n */\n\nimport { Triplet } from '../type';\n\n/*\n * Reference: F. Vienot, H. Brettel, and J.D. Mollon,\n * Digital video colourmaps for checking the legibility of displays by dichromats,\n * COLOR research and application, vol.24, no.4, pp.243-252, Aug. 1999.\n */\nexport const SMITH_POKORNY: Triplet[] = [\n\t[ 0.15514, 0.54312, -0.03286],\n\t[-0.15514, 0.45684,  0.03286],\n\t[ 0.0,     0.0,      0.01608]\n];\n\nexport const SMITH_POKORNY_INV: Triplet[] = [\n\t[2.944812906606763, -3.500977991936487, 13.17218214714747],\n\t[1.000040001600064,  1.000040001600064,  0.0             ],\n\t[0.0,                0.0,               62.18905472636816]\n];\n\nexport const BRADFORD: Triplet[] = [\n\t[ 0.8951000,  0.2664000, -0.1614000],\n\t[-0.7502000,  1.7135000,  0.0367000],\n\t[ 0.0389000, -0.0685000,  1.0296000]\n];\n\nexport const BRADFORD_INV: Triplet[] = [\n\t[ 0.9869929, -0.1470543,  0.1599627],\n\t[ 0.4323053,  0.5183603,  0.0492912],\n\t[-0.0085287,  0.0400428,  0.9684867]\n];\n\nexport const VON_KRIES: Triplet[] = [\n\t[ 0.4002400, 0.7076000, -0.0808100],\n\t[-0.2263000, 1.1653200,  0.0457000],\n\t[ 0.0000000, 0.0000000,  0.9182200]\n];\n\nexport const VON_KRIES_INV: Triplet[] = [\n\t[1.8599364, -1.1293816,  0.2198974],\n\t[0.3611914,  0.6388125, -0.0000064],\n\t[0.0000000,  0.0000000,  1.0890636]\n];\n\nexport const ConversionMethod = Object.freeze({\n\tSMITH_POKORNY: { direct: SMITH_POKORNY, inverse: SMITH_POKORNY_INV },\n\tBRADFORD: { direct: BRADFORD, inverse: BRADFORD_INV },\n\tVON_KRIES: { direct: VON_KRIES, inverse: VON_KRIES_INV },\n});\n\nexport function setConversionMethod(cm: { direct: Triplet[]; inverse: Triplet[] }) {\n\tconversionMethod = cm;\n}\n\nlet conversionMethod: { direct: Triplet[], inverse: Triplet[] } = ConversionMethod.SMITH_POKORNY;\n\n\n// XYZ -------------------------------------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ to LMS.\n * @param {Triplet} xyz XYZ color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color.\n */\nexport function fromXyz([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst cm: Triplet[] = conversionMethod.direct;\n\tdest[0] = cm[0][0] * x + cm[0][1] * y + cm[0][2] * z;\n\tdest[1] = cm[1][0] * x + cm[1][1] * y + cm[1][2] * z;\n\tdest[2] = cm[2][0] * x + cm[2][1] * y + cm[2][2] * z;\n\treturn dest;\n}\n\n/**\n * Convert LMS to CIE 1931 XYZ.\n * @param {Triplet} lms LMS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ color.\n */\nexport function toXyz([l, m, s]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst cm: Triplet[] = conversionMethod.inverse;\n\tdest[0] = cm[0][0] * l + cm[0][1] * m + cm[0][2] * s;\n\tdest[1] = cm[1][0] * l + cm[1][1] * m + cm[1][2] * s;\n\tdest[2] = cm[2][0] * l + cm[2][1] * m + cm[2][2] * s;\n\treturn dest;\n}\n", "/**\n * This class converts the HSL color system.\n *\n * @author Takuto Yanagida\n * @version 2024-11-10\n */\n\nimport { Triplet } from '../type';\n\n\n// RGB -------------------------------------------------------------------------\n\n\n/**\n * Convert RGB to HSL.\n * @param {Triplet} rgb RGB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} HSL color.\n */\nexport function fromRgb([r, g, b]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tr = r / 255;\n\tg = g / 255;\n\tb = b / 255;\n\n\tconst v: number = Math.max(r, g, b);\n\tconst c: number = v - Math.min(r, g, b);\n\tconst l: number = v - c / 2;\n\n\tlet s: number = 0;\n\tif (l !== 0 && l !== 1) {\n\t\ts = (v - l) / Math.min(l, 1 - l);\n\t}\n\n\tlet h: number = 0;\n\tif (c !== 0) {\n\t\tif (v === r) h = 60 * ((g - b) / c % 6);\n\t\tif (v === g) h = 60 * ((b - r) / c + 2);\n\t\tif (v === b) h = 60 * ((r - g) / c + 4);\n\t}\n\th = (h + 360) % 360;\n\n\tdest[0] = h;\n\tdest[1] = s * 100;\n\tdest[2] = l * 100;\n\treturn dest;\n}\n\n/**\n * Convert HSL to RGB.\n * @param {Triplet} hsl HSL color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} RGB color.\n */\nexport function toRgb([h, s, l]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\ts = s / 100;\n\tl = l / 100;\n\tconst c: number = (1 - Math.abs(2 * l - 1)) * s;\n\n\tconst hp: number = h / 60;\n\tconst x: number = c * (1 - Math.abs(hp % 2 - 1));\n\n\tlet r: number = 0, g: number = 0, b: number = 0;\n\tif (0 <= hp && hp < 1) { r = c, g = x; }\n\tif (1 <= hp && hp < 2) { r = x, g = c; }\n\tif (2 <= hp && hp < 3) { g = c, b = x; }\n\tif (3 <= hp && hp < 4) { g = x, b = c; }\n\tif (4 <= hp && hp < 5) { r = x, b = c; }\n\tif (5 <= hp && hp < 6) { r = c, b = x; }\n\n\tconst m: number = l - c / 2;\n\tdest[0] = Math.round((r + m) * 255);\n\tdest[1] = Math.round((g + m) * 255);\n\tdest[2] = Math.round((b + m) * 255);\n\treturn dest;\n}\n", "/**\n * This class converts the sRGB color system.\n * Reference: http://www.w3.org/Graphics/Color/sRGB.html\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\n\nexport { toRgb as fromHsl, fromRgb as toHsl } from './hsl';\n\nexport const MIN: number = 0;\nexport const MAX: number = 255;\nexport const INV_MAX: number = 1 / MAX;\n\nexport let isSaturated: boolean = false;\n\nfunction checkRange(vs: Triplet, min: number, max: number): boolean {\n\tlet isSaturated: boolean = false;\n\tfor (let i: number = 0; i < 3; ++i) {\n\t\tif (vs[i] > max) { vs[i] = max; isSaturated = true; }\n\t\telse if (vs[i] < min) { vs[i] = min; isSaturated = true; }\n\t}\n\treturn isSaturated;\n}\n\n// Convert sRGB to Linear RGB (gamma correction).\nfunction fn(v: number): number {\n\treturn (v < 0.03928) ? (v / 12.92) : Math.pow((v + 0.055) / 1.055, 2.4);\n}\n\n// Convert Linear RGB to sRGB (inverse gamma correction).\nfunction ifn(v: number): number {\n\treturn (v > 0.00304) ? (Math.pow(v, 1 / 2.4) * 1.055 - 0.055) : (v * 12.92);\n}\n\n\n// LRGB ------------------------------------------------------------------------\n\n\n/**\n * Convert Linear RGB to sRGB (Gamma 2.2).\n * @param {Triplet} lrgb Linear RGB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} sRGB color.\n */\nexport function fromLrgb([lr, lg, lb]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = ifn(lr) * MAX | 0;\n\tdest[1] = ifn(lg) * MAX | 0;\n\tdest[2] = ifn(lb) * MAX | 0;\n\tisSaturated = checkRange(dest, MIN, MAX);\n\treturn dest;\n}\n\n/**\n * Convert sRGB (Gamma 2.2) to Linear RGB.\n * @param {Triplet} rgb sRGB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Linear RGB color.\n */\nexport function toLrgb([r, g, b]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = fn(r * INV_MAX);\n\tdest[1] = fn(g * INV_MAX);\n\tdest[2] = fn(b * INV_MAX);\n\treturn dest;\n}\n", "/**\n * This class converts the YIQ color system.\n * Reference: http://en.wikipedia.org/wiki/YIQ\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\n\n\n// LRGB ------------------------------------------------------------------------\n\n\n/**\n * Convert Linear RGB to YIQ.\n * @param {Triplet} lrgb Linear RGB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} YIQ color.\n */\nexport function fromLrgb([lr, lg, lb]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = 0.2990   * lr +  0.5870   * lg +  0.1140   * lb;  // Y[0, 1]\n\tdest[1] = 0.595716 * lr + -0.274453 * lg + -0.321263 * lb;  // I[-0.5957, 0.5957]\n\tdest[2] = 0.211456 * lr + -0.522591 * lg +  0.311135 * lb;  // Q[-0.5226, 0.5226]\n\treturn dest;\n}\n\n/**\n * Convert YIQ to Linear RGB.\n * @param {Triplet} yiq YIQ color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Linear RGB color.\n */\nexport function toLrgb([y, i, q]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = y +  0.9563 * i +  0.6210 * q;  // R[0, 1]\n\tdest[1] = y + -0.2721 * i + -0.6474 * q;  // G[0, 1]\n\tdest[2] = y + -1.1070 * i +  1.7046 * q;  // B[0, 1]\n\treturn dest;\n}\n", "/**\n * This class converts the Linear RGB color system.\n * It is targeted for Linear RGB which converted sRGB (D65).\n * Reference: http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\n\nexport { toLrgb as fromRgb, fromLrgb as toRgb } from './rgb';\nexport { toLrgb as fromYiq, fromLrgb as toYiq } from './yiq';\n\n\n// XYZ -------------------------------------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ to Linear RGB.\n * @param {Triplet} xyz XYZ color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Linear RGB color.\n */\nexport function fromXyz([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] =  3.2404542 * x + -1.5371385 * y + -0.4985314 * z;\n\tdest[1] = -0.9692660 * x +  1.8760108 * y +  0.0415560 * z;\n\tdest[2] =  0.0556434 * x + -0.2040259 * y +  1.0572252 * z;\n\treturn dest;\n}\n\n/**\n * Convert Linear RGB to CIE 1931 XYZ.\n * @param {Triplet} lrgb Linear RGB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ color.\n */\nexport function toXyz([lr, lg, lb]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = 0.4124564 * lr + 0.3575761 * lg + 0.1804375 * lb;\n\tdest[1] = 0.2126729 * lr + 0.7151522 * lg + 0.0721750 * lb;\n\tdest[2] = 0.0193339 * lr + 0.1191920 * lg + 0.9503041 * lb;\n\treturn dest;\n}\n", "/**\n * Color-related constants.\n *\n * @author Takuto Yanagida\n * @version 2024-08-19\n */\n\nimport { Triplet } from './type';\n\n/**\n * D50 tristimulus value\n * Reference: http://www.babelcolor.com/download/A%20review%20of%20RGB%20color%20spaces.pdf\n */\nexport const D50_xyz: Triplet = [0.34567, 0.35850, 0.29583];\nexport const D50_XYZ: Triplet = [D50_xyz[0] / D50_xyz[1], 1, D50_xyz[2] / D50_xyz[1]];\n\n/**\n * D65 tristimulus value\n * Reference: http://www.babelcolor.com/download/A%20review%20of%20RGB%20color%20spaces.pdf\n */\nexport const D65_xyz: Triplet = [0.31273, 0.32902, 0.35825];\nexport const D65_XYZ: Triplet = [D65_xyz[0] / D65_xyz[1], 1, D65_xyz[2] / D65_xyz[1]];\n", "/**\n * This class converts the xyY color system.\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\nimport { D65_xyz, D65_XYZ } from '../const';\n\nexport let isSaturated: boolean = false;\n\n\n// XYZ -------------------------------------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ to xyY.\n * @param {Triplet} xyz XYZ color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} xyY color.\n */\nexport function fromXyz([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[2] = y;\n\tconst sum: number = x + y + z;\n\tif (sum === 0) {\n\t\tdest[0] = D65_xyz[0];\n\t\tdest[1] = D65_xyz[1];\n\t} else {\n\t\tdest[0] = x / sum;\n\t\tdest[1] = y / sum;\n\t}\n\treturn dest;\n}\n\n/**\n * Convert xyY to CIE 1931 XYZ.\n * @param {Triplet} xyy xyY color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ color.\n */\nexport function toXyz([sx, sy, y]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst d0: number = sx * y / sy;\n\tif (!Number.isFinite(d0)) {\n\t\tisSaturated = false;\n\t\tdest[0] = 0;\n\t\tdest[1] = 0;\n\t\tdest[2] = 0;\n\t} else {\n\t\tconst d1: number = y;\n\t\tconst d2: number = (1 - sx - sy) * y / sy;\n\t\tisSaturated = (D65_XYZ[0] < d0 || D65_XYZ[1] < d1 || D65_XYZ[2] < d2);\n\t\tdest[0] = d0;\n\t\tdest[1] = d1;\n\t\tdest[2] = d2;\n\t}\n\treturn dest;\n}\n", "/**\n * This class converts the LCh color system.\n *\n * @author Takuto Yanagida\n * @version 2024-11-10\n */\n\nimport { Triplet } from '../type';\nimport { DEG_RAD, RAD_DEG, atan2rad, mag } from '../math';\n\n\n// Lab -------------------------------------------------------------------------\n\n\n/**\n * Convert CIELAB (L*a*b*) to LCh.\n * @param {Triplet} lab L*, a*, b* of CIELAB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LCh color.\n */\nexport function fromLab([ls, as, bs]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst rad: number = atan2rad(bs, as);\n\tdest[0] = ls;\n\tdest[1] = mag(as, bs);\n\tdest[2] = rad * RAD_DEG;\n\treturn dest;\n}\n\n/**\n * Convert LCh to CIELAB (L*a*b*).\n * @param {Triplet} lch LCh color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} L*, a*, b* of CIELAB color.\n */\nexport function toLab([ls, cs, h]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst rad: number = h * DEG_RAD;\n\tdest[0] = ls;\n\tdest[1] = Math.cos(rad) * cs;\n\tdest[2] = Math.sin(rad) * cs;\n\treturn dest;\n}\n", "/**\n * This class converts the CIELAB (L*a*b*) color system.\n * By default, D65 is used as tristimulus value.\n * Reference: http://en.wikipedia.org/wiki/Lab_color_space\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\nimport { D65_XYZ } from '../const';\n\nexport { toLab as fromLch, fromLab as toLch } from './lch';\n\n// Constants for simplification of calculation\nconst C1: number = Math.pow(6, 3) / Math.pow(29, 3);      // (6/29)^3 = 0.0088564516790356308171716757554635\nconst C2: number = 3 * Math.pow(6, 2) / Math.pow(29, 2);  // 3*(6/29)^2 = 0.12841854934601664684898929845422\nconst C3: number = 6 / 29;                                // 6/29 = 0.20689655172413793103448275862069\n\n/**\n * XYZ tristimulus value\n */\nconst XYZ_TRISTIMULUS_VALUES: Triplet = D65_XYZ;\n\n// Conversion function\nfunction fn(v: number): number {\n\treturn (v > C1) ? Math.pow(v, 1 / 3) : (v / C2 + 4 / 29);\n}\n\n// Inverse conversion function\nfunction ifn(v: number): number {\n\treturn (v > C3) ? Math.pow(v, 3) : ((v - 4 / 29) * C2);\n}\n\n\n// XYZ -------------------------------------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ to CIE 1976 (L*, a*, b*).\n * @param {Triplet} xyz XYZ color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} CIELAB color.\n */\nexport function fromXyz([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst fx: number = fn(x / XYZ_TRISTIMULUS_VALUES[0]);\n\tconst fy: number = fn(y / XYZ_TRISTIMULUS_VALUES[1]);\n\tconst fz: number = fn(z / XYZ_TRISTIMULUS_VALUES[2]);\n\tdest[0] = 116 * fy - 16;\n\tdest[1] = 500 * (fx - fy);\n\tdest[2] = 200 * (fy - fz);\n\treturn dest;\n}\n\n/**\n * Convert CIE 1976 (L*, a*, b*) to CIE 1931 XYZ.\n * @param {Triplet} lab L*, a*, b* of CIELAB color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ color.\n */\nexport function toXyz([ls, as, bs]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst fy: number = (ls + 16) / 116;\n\tconst fx: number = fy + as / 500;\n\tconst fz: number = fy - bs / 200;\n\tdest[0] = ifn(fx) * XYZ_TRISTIMULUS_VALUES[0];\n\tdest[1] = ifn(fy) * XYZ_TRISTIMULUS_VALUES[1];\n\tdest[2] = ifn(fz) * XYZ_TRISTIMULUS_VALUES[2];\n\treturn dest;\n}\n\n/**\n * Convert CIE 1931 XYZ to L* of CIE 1976 (L*, a*, b*).\n * @param {Triplet} xyz XYZ color.\n * @return {number} L*\n */\nexport function lightnessFromXyz([, y,]: Triplet): number {\n\tconst fy: number = fn(y / XYZ_TRISTIMULUS_VALUES[1]);\n\treturn 116 * fy - 16;\n}\n", "export const TBL_V = [0.2, 0.4, 0.6, 0.8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nexport const TBL_SRC_MIN = [\n\t[\n\t\t[0,404,164,-384,-203,-9,17],\n\t\t[1,451,183,-414,-224,-15,18],\n\t\t[2,501,204,-446,-249],\n\t\t[3,543,224,-460,-270],\n\t\t[4,592,246,-488,-294],\n\t\t[5,679,290,-515,-335],\n\t\t[6,837,375,-500,-395],\n\t\t[7,1000,480],\n\t\t[8,1290,740],\n\t\t[9,1430,970],\n\t\t[10,1495,1284],\n\t\t[11,1434,1459],\n\t\t[13,713,1414],\n\t\t[14,449,1145],\n\t\t[15,262,837,-602,486],\n\t\t[16,185,676,-627,-119],\n\t\t[17,144,584,-523,-277],\n\t\t[18,117,516,-443,-313],\n\t\t[19,97,458,-375,-341],\n\t\t[20,80,397,-297,-369],\n\t\t[21,68,332,-236,-339],\n\t\t[22,66,261,-180,-299],\n\t\t[23,72,226,-160,-271],\n\t\t[24,85,195,-155,-242],\n\t\t[25,97,177,-155,-226],\n\t\t[26,111,164,-159,-214],\n\t\t[27,121,157,-168,-205],\n\t\t[28,133,149,-178,-196,20,19],\n\t\t[29,147,143,-185,-192,16,22],\n\t\t[30,165,136,-197,-182,14,18,7,11,3,4,-2,-1],\n\t\t[31,192,130,-213,-173,9,17,5,10,3,5,1,2,0,2,0,1,1,0,1,0],\n\t\t[32,227,126,-241,-164,7,14,3,9,2,6,0,0,0,2,1,1,-1,0,1,0],\n\t\t[33,250,127,-259,-164,4,14,1,8,3,6,-1,1,1,1,0,1,0,0],\n\t\t[34,275,129,-281,-165,3,15,1,5,1,7,1,1,-1,1],\n\t\t[35,288,131,-293,-168,2,17,0,4,2,7,0,0],\n\t\t[36,300,134,-304,-171,1,15,1,7,1,6],\n\t\t[37,315,137,-317,-174,1,15,-1,8,2,3],\n\t\t[38,337,143,-333,-180,-3,15,-1,7],\n\t\t[39,370,152,-359,-189,-4,15,-2,6]\n\t],\n\t[\n\t\t[0,381,220,-356,-259,-8,11,-3,3,3,-5],\n\t\t[1,411,236,-372,-274,-12,10,-3,1,4,-3],\n\t\t[2,441,255,-384,-291,-18,7,-1,0],\n\t\t[3,466,272,-393,-306,-24,4,-2,-2],\n\t\t[4,490,289,-398,-320,-25,2,-10,-4],\n\t\t[5,534,324,-403,-350,-41,-2,-1,-1],\n\t\t[6,585,367,-395,-372,-76,-13],\n\t\t[7,638,420,-368,-388],\n\t\t[8,698,499],\n\t\t[9,729,588],\n\t\t[10,721,656],\n\t\t[11,659,700],\n\t\t[12,542,670],\n\t\t[13,423,590,-111,640],\n\t\t[14,358,528,-393,411],\n\t\t[15,312,482,-496,177],\n\t\t[16,277,445,-513,16],\n\t\t[17,258,423,-511,-103],\n\t\t[18,239,399,-489,-194],\n\t\t[19,226,380,-463,-259],\n\t\t[20,213,361,-430,-317],\n\t\t[21,196,332,-384,-330],\n\t\t[22,180,298,-329,-337],\n\t\t[23,173,275,-295,-330,66,28],\n\t\t[24,169,249,-264,-311,53,24],\n\t\t[25,169,236,-251,-300,43,26],\n\t\t[26,172,223,-242,-287,35,24],\n\t\t[27,176,213,-239,-275,31,22],\n\t\t[28,183,203,-240,-261,24,18,7,2],\n\t\t[29,190,196,-239,-253,21,16,8,8],\n\t\t[30,202,188,-243,-242,15,15,7,10,10,16,1,2,5,5,1,0,-1,1,-2,-2],\n\t\t[31,220,180,-248,-230,11,15,7,12,5,9,0,2,2,6,1,-2,-1,2,1,0,0,2,0,-2,0,1,0,1],\n\t\t[32,241,176,-259,-221,7,14,5,9,2,6,1,4,1,5,0,0,0,0,1,2,0,-1,0,1,-1,0,1,1],\n\t\t[33,259,177,-272,-220,5,13,3,8,2,4,0,8,2,1,-1,2,1,0,0,2,-1,-1,1,2,0,-2],\n\t\t[34,281,182,-290,-226,2,16,2,5,2,5,-1,6,3,3,-1,1,0,2,1,0],\n\t\t[35,296,185,-303,-228,2,15,1,5,0,4,1,6,2,3,-1,3,1,-1],\n\t\t[36,309,189,-314,-232,3,16,-2,3,2,2,0,10,1,3,-1,0],\n\t\t[37,320,193,-320,-235,0,14,0,5,0,1,0,9,0,2],\n\t\t[38,337,199,-330,-240,-3,14,-2,2,1,1,-3,12],\n\t\t[39,360,209,-346,-249,-4,12,-3,4,0,-3]\n\t],\n\t[\n\t\t[0,372,247,-345,-283,-7,7,-5,5,-2,1,-1,2],\n\t\t[1,391,260,-350,-293,-9,6,-7,3,-3,2,4,-6],\n\t\t[2,411,274,-353,-302,-13,3,-8,1,-2,3],\n\t\t[3,431,290,-360,-316,-15,2,-10,-2,-10,4],\n\t\t[4,447,305,-357,-326,-22,-2,-13,-3,-11,5],\n\t\t[5,474,332,-345,-342,-39,-9,4,-2,-35,5],\n\t\t[6,505,367,-337,-363,-36,-13,-7,-6],\n\t\t[7,526,397,-288,-353],\n\t\t[8,551,444,-203,-301],\n\t\t[9,563,491,-131,-248],\n\t\t[10,548,526],\n\t\t[11,502,531,40,12],\n\t\t[12,432,501,38,221],\n\t\t[13,377,468,-151,233],\n\t\t[14,342,442,-274,111],\n\t\t[15,315,420,-356,-48,-278,295],\n\t\t[16,292,399,-376,-146,-252,220],\n\t\t[17,281,388,-387,-215,-212,155],\n\t\t[18,270,376,-388,-259,-162,72],\n\t\t[19,259,363,-381,-286,-117,24],\n\t\t[20,247,349,-370,-309,-69,-4],\n\t\t[21,236,334,-355,-327,-34,-14],\n\t\t[22,221,311,-330,-338,6,-14],\n\t\t[23,213,295,-313,-336,17,-2],\n\t\t[24,206,276,-296,-331,26,10],\n\t\t[25,202,260,-281,-318,27,13,-2,-1],\n\t\t[26,202,245,-270,-303,22,16,2,-3],\n\t\t[27,204,235,-265,-292,17,15,5,2],\n\t\t[28,209,227,-265,-282,18,11,7,7],\n\t\t[29,215,221,-264,-277,14,13,10,11,8,10,7,9],\n\t\t[30,223,215,-264,-270,11,13,9,12,8,11,5,7,2,3,1,1,-1,0,1,0,1,2],\n\t\t[31,239,208,-270,-261,11,15,8,13,4,7,3,6,1,3,1,1,0,0,0,1,1,2,0,0,0,-1,0,0,0,2],\n\t\t[32,257,204,-277,-251,8,14,3,7,4,10,2,4,-1,0,2,4,0,0,0,1,0,1,1,1,0,-1,-1,0,0,0],\n\t\t[33,272,205,-286,-250,6,14,2,6,2,9,2,3,-1,-2,1,8,1,-2,-1,3,1,0,0,1,0,-1,0,-1],\n\t\t[34,287,207,-294,-248,1,11,2,4,2,10,0,2,0,-1,1,6,0,-1,0,5,0,-2,1,3],\n\t\t[35,301,211,-306,-252,1,12,0,3,0,9,1,2,1,-1,0,5,1,4,0,0],\n\t\t[36,311,214,-314,-254,1,11,0,3,0,8,1,4,-1,-4,1,9,0,0],\n\t\t[37,322,218,-320,-257,-1,11,0,2,-1,7,0,5,0,-5,-1,8],\n\t\t[38,337,226,-327,-263,-3,7,-2,6,-1,3,-1,6,1,-4,-1,7],\n\t\t[39,355,236,-337,-272,-4,6,-4,6,-1,2,-2,4,1,-1]\n\t],\n\t[\n\t\t[0,365,261,-337,-292,-6,4,-2,1,-8,9,0,0,-1,1],\n\t\t[1,381,272,-341,-299,-6,1,-6,2,-9,6,0,0,-4,2],\n\t\t[2,399,286,-348,-311,-5,1,-6,1,-11,6,-3,0],\n\t\t[3,411,297,-345,-318,-9,0,-7,0,-10,3,-4,1],\n\t\t[4,423,309,-338,-322,-15,-3,-13,-5,-7,2,-10,-3],\n\t\t[5,445,333,-332,-336,-34,-7,-1,-4,9,-4,-14,3],\n\t\t[6,463,361,-314,-346,-40,-15,-4,-4],\n\t\t[7,475,386,-287,-342,-34,-24],\n\t\t[8,481,411,-213,-288],\n\t\t[9,479,439,-138,-238],\n\t\t[10,465,457,-39,-124],\n\t\t[11,434,460,12,16],\n\t\t[12,397,448,-33,102],\n\t\t[13,363,425,-170,57],\n\t\t[14,336,410,-272,-82,-39,200],\n\t\t[15,314,394,-323,-175,-59,137,-288,307],\n\t\t[16,298,381,-342,-225,-60,98,-202,175],\n\t\t[17,287,371,-349,-254,-61,55,-192,135],\n\t\t[18,280,363,-355,-279,-48,22,-144,78],\n\t\t[19,272,355,-353,-296,-37,3,-98,23],\n\t\t[20,265,346,-352,-310,-21,-10,-62,-6],\n\t\t[21,253,332,-343,-322,-3,-11,-39,-10],\n\t\t[22,241,315,-332,-331,13,-8,-12,-12],\n\t\t[23,230,296,-315,-328,17,1,-1,-4],\n\t\t[24,223,280,-300,-323,17,5,7,3],\n\t\t[25,220,271,-291,-320,16,8,9,7],\n\t\t[26,218,258,-282,-309,16,7,11,8],\n\t\t[27,220,249,-280,-302,15,10,12,10,0,2],\n\t\t[28,222,241,-276,-295,14,12,9,9,5,4],\n\t\t[29,225,234,-272,-287,11,10,11,10,6,9,3,1],\n\t\t[30,234,226,-276,-278,10,10,11,12,5,11,2,-4,4,8,3,4,2,3,-1,0],\n\t\t[31,247,221,-278,-272,9,12,7,12,6,12,1,-2,1,1,2,6,2,3,0,0,-1,0,1,0,1,2,0,1,0,0,1,1],\n\t\t[32,263,219,-284,-268,8,16,4,8,4,10,0,-1,1,3,1,2,0,4,2,0,-1,0,1,1,-1,2,1,-1,0,2,0,-1,0,0,0,2],\n\t\t[33,277,220,-290,-266,4,16,2,6,4,9,0,0,-1,1,2,2,1,5,-1,0,1,1,0,0,0,2,-1,-2,2,4,-1,-2,1,1,0,-1],\n\t\t[34,292,224,-301,-269,5,17,0,4,-2,9,3,-2,0,2,2,4,-1,4,0,1,1,-1,0,2,1,0,-1,1,0,-1],\n\t\t[35,304,228,-310,-272,2,16,1,4,2,10,-2,-3,0,0,2,5,-1,6,1,0,0,0,0,1,1,0],\n\t\t[36,312,232,-314,-275,1,16,0,2,0,11,0,-3,-1,0,1,6,0,4,1,1,0,0,0,0],\n\t\t[37,322,236,-318,-277,-2,14,-1,3,-1,9,1,-3,-1,0,1,9,-1,2,0,0,0,2],\n\t\t[38,336,243,-325,-280,-3,10,-1,2,-3,10,0,-4,-1,4,0,4,-1,3,-1,3],\n\t\t[39,350,251,-331,-285,-4,7,-2,2,-5,9,0,-1,0,0,-2,6]\n\t],\n\t[\n\t\t[0,363,271,-334,-300,-6,4,-2,0,-5,4,-1,1,-3,5,-3,3],\n\t\t[1,377,282,-337,-307,-5,1,-6,1,-4,3,2,-1,-12,8],\n\t\t[2,391,293,-340,-313,-4,-1,-8,-1,-7,2,3,-3],\n\t\t[3,402,303,-338,-317,-6,-5,-10,-2,-9,1,4,-5],\n\t\t[4,413,315,-333,-323,-15,-7,-5,-6,-12,0,-3,-2],\n\t\t[5,426,334,-321,-331,-31,-13,-7,-11,-12,-6,-4,-4],\n\t\t[6,438,358,-310,-336,-38,-18,-10,-3,13,-1],\n\t\t[7,443,378,-301,-334,-42,-24],\n\t\t[8,445,398,-299,-332],\n\t\t[9,436,418,-291,-331],\n\t\t[10,423,427,-281,-311],\n\t\t[11,404,429,-265,-288],\n\t\t[12,380,421,-259,-242],\n\t\t[13,354,409,-269,-203,-44,-98],\n\t\t[14,336,398,-295,-202,-20,-50],\n\t\t[15,315,384,-317,-230,-21,14,-32,70],\n\t\t[16,301,372,-330,-254,-20,31,-64,95,-10,-62],\n\t\t[17,291,363,-337,-277,-28,27,-35,15,25,-42],\n\t\t[18,283,356,-337,-290,-28,12,-9,-7,15,-22],\n\t\t[19,276,348,-336,-299,-22,5,1,-11,8,-9],\n\t\t[20,269,341,-334,-310,-14,-1,5,-16,5,-6],\n\t\t[21,260,329,-332,-317,1,-8,2,-3,4,-3],\n\t\t[22,250,314,-325,-326,9,-4,3,-6,3,-5],\n\t\t[23,243,302,-316,-327,9,-3,8,-3],\n\t\t[24,236,288,-306,-326,11,1,12,4],\n\t\t[25,232,278,-299,-324,14,5,12,5],\n\t\t[26,229,268,-291,-319,16,9,9,6,8,0],\n\t\t[27,229,258,-286,-311,15,12,9,5,7,5],\n\t\t[28,231,249,-284,-301,14,11,8,7,7,6],\n\t\t[29,236,242,-282,-293,10,9,9,9,6,7,6,4,2,10],\n\t\t[30,243,237,-285,-287,9,8,10,9,7,8,4,8,7,7,-1,0,4,4,-2,0,2,2,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,-1,0],\n\t\t[31,255,231,-287,-280,9,9,10,12,6,9,3,4,2,4,0,0,1,5,0,-1,1,2,-1,0,1,1,0,0,-1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t[32,268,228,-290,-273,5,9,7,12,3,4,2,4,2,4,0,1,1,3,1,1,0,2,-1,-1,1,1,1,0,-1,1,1,1,0,1,0,-1,0,1,0,1,-1,-1,1,0,0,0,0,0],\n\t\t[33,281,230,-295,-273,4,12,3,5,1,7,1,2,2,4,0,2,1,3,1,0,-1,1,1,2,-1,-1,2,1,-1,0,1,1,-1,2,0,0,1,-1,0,1,0,0],\n\t\t[34,294,233,-303,-273,3,10,1,5,1,5,1,3,1,2,0,4,0,3,1,0,0,0,0,3,1,-2,-1,2,0,-1,1,2],\n\t\t[35,303,236,-307,-275,1,10,0,4,1,5,-1,3,2,1,-1,5,1,3,0,0,0,0,1,2,-1,-1],\n\t\t[36,313,240,-313,-277,0,8,-2,3,1,6,0,3,0,1,1,5,-1,2,1,0,-1,1,0,1],\n\t\t[37,324,246,-319,-282,-2,7,-1,3,-1,6,0,3,0,1,-1,4,0,2,-1,0,1,1],\n\t\t[38,338,254,-326,-288,-3,6,-2,2,0,6,-3,2,0,4,-1,2,-1,2,1,-3],\n\t\t[39,350,262,-329,-294,-5,6,-2,1,-2,4,-1,3,-2,3,-2,3]\n\t],\n\t[\n\t\t[0,353,296,-321,-314,-3,1,0,-2,-4,1,-2,0,-1,1,-4,2,-3,2],\n\t\t[1,361,303,-320,-316,-4,-1,2,-3,-5,1,-2,-2,-3,1,-1,1],\n\t\t[2,369,311,-320,-319,-3,-2,4,-3,-8,-4,-5,1,0,-2,-8,1],\n\t\t[3,375,318,-316,-319,-5,-4,1,-4,-3,-7,-8,-1,-4,-1,-5,0],\n\t\t[4,381,327,-314,-321,-6,-6,1,-7,-8,-7,-6,-4,-4,-3,-9,2],\n\t\t[5,385,337,-310,-323,-7,-7,4,-6,-13,-10,0,-1,2,-7,-16,3],\n\t\t[6,388,348,-309,-322,-3,-7,1,-6,-13,-4],\n\t\t[7,389,359,-309,-322,-1,-6,-7,-2],\n\t\t[8,387,369,-306,-321,-4,-7,-10,-6],\n\t\t[9,383,379,-303,-319,-5,-13,-9,-7],\n\t\t[10,376,384,-298,-311,-6,-11],\n\t\t[11,366,386,-292,-300,-4,-11],\n\t\t[12,356,385,-293,-291,0,3],\n\t\t[13,342,380,-296,-285,0,20,-4,11],\n\t\t[14,331,374,-304,-283,-1,19,-1,25,-16,-20],\n\t\t[15,317,365,-309,-284,-7,11,-11,21,-9,4,-4,-6,-8,20],\n\t\t[16,307,358,-315,-292,-6,7,-8,14,-10,10,-8,2,-10,-3,-30,26,-11,-10],\n\t\t[17,298,351,-320,-302,-5,3,-3,0,-12,14,-4,-5,-3,-6,0,-5,-4,2],\n\t\t[18,292,345,-320,-305,-4,-2,-2,-3,-8,5,-2,-2,1,-5,2,-3,-2,-4],\n\t\t[19,287,340,-320,-309,-1,-4,-2,-1,-4,1,-2,-2,3,-4,4,-3,-3,-1],\n\t\t[20,282,334,-320,-312,3,-4,-3,-1,-1,-2,0,-3,6,-3,2,-3,-5,2],\n\t\t[21,277,327,-320,-316,6,-4,-4,0,4,-4,3,0,5,-2,2,-1,-4,1],\n\t\t[22,270,318,-317,-321,8,-1,-4,-3,7,-1,8,0,2,0,3,2],\n\t\t[23,265,310,-314,-322,8,-1,-1,-1,8,1,7,3,5,-1,0,2],\n\t\t[24,261,301,-312,-323,8,0,2,-2,8,4,8,1,7,6],\n\t\t[25,258,294,-310,-323,8,0,5,1,7,3,8,7],\n\t\t[26,256,287,-307,-322,8,-1,6,3,9,6,8,7],\n\t\t[27,255,280,-304,-320,9,3,5,3,9,7,9,9,-1,0],\n\t\t[28,256,273,-302,-315,8,5,6,3,8,9,7,5,1,2],\n\t\t[29,259,268,-300,-311,6,4,6,6,8,8,5,5,1,1,5,6,2,1],\n\t\t[30,264,262,-302,-305,6,5,7,6,6,7,5,6,3,1,3,5,2,3,3,4,-1,0,0,0,2,2,1,2,0,0,0,0,-1,-1,1,1,-1,-1,1,0,-1,0,1,0,-1,0],\n\t\t[31,271,258,-300,-301,6,7,5,7,5,5,6,7,2,4,2,1,0,2,2,3,-1,-1,1,3,0,0,1,1,-1,0,1,0,-1,1,1,0,-1,0,1,0,0,0,0,0,-1,0,1,0,-1,0],\n\t\t[32,280,257,-300,-298,4,9,1,3,6,7,3,6,1,2,1,2,1,2,1,1,0,1,0,2,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,-1,0,1,0,0,0,-1,0,1,0],\n\t\t[33,289,258,-302,-295,3,8,1,1,2,6,2,5,1,2,0,3,2,1,-1,2,1,1,0,0,0,2,1,-1,-1,1,1,1,0,2,0,-1,0,1,1,0,-1,0,0,0],\n\t\t[34,298,261,-305,-296,1,8,0,-1,2,7,0,3,1,2,0,5,1,0,0,1,1,1,-1,1,1,0,0,2,0,-2,0,2,0,2,0,0],\n\t\t[35,307,265,-309,-298,0,7,-1,-2,1,7,0,3,0,3,0,2,1,2,0,1,0,0,0,2,0,0,0,-1,-1,0],\n\t\t[36,316,269,-313,-299,-1,4,-1,-1,0,7,-1,2,1,2,-1,2,-1,2,1,2,0,0,-1,0,1,2,0,-2],\n\t\t[37,328,275,-318,-300,-1,1,0,-2,-3,6,-1,2,-1,1,0,3,-1,2,-1,1,1,-1,0,2,-1,0],\n\t\t[38,338,283,-320,-306,-3,1,0,-2,-4,4,0,2,-1,2,-1,1,-2,4,1,-2,-2,2],\n\t\t[39,346,289,-322,-310,-2,2,0,-2,-4,1,-2,2,-2,2,-2,2,-1,0,1,0]\n\t],\n\t[\n\t\t[0,353,307,-317,-317,-3,-1,0,-1,-3,0,-1,-1,-5,1,1,-1,-4,1,-3,0],\n\t\t[1,359,313,-316,-318,-4,-2,2,-2,-4,-2,-2,-1,-6,1,0,-1,-1,-2,-1,-1],\n\t\t[2,365,319,-315,-319,-6,-2,3,-4,-3,-3,-6,-3,-6,1,0,-2,-2,-2,-2,-2],\n\t\t[3,369,325,-314,-320,-5,-3,1,-4,-3,-4,-5,-5,-10,-1,0,-2,-1,-2,1,-4],\n\t\t[4,373,331,-315,-321,-4,-4,0,-5,-6,-5,-3,-4,-7,-3,-5,0,3,-1,3,-4],\n\t\t[5,376,339,-316,-322,-1,-4,-6,-5,-7,-3,-3,-6,-6,-1,-3,-3],\n\t\t[6,377,348,-316,-324,-2,-5,-10,-6,-5,-3,-5,-1],\n\t\t[7,377,355,-316,-323,-6,-7,-9,-6,-4,-2],\n\t\t[8,375,363,-316,-324,-6,-8,-9,-8,-3,-4],\n\t\t[9,370,370,-312,-323,-8,-11,-7,-7,-4,-6],\n\t\t[10,365,375,-311,-322,-6,-10,-6,-5],\n\t\t[11,359,378,-309,-318,-6,-9,-5,-5],\n\t\t[12,351,379,-306,-313,-6,-8,-4,-6],\n\t\t[13,341,377,-305,-306,-6,-8,-5,2,-2,-3],\n\t\t[14,332,373,-309,-303,-3,-2,-3,4,-5,-5,-3,1],\n\t\t[15,318,364,-309,-299,-3,3,-5,5,-8,2,-5,0,-3,-2],\n\t\t[16,309,358,-313,-304,-2,6,-4,4,-7,3,-2,0,-6,5,-1,-7,-8,8,-4,-5,-3,-2,-2,-2],\n\t\t[17,300,350,-316,-308,-4,0,0,-1,-7,5,0,-3,0,-2,-2,-4,0,-2,-4,1,0,-2,3,-5],\n\t\t[18,294,344,-317,-310,-1,-2,0,-4,-5,2,1,-3,0,-2,2,-4,2,-1,-2,-1,-2,2,-2,0],\n\t\t[19,289,339,-316,-311,0,-5,1,-3,-3,1,1,-1,2,-4,2,-1,2,-2,-1,0,-1,0,-3,0],\n\t\t[20,284,334,-315,-314,2,-4,2,-2,-1,-1,0,0,3,-4,2,0,2,-3,2,-1,-1,0,-4,1],\n\t\t[21,280,327,-316,-315,5,-4,3,-2,-2,-1,4,-1,2,-1,3,-1,2,-1,2,1,1,-2,-4,1],\n\t\t[22,274,319,-314,-318,8,-2,0,-2,3,-1,4,-1,3,1,2,-1,4,1,1,1,0,-2],\n\t\t[23,270,312,-313,-320,9,0,3,-1,2,0,5,2,2,-1,4,1,2,0,2,0],\n\t\t[24,266,305,-310,-321,8,-1,5,2,1,-1,7,3,1,0,7,4,3,2],\n\t\t[25,264,298,-310,-321,11,2,3,0,3,1,6,3,4,1,4,6],\n\t\t[26,262,292,-306,-321,10,4,3,-1,4,2,5,4,4,2,3,5],\n\t\t[27,262,286,-304,-318,10,4,2,1,6,4,3,1,3,4,6,5],\n\t\t[28,263,280,-301,-313,6,3,5,4,4,3,3,1,4,5,4,3,1,-1],\n\t\t[29,266,276,-301,-311,6,4,5,4,4,4,2,3,3,2,3,3,1,1,4,4,0,0],\n\t\t[30,271,272,-303,-308,5,5,6,6,2,1,3,4,3,2,2,2,2,4,3,2,1,2,0,0,2,3,1,0,-1,1,1,-1,0,2,1,1,-1,-1,1,0,0,1,0,0,0,0,0,-1,0,0],\n\t\t[31,278,269,-304,-306,5,6,5,6,2,3,3,3,3,3,3,2,1,4,1,2,1,-1,0,2,0,2,1,0,0,0,0,0,1,2,-2,-1,1,0,1,1,-1,0,1,0,0,0,-1,0,1,0],\n\t\t[32,285,267,-304,-302,4,6,3,5,1,2,4,6,0,0,2,3,2,3,0,1,0,1,1,0,0,2,1,0,0,1,0,-1,0,2,-1,0,2,0,-1,0,1,0,-1,1,1,0,0,0,0,0],\n\t\t[33,292,268,-305,-302,3,7,3,5,0,1,2,5,0,1,1,2,1,2,0,2,1,0,0,1,0,2,0,-1,0,1,1,1,0,0,0,-1,0,2,0,0,1,-1,-1,2,0,-1],\n\t\t[34,300,270,-307,-301,1,6,1,2,0,3,2,3,0,3,0,1,1,2,0,2,0,0,0,0,1,2,0,0,0,1,0,0,0,-1,0,2,0,0,0,0,0,0],\n\t\t[35,309,274,-311,-303,1,5,-1,1,0,4,0,2,1,3,0,2,0,0,0,3,0,0,0,0,1,1,-1,0,0,2,1,-2,-1,1,0,1,0,0],\n\t\t[36,317,279,-313,-306,-1,4,0,2,-1,2,-1,2,0,2,0,4,0,-2,-1,4,1,0,-1,0,0,1,1,-2,-1,3,0,-2,0,0],\n\t\t[37,327,286,-314,-310,-3,5,0,-1,-2,2,-1,3,0,1,-1,1,-1,1,-1,2,1,-1,-2,3,0,0,3,-4,-3,4],\n\t\t[38,337,294,-315,-314,-4,3,-2,0,-2,1,-1,1,-2,0,0,2,-3,2,0,0,1,-3,-4,5,2,0],\n\t\t[39,345,300,-316,-315,-4,1,-1,-1,-2,1,-2,-1,-2,2,-2,0,-2,1,1,1,-1,-2]\n\t],\n\t[\n\t\t[0,342,311,-312,-318,-2,0,0,-1,-3,0,1,-1,-3,-1,-2,1,3,-2,-4,1,-5,2,1,-2],\n\t\t[1,346,315,-311,-317,-2,-2,0,-2,-3,0,0,-1,0,-2,-5,0,3,-1,-3,1,-7,0,3,1],\n\t\t[2,351,320,-310,-318,-3,-1,1,-3,-4,-1,0,-2,-1,-2,-3,-1,-2,-2,-4,0,-5,2,1,-2],\n\t\t[3,354,324,-309,-318,-2,-2,0,-2,-4,-3,-3,-2,0,-2,-6,-3,-2,-1,-1,-2,-5,3,1,-3],\n\t\t[4,358,329,-308,-317,-4,-3,0,-3,-4,-4,-4,-1,-3,-3,-9,-2,4,-1,-3,1,1,-2,2,0],\n\t\t[5,362,337,-310,-320,-5,-4,-1,-2,-5,-3,-8,-3,0,0,-8,-1,5,0],\n\t\t[6,365,344,-311,-320,-8,-6,-4,-5,-6,-2,-6,-4,0,-1],\n\t\t[7,366,350,-311,-319,-10,-9,-7,-5,-6,-3,-9,-3,5,0],\n\t\t[8,366,359,-313,-323,-10,-10,-8,-6,-7,-4,-8,-5],\n\t\t[9,363,365,-312,-322,-11,-12,-7,-7,-8,-7,-8,-5],\n\t\t[10,359,370,-311,-321,-10,-13,-8,-10,-9,-4,-5,-9],\n\t\t[11,354,373,-310,-319,-9,-12,-8,-12,-6,-6,-8,-9],\n\t\t[12,348,373,-309,-314,-7,-11,-8,-13,-5,-7,-8,-9],\n\t\t[13,338,371,-305,-309,-7,-9,-6,-9,-4,-6,-6,-12],\n\t\t[14,331,368,-308,-308,-5,-3,-3,-4,-4,-6,-2,-13,-1,6],\n\t\t[15,319,360,-310,-304,-1,2,-4,3,-4,-5,-5,0,-3,-5,-4,8,0,-7],\n\t\t[16,311,355,-312,-308,-2,6,-3,1,-4,4,-5,3,-2,-3,0,-8,-4,7,-8,10,2,-10,4,-10,-13,17,-12,8],\n\t\t[17,301,347,-313,-312,-3,5,-3,-2,-2,3,-3,1,1,-7,-1,-2,0,-1,1,-4,0,-1,-3,0,2,-2,-2,5,-8,6],\n\t\t[18,296,342,-314,-314,-2,1,-2,-1,-2,-2,-4,2,7,-8,-2,0,2,-1,4,-5,-1,0,-5,4,3,-3,-1,2,-2,-3],\n\t\t[19,292,337,-314,-314,-1,-1,-1,-2,0,0,-4,0,7,-6,0,0,1,0,4,-4,0,0,-3,1,0,0,0,-1,1,0],\n\t\t[20,288,333,-313,-316,-1,-1,1,-2,1,-1,-4,1,8,-4,1,-2,-1,0,4,-2,1,-1,0,0,0,1,-2,-1,2,0],\n\t\t[21,284,327,-313,-316,2,-3,0,0,0,-2,2,-1,4,-1,3,-1,0,0,3,-1,2,0,0,-1,0,1,0,-1],\n\t\t[22,280,321,-312,-319,2,-1,1,-2,2,0,3,-1,3,-1,3,0,2,0,1,0,3,0,3,2,-2,0],\n\t\t[23,276,315,-309,-319,1,-2,3,0,1,-2,4,1,3,0,4,2,2,0,3,0,1,1,2,1],\n\t\t[24,274,309,-310,-320,5,-1,0,-1,3,0,5,1,1,2,8,2,-2,-1,5,2,0,0],\n\t\t[25,273,304,-310,-321,6,1,0,-3,3,2,7,3,-1,-1,9,6,-4,-4,6,6],\n\t\t[26,272,299,-308,-320,6,0,0,-1,5,2,4,1,1,2,4,1,1,3],\n\t\t[27,273,295,-307,-320,5,2,1,-1,6,4,1,1,2,1,1,1,7,6],\n\t\t[28,275,291,-307,-317,5,2,0,-1,6,4,2,2,1,1,3,2,2,2,2,3],\n\t\t[29,278,288,-307,-316,4,2,1,1,5,5,1,1,2,0,3,3,1,2,2,1,2,1,2,5],\n\t\t[30,282,284,-308,-312,3,2,0,1,6,4,1,3,2,0,1,2,2,1,1,1,3,3,3,3,1,2,-1,1,1,0,1,1,0,0,0,-1,-2,-2,2,3],\n\t\t[31,286,282,-306,-311,1,3,2,1,3,4,2,3,2,2,2,1,2,2,0,0,3,5,0,0,1,1,0,1,0,1,0,-1,0,0,1,0,-1,1,0,0],\n\t\t[32,291,280,-306,-308,1,2,2,4,1,2,2,2,1,2,3,3,0,2,1,-1,1,4,0,1,0,-2,1,3,0,0,-1,-1,2,0,-1,1,0,0,-1,0],\n\t\t[33,296,281,-306,-309,0,5,3,2,0,2,1,2,1,3,1,0,0,2,0,1,2,3,0,0,-1,0,1,1,1,1,-1,-2,-1,1,1,1,0,-1,0,1],\n\t\t[34,302,283,-308,-309,0,4,2,2,-1,2,2,2,0,1,0,1,0,3,1,0,0,3,1,-1,-1,1,0,0,1,2,-1,-2,1,-1,0,4,0,-1,1,-1],\n\t\t[35,309,286,-310,-310,1,4,-1,1,0,2,0,2,0,0,0,1,0,2,0,2,0,1,0,1,1,-1,-1,1,0,0,0,1,0,-2,1,2,-1,1,0,-1],\n\t\t[36,316,290,-311,-311,-1,1,-1,3,0,1,-1,1,0,2,0,1,0,-1,-1,0,0,5,0,0,0,-1,-1,1,1,-1,0,1,0,1,-1,-1,1,1],\n\t\t[37,323,295,-312,-313,-1,1,-1,1,-1,2,-1,0,0,2,-1,0,0,0,0,0,-2,3,0,0,0,2,0,-2,1,-3,-2,5,-1,0],\n\t\t[38,331,301,-313,-315,0,0,-2,1,-3,2,1,-2,-1,2,-2,0,1,-1,-1,1,-2,2,-2,-1,2,0,-2,2,3,-3],\n\t\t[39,337,306,-313,-316,0,0,-2,-1,-3,1,0,-1,-1,1,-1,-1,0,0,-1,-1,-6,4,3,-2,0,-1]\n\t],\n\t[\n\t\t[0,333,313,-307,-317,0,-1,0,-1,-4,0,3,-2,-6,2,3,-2,-2,0,1,0,-7,0,2,2,-4,0,-1,1],\n\t\t[1,336,316,-306,-317,0,-1,-1,-1,-1,-1,1,-2,-6,1,2,-2,-1,-1,0,0,-9,1,-1,1,-1,0,-2,1],\n\t\t[2,339,319,-304,-316,-1,-1,-1,-2,1,-1,-2,-3,-5,1,3,-3,-2,0,-6,-1,-2,0,-6,1,0,1,-2,0],\n\t\t[3,343,323,-305,-317,-1,0,1,-2,-1,-3,-2,-2,-4,-1,0,-2,-5,-1,-3,-1,-1,1,-3,0,-7,0,4,0],\n\t\t[4,347,328,-306,-316,1,-2,-1,-2,-1,-3,-3,-2,-8,-3,-2,0,-1,-2,-1,-1,0,-1,-3,1,-3,-1],\n\t\t[5,351,334,-309,-319,2,0,-1,-3,-5,-4,-8,-1,-5,-3,-5,0,4,-1,-5,1],\n\t\t[6,353,340,-309,-319,1,-1,-4,-5,-8,-5,-7,-2,-4,-2,-2,-1,-3,-1],\n\t\t[7,354,345,-309,-319,0,-2,-7,-5,-9,-5,-6,-4,-6,-3,0,1],\n\t\t[8,355,351,-310,-318,-2,-4,-9,-8,-9,-6,-6,-4,-1,-3,-5,1],\n\t\t[9,353,357,-309,-319,-3,-4,-10,-11,-9,-7,-5,-3,-2,-3],\n\t\t[10,350,362,-308,-318,-4,-6,-10,-13,-8,-6,-5,-5,-1,-4],\n\t\t[11,347,364,-309,-316,-3,-5,-10,-13,-7,-9,-4,-6,-2,-1],\n\t\t[12,342,365,-308,-314,-3,-5,-7,-11,-8,-11,-4,-6,-2,-3],\n\t\t[13,335,364,-308,-314,-1,1,-5,-9,-8,-12,-2,-7,-4,-3],\n\t\t[14,329,361,-310,-312,-1,2,-2,-3,-5,-8,-3,-9,-2,-7,-3,-2],\n\t\t[15,319,356,-311,-313,0,6,-2,1,-2,1,-4,-5,-2,-7,0,-7,0,-1,-4,5],\n\t\t[16,311,351,-311,-314,0,5,-3,4,-2,2,-4,3,-1,-5,-4,3,-1,-1,-3,1,2,-8,-3,3,-4,2,-2,5,-4,0,1,-3],\n\t\t[17,303,345,-312,-316,-1,2,-3,2,-1,0,-4,3,0,-2,-2,1,-3,-1,3,-5,0,-1,1,-3,-1,-1,0,-1,-4,4,3,-4],\n\t\t[18,298,339,-312,-315,-1,-1,-3,2,0,-3,-5,3,4,-6,-2,2,0,-2,4,-4,-1,-1,-1,3,2,-4,0,1,-4,1,1,2],\n\t\t[19,295,336,-312,-317,-1,-2,-2,3,0,-4,-4,3,6,-4,-3,-1,1,1,4,-4,0,0,-1,0,2,-2,1,0,-4,1,-2,0],\n\t\t[20,291,331,-311,-316,1,-2,-3,1,2,-2,-5,2,7,-4,-2,0,1,0,3,-3,0,0,1,-1,3,-1,0,0,-4,2,-2,1],\n\t\t[21,288,327,-310,-317,1,-2,-3,1,1,-2,-1,-1,6,-2,-3,0,3,0,2,-2,1,0,3,0,2,-1,-1,1,0,-1,-4,1],\n\t\t[22,284,321,-309,-317,2,-2,-3,-1,1,-1,1,0,8,0,-5,-2,2,0,4,1,3,-1,1,1,2,-1,1,1,0,0],\n\t\t[23,281,316,-307,-317,0,-1,0,-3,1,0,1,0,6,0,-1,0,0,0,4,0,3,1,3,0,2,2],\n\t\t[24,280,311,-309,-318,1,-2,2,0,1,-1,2,0,5,2,-2,-1,2,0,4,1,1,2,5,1],\n\t\t[25,279,307,-309,-319,2,-1,2,0,1,-1,1,0,6,2,-1,0,4,1,-2,-1],\n\t\t[26,279,303,-309,-318,3,-3,1,0,3,1,1,-1,3,3,0,-1,4,2,3,2],\n\t\t[27,280,300,-309,-319,3,-1,2,1,2,0,1,0,3,3,1,-1,3,3,3,3],\n\t\t[28,282,297,-309,-318,2,0,2,0,2,2,2,0,1,3,2,-1,3,5,1,-2,0,3],\n\t\t[29,285,294,-310,-316,2,-1,2,2,2,1,1,1,3,3,1,-1,0,2,2,2,2,1,-1,0],\n\t\t[30,288,292,-310,-315,1,-1,2,3,1,1,2,2,1,1,2,0,1,2,2,1,2,4,-2,-3,2,2,1,1,2,1,-2,1],\n\t\t[31,292,291,-310,-315,0,-1,4,3,1,4,0,-1,1,2,3,2,0,1,2,1,3,3,-1,-1,0,2,2,1,-1,0,0,0,0,0],\n\t\t[32,296,291,-310,-316,1,0,1,5,3,2,-1,1,2,1,0,2,3,2,0,1,1,1,0,0,0,0,1,2,-1,-1,0,1,1,1,0,-1],\n\t\t[33,300,291,-310,-315,1,1,1,3,2,4,0,-1,1,3,1,1,0,2,0,0,0,1,1,0,1,2,-2,-2,2,3,-1,-2,0,1,1,0,0,2],\n\t\t[34,305,293,-311,-316,0,2,2,2,0,3,0,0,1,3,-1,0,2,1,-1,2,1,0,0,0,1,2,-1,0,-1,-1,0,0,2,1,-1,1,1,1,0,0],\n\t\t[35,310,296,-310,-317,-1,2,1,1,-1,3,0,0,1,2,-1,1,0,0,0,2,1,-1,-1,3,0,-1,1,1,-1,0,0,-1,1,1,-1,1,0,2,1,-2],\n\t\t[36,315,299,-310,-317,-1,0,0,1,-1,4,0,-1,-1,2,0,0,0,1,0,1,0,0,-1,2,1,-2,-1,3,0,-1,0,1,0,-2,0,1,0,3,0,-1],\n\t\t[37,320,302,-310,-317,0,0,-1,0,-2,3,1,0,-2,0,0,2,0,0,-1,0,0,0,0,3,-1,-2,0,1,0,0,0,1,-1,0,2,-2],\n\t\t[38,326,307,-310,-319,1,1,-1,0,-3,1,1,-1,-2,2,0,-1,-1,1,0,0,-1,1,0,-1,-2,1,-1,1,1,0,-1,0],\n\t\t[39,330,310,-308,-318,-1,0,-1,-1,-2,1,1,-1,-4,1,2,-1,-3,0,2,0,-4,1,1,0,-4,1,1,1,0,-1]\n\t],\n\t[\n\t\t[0,329,314,-307,-317,1,-1,-4,1,3,-2,-1,0,-2,-1,4,-1,-5,1,-1,-1,-3,1,0,0,-3,0,0,2],\n\t\t[1,332,317,-307,-318,1,1,-2,-2,1,0,0,-2,-3,0,3,-2,-3,1,-3,0,-3,-1,-3,0,1,1,-5,-1],\n\t\t[2,334,319,-305,-316,0,-1,-2,-1,2,-1,-1,-2,-2,0,2,-1,-3,-1,-5,-1,-2,0,-4,0,-3,1,3,-2,-3,0],\n\t\t[3,338,323,-307,-317,0,-1,1,-1,2,-1,-4,-1,1,-2,-2,-1,-2,-1,-7,-2,2,1,-8,0,-1,-1,2,-1,-3,0],\n\t\t[4,342,327,-307,-316,-2,-2,2,-1,1,-1,-2,-2,-2,-2,-5,-2,0,0,-4,-2,-1,0,-4,1,-3,-1,2,0,1,-2],\n\t\t[5,345,332,-309,-317,1,-2,-2,-2,1,-1,-3,-2,-6,-2,-6,-2,-3,-1,-2,-2,-6,2],\n\t\t[6,347,337,-310,-318,2,0,-3,-4,-3,-3,-5,-2,-6,-3,-4,-2,-6,-2,1,1],\n\t\t[7,349,342,-312,-319,1,0,-2,-5,-6,-2,-5,-5,-8,-3,-2,-1,-7,-3,1,-1],\n\t\t[8,349,348,-312,-319,1,-3,-5,-4,-6,-5,-6,-5,-6,-4,-4,-1,-3,-4],\n\t\t[9,348,354,-312,-321,0,-2,-4,-7,-8,-5,-7,-7,-4,-2,-3,-4,-3,-1],\n\t\t[10,346,358,-313,-320,2,-3,-6,-7,-8,-8,-7,-7,-1,-1,-5,-6],\n\t\t[11,343,360,-311,-320,-1,0,-5,-8,-7,-10,-6,-7,-2,-2,-4,-7],\n\t\t[12,340,361,-312,-319,0,0,-4,-6,-7,-10,-5,-9,-2,-2,-4,-8],\n\t\t[13,334,361,-311,-318,0,0,-2,-1,-6,-12,-4,-8,-3,-4,-4,-9],\n\t\t[14,329,359,-312,-317,-1,1,-1,1,-3,-6,-3,-8,-3,-7,-1,-8,-1,-2],\n\t\t[15,319,355,-310,-318,-2,3,0,5,-3,-2,-1,-3,-2,-1,-1,-10,-1,-7,0,-5,0,4],\n\t\t[16,311,350,-310,-318,0,4,-2,2,-2,1,-2,2,-3,3,-1,-4,-2,2,0,-4,-1,0,-3,6,2,-6,-4,5,-3,-1,3,-8],\n\t\t[17,304,344,-311,-318,-1,0,-1,2,-2,1,-1,-1,-2,4,-1,-2,-3,1,0,-1,0,-2,-2,1,0,-3,1,-1,-4,1,0,0,1,-1],\n\t\t[18,299,338,-311,-316,0,-2,-2,-1,0,0,-4,2,2,-3,-1,0,0,-1,-1,0,0,-1,0,0,1,-1,0,-1,-3,2,2,-3,-4,2],\n\t\t[19,296,334,-311,-316,0,-3,0,1,-1,-1,-2,1,1,-2,0,-1,-1,1,2,-1,0,-1,-1,-1,2,0,0,0,-3,0,2,0,-2,0],\n\t\t[20,293,330,-311,-316,2,-2,-1,0,0,0,-2,-1,3,0,-2,-2,1,1,0,-1,2,-1,-1,0,3,-2,0,0,-2,1,1,-1,-3,3],\n\t\t[21,290,327,-310,-317,3,-2,-3,-1,2,-1,-2,1,3,-2,-1,0,1,-1,1,0,1,-1,-1,0,3,0,4,-1,-3,1,0,-2],\n\t\t[22,287,322,-309,-318,1,-1,1,-1,0,0,0,-1,2,-1,1,1,1,-1,0,-1,0,-1,1,2,4,-1,4,0,-1,1],\n\t\t[23,285,317,-310,-317,3,-1,1,-1,0,-1,1,0,3,0,-1,0,2,-1,-1,0,1,0,2,1,4,-1],\n\t\t[24,284,313,-310,-318,2,-1,2,-1,1,0,0,-1,3,1,0,-1,2,1,-1,0,2,0,1,0],\n\t\t[25,284,310,-311,-319,1,-2,3,0,3,0,-2,-1,4,2,-1,-1,4,2,0,-1,1,-1],\n\t\t[26,284,306,-310,-318,0,-3,3,0,2,0,2,0,0,0,0,1,5,1,-1,2],\n\t\t[27,285,304,-310,-320,0,-1,3,0,2,0,0,0,3,1,-1,0,3,2,3,2,1,1],\n\t\t[28,287,301,-310,-318,-1,-2,3,1,2,1,-1,-2,3,3,-1,-1,4,3,3,3,2,2,-3,-2],\n\t\t[29,290,299,-312,-318,1,-1,1,1,3,1,-2,-1,3,2,0,-1,5,5,0,1,1,2,0,-1],\n\t\t[30,292,298,-311,-318,-1,-2,3,3,1,1,-1,-1,1,1,0,0,7,7,-2,-2,3,2,0,0,-1,0],\n\t\t[31,296,296,-312,-317,0,-1,3,4,0,0,-1,-1,2,1,-1,1,6,5,0,0,1,1,0,1,-1,-3],\n\t\t[32,299,296,-312,-317,1,-1,2,4,0,1,0,-1,1,2,1,-1,2,6,-1,-2,1,2,2,2,-1,-3,0,2],\n\t\t[33,302,296,-311,-316,0,-1,2,3,0,1,2,2,-1,1,2,0,-1,3,1,-2,0,2,1,1,-1,-1,0,2,1,-1,0,1],\n\t\t[34,305,297,-310,-316,0,0,1,2,-1,1,2,2,-1,0,1,1,0,2,0,-1,0,-1,1,4,0,-1,-1,0,1,1,0,1,0,0,0,2],\n\t\t[35,311,299,-311,-315,-1,-2,1,3,-1,0,1,2,-1,1,1,0,0,1,-1,-1,0,1,1,2,-1,-2,0,3,0,-2,0,2,0,1,1,1],\n\t\t[36,315,302,-312,-317,2,0,-2,1,0,1,0,1,0,-1,-1,3,0,0,0,-2,0,3,-1,0,1,-1,-1,1,1,2,-1,-1,0,1,0,1],\n\t\t[37,319,305,-311,-317,1,-1,-1,2,-1,0,0,-1,0,2,0,-1,-2,2,1,-1,-1,2,0,-1,-1,1,0,1,1,-1,-1,1,-1,1,0,1],\n\t\t[38,323,309,-309,-318,1,-1,-2,2,-1,0,1,-1,-1,-1,0,2,-1,-1,1,-1,-4,4,-1,-1,3,-1,-4,2,0,1,1,-2],\n\t\t[39,326,311,-308,-316,2,-2,-5,1,2,-1,0,-1,-1,1,0,-2,-3,2,3,-2,-4,3,-2,-1,-1,1,-1,0,-2,1]\n\t],\n\t[\n\t\t[0,326,315,-307,-317,1,-1,0,0,-1,-1,3,-1,-2,0,-1,0,-1,0,-3,1,-2,-1,2,-2],\n\t\t[1,328,317,-306,-317,1,0,0,-1,-1,-1,4,0,-4,-2,1,0,-5,0,-2,0,-3,-1,4,1],\n\t\t[2,331,319,-307,-316,2,-1,0,0,-1,-2,3,-1,-3,0,0,-2,-5,0,-3,0,-1,-1,1,-1],\n\t\t[3,334,322,-307,-316,1,0,3,-2,-4,-1,4,0,-3,-2,0,-1,-8,-2,-1,0,0,-1,-4,0,0,0],\n\t\t[4,336,325,-305,-314,0,-2,2,-1,-4,-1,4,-1,-3,-2,-1,-1,-10,-3,2,1,1,-1,-6,-2,1,-1],\n\t\t[5,339,330,-306,-316,0,-1,-1,-2,-2,-2,3,0,-3,-1,-8,-3,-4,-2,-6,0,0,-1,-4,0],\n\t\t[6,342,335,-309,-317,1,-1,-3,-3,0,-1,-1,-2,-6,-2,-5,-3,-7,-2,-2,-1,-1,1],\n\t\t[7,344,340,-311,-319,1,0,-3,-3,-3,-3,-1,-2,-7,-3,-5,-3,-5,-3,-4,0,2,-1],\n\t\t[8,344,345,-310,-318,-2,-3,-2,-4,-3,-2,-4,-4,-6,-4,-5,-3,-3,-2,-5,-1],\n\t\t[9,344,351,-312,-322,-1,-2,-3,-3,-2,-3,-6,-6,-6,-5,-4,-3,-4,-3,-1,0],\n\t\t[10,342,354,-312,-319,-1,-4,-3,-5,-2,-2,-7,-8,-6,-5,-2,-3,-4,-4,0,0],\n\t\t[11,340,356,-312,-319,-2,-4,-2,-2,-2,-5,-7,-9,-5,-4,-2,-4,-4,-4],\n\t\t[12,337,357,-312,-319,-1,-2,-1,-3,-3,-3,-7,-11,-3,-4,-4,-5,-2,-5],\n\t\t[13,333,357,-313,-319,0,-1,-1,-1,-2,-1,-5,-11,-2,-5,-4,-7,-4,-6],\n\t\t[14,328,356,-312,-319,-2,-1,0,2,-1,0,-3,-6,-2,-7,-3,-9,-3,-5,1,1],\n\t\t[15,319,352,-311,-319,-1,1,0,3,-2,2,-1,-1,-1,-1,-1,-7,-1,-6,-1,-6,0,1,0,-4],\n\t\t[16,312,347,-311,-318,0,1,-1,3,-2,1,-1,2,-1,1,-3,1,0,-3,-2,2,0,-4,-2,5,1,-7,0,1,1,-3,0,3],\n\t\t[17,305,341,-311,-318,0,0,-1,3,-1,1,-3,0,1,-1,-2,1,0,0,-3,0,0,1,0,-3,-4,3,-1,-2,-3,2,3,-4,-5,2],\n\t\t[18,300,337,-310,-319,0,-1,-1,1,-3,1,1,-1,-3,0,1,-1,1,-2,-2,1,1,-2,1,-1,2,-2,-5,4,-1,-1,1,-1,-2,1],\n\t\t[19,297,333,-309,-318,0,-1,-1,0,-2,1,0,0,-1,-1,0,-1,2,-1,-1,0,0,-1,3,-1,0,-2,-3,3,-1,-1,1,0,0,0],\n\t\t[20,295,330,-310,-318,1,-1,-1,0,-1,0,1,-1,-2,1,2,-2,0,0,1,-1,-2,1,4,-2,2,-2,-3,1,-1,2,3,-2],\n\t\t[21,293,327,-310,-319,2,0,-2,0,-1,-1,2,-1,-1,-1,3,0,-2,0,2,-1,-2,0,5,-1,0,-1,-1,0,1,1,2,-2],\n\t\t[22,290,323,-309,-319,2,-1,-2,1,0,-2,3,0,0,-1,0,0,0,0,2,-1,-2,-1,4,1,3,0,0,0,0,-1],\n\t\t[23,288,318,-309,-317,3,-1,-2,-1,0,0,2,-1,2,0,-1,-1,2,1,2,-1,-3,0,4,1,4,0],\n\t\t[24,287,314,-310,-317,4,-1,-2,-2,1,1,0,-2,3,1,-1,0,3,0,3,1,-2,-1,0,-1],\n\t\t[25,287,311,-311,-318,3,-1,0,-1,-1,0,3,-2,1,2,0,-2,4,3,1,0,0,-1],\n\t\t[26,288,308,-313,-319,3,-1,1,0,0,-3,0,0,5,3,-1,0,0,-1,3,2],\n\t\t[27,289,306,-313,-319,3,-1,0,-2,0,0,1,-1,3,3,1,0,-1,-1,6,3],\n\t\t[28,291,304,-313,-319,1,-1,1,-1,0,-1,0,0,4,4,0,-2,1,2,2,0],\n\t\t[29,293,303,-313,-321,1,1,0,-1,0,-1,2,1,1,0,1,2,3,2],\n\t\t[30,295,301,-313,-319,1,-1,0,1,-1,-1,1,0,3,2,1,1,2,2],\n\t\t[31,298,300,-313,-319,1,-1,0,1,0,-1,1,2,2,3,1,-1,1,3,-1,-1],\n\t\t[32,301,300,-313,-320,1,1,0,1,0,-1,2,1,1,3,1,2,0,1,1,-2,-1,2],\n\t\t[33,303,300,-311,-319,0,1,1,1,0,0,0,1,2,1,0,2,1,4,0,-5,0,2,0,2],\n\t\t[34,306,301,-311,-319,0,1,1,1,-1,0,1,2,1,1,0,0,0,1,0,0,0,0,0,2,0,-1,1,2],\n\t\t[35,311,304,-311,-320,0,1,0,0,0,1,-1,2,1,-1,0,1,-1,1,0,0,1,0,-1,1,0,0,0,1,0,0],\n\t\t[36,314,305,-310,-318,0,0,0,-1,-1,2,-1,1,1,0,0,-1,-1,2,0,0,0,-1,-1,2,-1,0,1,1,0,0],\n\t\t[37,317,308,-309,-319,1,-1,-1,2,-1,0,0,0,-1,0,1,-1,-1,1,0,0,-2,2,0,2,1,-2,-1,0,0,2],\n\t\t[38,321,310,-309,-317,2,-1,-1,0,-2,1,2,-2,-1,1,0,-1,-1,1,-4,1,3,0,-3,1,2,-3,-1,3],\n\t\t[39,323,313,-307,-318,1,-1,-1,0,-1,1,2,-3,-1,1,-1,0,-2,-1,-1,2,-1,0,-1,0,0,-1]\n\t],\n\t[\n\t\t[0,322,315,-303,-316,0,-2,1,0,-2,0,6,-2,-7,2,-3,-1,2,0,-1,-1],\n\t\t[1,324,317,-302,-316,-1,-1,2,-1,0,0,3,-1,-5,-1,-5,0,1,1,0,-1],\n\t\t[2,325,319,-299,-316,-3,0,3,-2,-1,0,4,-2,-7,0,-4,0,1,-1],\n\t\t[3,328,321,-300,-314,-1,-1,2,-1,-2,-2,4,0,-9,-4,0,1,0,-1,-5,1],\n\t\t[4,330,324,-298,-313,-3,-2,1,0,-2,-3,4,0,-6,-2,-4,-2,0,1,-4,-3,1,1,0,-1,-1,0],\n\t\t[5,333,328,-299,-313,-5,-3,3,-1,-5,-1,3,-1,-2,-3,-8,-1,-2,-2,-3,0,-1,-2,-2,0,-2,0],\n\t\t[6,337,333,-305,-315,-2,-3,2,1,-5,-4,0,-1,-3,-1,-3,-4,-9,-2,-1,-2,-3,2,2,-2,-3,0],\n\t\t[7,340,338,-310,-317,0,-3,1,0,-5,-3,-1,-2,-5,-2,-2,-3,-6,-2,-5,-2,0,-2,0,2],\n\t\t[8,341,343,-312,-319,0,-1,0,-3,-4,-3,-3,-3,-3,-2,-5,-4,-4,-2,-3,-2,-2,-1],\n\t\t[9,341,348,-314,-321,2,-1,-3,-4,-2,-3,-3,-2,-5,-5,-4,-3,-5,-3,-1,-2,-1,0],\n\t\t[10,339,352,-313,-321,0,-2,-1,-3,-3,-4,-4,-3,-4,-6,-5,-4,-3,-3,-1,-2,-2,0],\n\t\t[11,338,354,-314,-322,0,0,-1,-3,-4,-5,-1,-3,-7,-7,-2,-4,-4,-4,-1,-2],\n\t\t[12,336,355,-314,-322,0,1,-1,-4,-3,-3,-3,-4,-4,-7,-3,-4,-4,-5,0,-2],\n\t\t[13,333,356,-316,-323,2,1,-2,-2,-1,0,-3,-6,-2,-5,-4,-7,-3,-6,-1,-2,0,0],\n\t\t[14,328,354,-313,-321,-1,1,-1,-1,-1,1,-2,-2,-1,-5,-4,-10,-1,-2,-1,-8,-1,2],\n\t\t[15,319,350,-311,-319,-1,1,0,0,-2,2,0,1,-1,0,-2,-4,0,-5,-2,-8,1,3,-1,-6,1,4,-1,-2],\n\t\t[16,312,346,-310,-319,-1,1,-1,-1,-1,5,-1,1,-1,-1,-2,1,0,1,-2,0,0,-4,0,-2,0,-10,-2,6,-1,2,-2,6],\n\t\t[17,305,340,-309,-319,-2,3,1,-2,-2,1,-2,2,1,-2,-2,3,-1,1,0,-2,-1,-1,-1,-1,0,-4,-3,6,-1,-2,-2,-1],\n\t\t[18,301,336,-310,-320,-1,2,0,-1,-1,-1,-1,0,0,0,-1,-1,-1,0,0,1,0,-3,0,0,-3,1,0,2,-2,0,0,-5],\n\t\t[19,298,333,-309,-320,-1,2,1,-3,-1,2,-2,-1,1,0,0,-1,-1,0,1,0,-2,-2,0,2,-1,0,0,-1,-2,2],\n\t\t[20,296,329,-309,-318,-1,0,1,-1,0,0,-2,0,2,-1,-1,0,0,1,0,-3,0,1,-3,1,2,-1,0,-1],\n\t\t[21,294,327,-309,-319,1,0,-1,-1,0,0,0,-1,1,-1,0,0,-2,0,2,0,0,-1,-2,1,0,-1],\n\t\t[22,292,323,-309,-318,1,-1,-1,-1,1,0,0,0,2,-1,-1,0,-1,-1,2,1,1,-1,-3,1,-1,-1],\n\t\t[23,290,318,-308,-316,-1,-2,1,0,1,0,0,-1,3,0,-1,0,-2,-2,4,0,-2,1,-1,0],\n\t\t[24,289,315,-309,-317,0,-1,1,-1,1,1,0,-2,3,1,-3,-2,2,0,4,2,-3,-1],\n\t\t[25,290,312,-313,-317,2,-2,1,-1,1,0,0,-1,3,0,-4,-1,5,-1,1,1],\n\t\t[26,291,310,-315,-320,3,-1,-1,-2,2,0,-2,-3,6,5,-2,-4,2,1],\n\t\t[27,292,308,-315,-320,1,-2,0,-1,2,-2,-1,0,5,3,-1,-1],\n\t\t[28,294,306,-316,-321,1,0,-1,-2,3,0,-1,-1,4,0],\n\t\t[29,296,305,-316,-322,0,0,1,-1,0,0,3,0,-1,0],\n\t\t[30,297,304,-314,-322,-2,-1,2,1,0,-2,4,5,-1,-5],\n\t\t[31,300,303,-314,-321,-2,-2,1,-1,1,1,5,6,-2,-3],\n\t\t[32,303,304,-315,-323,0,-1,1,-1,0,2,2,5,1,-1,1,4],\n\t\t[33,305,304,-314,-323,1,1,0,0,2,0,0,5,1,-1,1,4,0,-1],\n\t\t[34,307,305,-313,-323,1,1,0,0,1,2,0,1,1,1,1,3,0,0,-1,-2,0,1],\n\t\t[35,311,307,-311,-322,0,2,1,-3,-1,3,0,0,-1,0,1,3,0,0,0,0,0,0,0,-1,0,0],\n\t\t[36,313,308,-308,-320,-2,-1,1,0,-1,1,0,1,0,-1,0,2,-1,2,0,-2,1,-1,-1,1,0,0],\n\t\t[37,315,310,-306,-320,0,0,-1,-1,-1,2,0,-2,0,2,0,-1,-3,3,2,-2,0,0,-2,0,1,0],\n\t\t[38,318,312,-305,-319,0,0,0,-1,-1,1,1,-2,-2,2,-2,0,0,0,0,-1,0,0,-1,1],\n\t\t[39,320,314,-304,-319,0,0,0,-1,-1,1,2,-2,-3,1,-2,0,0,-1,-1,1,0,0]\n\t],\n\t[\n\t\t[0,321,316,-302,-318,0,0,-2,0,1,-2,2,0,-3,0],\n\t\t[1,322,317,-299,-316,-1,-1,-5,0,5,-2,1,0,-4,-1],\n\t\t[2,324,319,-298,-315,-3,-1,-1,-3,1,0,3,-1],\n\t\t[3,326,321,-297,-314,-3,0,0,-4,-2,-1,2,-2,-3,0],\n\t\t[4,328,323,-296,-311,-4,-3,0,-3,-3,0,-1,-1,1,-2,-5,1],\n\t\t[5,332,327,-300,-312,-3,-2,0,-3,-5,-2,-1,-1,0,0,-2,-2,-2,-1],\n\t\t[6,335,333,-303,-315,-4,-3,-1,-2,-1,-2,-4,-1,-1,-2,-2,0,-4,-3,1,0,-7,-1,0,-1,-1,-1],\n\t\t[7,338,338,-308,-317,-3,-4,0,0,-2,-3,-4,-3,-3,-1,-1,-2,-3,0,-2,-2,-4,-2,0,1,0,-1],\n\t\t[8,339,343,-310,-319,-3,-3,0,-2,-2,-2,-5,-5,-2,-1,-2,-3,-4,-1,-1,-1,-2,-1,0,0],\n\t\t[9,339,347,-312,-320,-2,-4,-1,-1,-2,-4,-2,-2,-4,-4,-3,-1,-5,-4,-1,-2,1,1,-2,-1],\n\t\t[10,338,350,-314,-320,0,-3,-2,-2,-2,-4,-2,-2,-4,-4,-3,-4,-4,-4,-2,-3,1,2,0,1],\n\t\t[11,337,353,-315,-323,0,-1,-1,-2,-3,-4,-1,-2,-4,-5,-3,-5,-4,-2,-1,-5,0,1],\n\t\t[12,335,354,-314,-323,-1,0,0,-2,-4,-5,-1,-1,-3,-5,-3,-5,-3,-4,-3,-4,2,2],\n\t\t[13,332,354,-314,-321,-1,-2,-1,0,-2,-4,0,0,-4,-6,-2,-7,-2,-1,-3,-8,1,3],\n\t\t[14,328,353,-312,-320,-3,-1,0,0,-2,-3,-1,0,-2,-4,-1,-4,-2,-5,-2,-6,0,0],\n\t\t[15,320,350,-313,-321,1,3,-2,-1,0,1,-1,-2,-2,0,0,1,-1,-4,-1,-5,0,2,-3,-5,2,6,0,0],\n\t\t[16,312,345,-310,-319,-1,4,0,-5,-1,5,-2,-3,0,3,-2,1,-1,0,0,-4,-1,-2,-2,1,1,2,-2,-2],\n\t\t[17,306,340,-310,-319,-1,3,-1,-4,0,3,0,-2,-2,3,0,0,-2,4,-1,-1,-1,-3,1,-1,-2,-3,-1,4],\n\t\t[18,302,336,-311,-320,-1,2,1,-3,-1,0,-1,1,0,-2,-2,2,-2,-1,1,-2,-1,0,0,-1,2,-2,-1,0],\n\t\t[19,299,332,-310,-318,-1,1,1,-2,1,-1,-3,1,0,-2,0,2,-2,0,1,-3,1,1,-1,-1],\n\t\t[20,297,329,-310,-318,-1,0,1,0,2,-3,-2,2,-3,-2,2,0,-1,1,2,-3,-1,2,0,-2],\n\t\t[21,295,327,-309,-319,-2,0,2,0,1,-2,-3,1,2,-1,0,0,-2,0,4,-2,-2,1],\n\t\t[22,293,323,-309,-317,-1,-1,1,-1,2,-1,-4,0,2,-1,0,0,0,-1,2,0],\n\t\t[23,291,319,-309,-317,-1,-1,1,0,4,-1,-5,0,3,0,-1,0,3,-1],\n\t\t[24,291,316,-312,-318,1,0,2,0,0,-2,0,2,2,-1,-2,0,3,-1],\n\t\t[25,291,313,-314,-319,2,1,2,-1,2,0,-1,0,1,0,-1,-1],\n\t\t[26,292,310,-316,-319,2,-2,4,2,0,0,-1,-3,3,3,-2,-1],\n\t\t[27,294,309,-319,-322,3,2,3,-1,2,1,0,1],\n\t\t[28,295,308,-319,-324,3,2,4,1,0,-2],\n\t\t[29,298,306,-320,-323,2,0,3,2,2,1],\n\t\t[30,299,306,-317,-325,-1,0,4,3,0,-1],\n\t\t[31,302,305,-318,-325,1,1,1,-2,4,3],\n\t\t[32,304,305,-317,-325,0,1,2,-2,0,2],\n\t\t[33,305,305,-314,-323,1,-1,0,0,1,0],\n\t\t[34,307,306,-314,-325,3,3,0,-2,-2,0,4,4,-1,1],\n\t\t[35,311,308,-310,-323,-1,1,-1,-3,0,2,-1,1,0,1,1,1],\n\t\t[36,313,309,-308,-321,-1,0,0,-3,0,2,0,2,-2,0,1,0],\n\t\t[37,315,311,-307,-321,1,0,-1,-1,1,2,-2,-1,1,0,-1,2],\n\t\t[38,317,313,-304,-320,0,0,-1,0,1,-1,-1,0,-3,1,2,1],\n\t\t[39,319,314,-303,-318,0,-1,-3,0,5,0,-3,-1,-2,1]\n\t],\n\t[\n\t\t[0,322,316,-302,-317,-1,0,-2,-2],\n\t\t[1,324,318,-303,-318,0,0,-2,0],\n\t\t[2,326,320,-304,-318,2,1,-4,-2],\n\t\t[3,329,322,-304,-315,1,-2,-4,-2],\n\t\t[4,332,326,-305,-316,0,-2,-2,-3],\n\t\t[5,334,329,-306,-316,-1,-1,-1,-3],\n\t\t[6,336,333,-308,-316,-1,-2,-2,-2,-1,-3],\n\t\t[7,337,338,-308,-319,-4,-1,-1,-2,0,-2,-8,-3],\n\t\t[8,338,343,-310,-319,-5,-6,0,-1,0,1,-6,-7,-2,0,1,0],\n\t\t[9,337,347,-311,-321,-4,-4,0,-4,-1,0,-3,-3,-1,-1,-4,-4,-2,-3,-2,2,-2,-5],\n\t\t[10,336,348,-312,-319,-3,-4,-2,-2,-1,-2,-1,-2,-2,-3,-3,-3,-2,-5,-4,-2,0,0],\n\t\t[11,335,351,-313,-322,-3,-2,0,-2,-2,-3,-2,-3,0,0,-4,-6,-2,-3,-4,-4,0,1],\n\t\t[12,334,352,-313,-322,-5,-3,3,1,-4,-5,0,-2,-2,0,-4,-8,-1,-1,-3,-5,0,0],\n\t\t[13,332,354,-316,-324,1,-1,-2,0,-2,-5,0,2,-3,-4,-2,-7,0,2,-4,-11,0,2],\n\t\t[14,328,354,-313,-324,-2,0,1,2,-4,-8,1,3,-4,-6,0,-1,-2,2,-2,-10,0,-4],\n\t\t[15,320,351,-313,-324,0,5,1,-3,-3,2,-1,-8,-1,2,0,2,0,-1,-2,-5,-2,-5],\n\t\t[16,312,346,-310,-322,-2,6,0,-7,0,8,0,-11,-1,6,-2,1,0,2,-1,-5,0,-4],\n\t\t[17,306,342,-309,-323,-2,5,0,-5,-2,4,3,-6,-2,6,0,0,-2,4,0,-1,2,-6],\n\t\t[18,301,337,-309,-321,-2,0,1,-1,0,-1,0,0,-2,0,1,0,-3,3],\n\t\t[19,298,333,-308,-320,-1,1,0,0,1,-3,0,1,-1,0,0,-1],\n\t\t[20,296,331,-308,-321,-1,0,0,0,3,-2,-3,1,1,0],\n\t\t[21,294,327,-308,-319,-1,0,1,-1,4,0,-4,-2,0,1],\n\t\t[22,293,323,-309,-316,1,-2,-1,0,3,-3,0,1,-4,0],\n\t\t[23,293,318,-313,-316,3,-1,-1,0,4,-1,-1,0],\n\t\t[24,293,315,-316,-317,4,0,2,1,2,-1,-1,-1],\n\t\t[25,293,313,-316,-318,2,1,4,-1,0,-1],\n\t\t[26,294,312,-320,-322,6,4,2,-2],\n\t\t[27,295,310,-321,-322,6,1],\n\t\t[28,296,309,-320,-324,3,1],\n\t\t[29,298,307,-318,-324,2,1],\n\t\t[30,299,307,-316,-326,0,1],\n\t\t[31,302,307,-318,-328,3,3],\n\t\t[32,303,307,-315,-328,1,3],\n\t\t[33,305,307,-314,-326,2,1],\n\t\t[34,307,307,-312,-325,1,3,0,-1],\n\t\t[35,310,308,-309,-322,-1,0,0,0],\n\t\t[36,313,309,-309,-321,0,-1,1,2,-3,2],\n\t\t[37,315,311,-307,-321,1,0,-2,1,-2,2],\n\t\t[38,318,313,-304,-319,-1,-1,-3,0,-2,2],\n\t\t[39,320,314,-305,-318,1,-1,-2,1]\n\t]\n];\n", "/**\n * KD Tree\n *\n * @author Takuto Yanagida\n * @version 2024-11-12\n */\n\ntype Pair = [number, number];\n\nclass Node {\n\tp: Pair;\n\tq: Pair;\n\tnl: Node | null;\n\tnr: Node | null;\n\n\tconstructor(p: Pair, q: Pair, nl: Node | null, nr: Node | null) {\n\t\tthis.p = p;\n\t\tthis.q = q;\n\t\tthis.nl = nl;\n\t\tthis.nr = nr;\n\t}\n}\n\nexport class Tree {\n\troot: Node | null = null;\n\tk: number;\n\n\tconstructor(ps: [Pair, Pair][], k: number = 2) {\n\t\tthis.k = k;\n\t\tthis.root = this.#build(ps, 0);\n\t}\n\n\t#build(ps: [Pair, Pair][], dep: number): Node | null {\n\t\tif (ps.length === 0) return null;\n\n\t\tconst ax = dep % this.k;\n\t\tps.sort(([p0, ], [p1, ]) => (p0[ax] - p1[ax]));\n\n\t\tconst med = Math.floor(ps.length / 2);\n\t\treturn new Node(\n\t\t\tps[med][0],\n\t\t\tps[med][1],\n\t\t\tthis.#build(ps.slice(0, med), dep + 1),\n\t\t\tthis.#build(ps.slice(med + 1), dep + 1),\n\t\t);\n\t}\n\n\t#dist(p0: Pair, p1: Pair): number {\n\t\treturn Math.sqrt((p0[0] - p1[0]) * (p0[0] - p1[0]) + (p0[1] - p1[1]) * (p0[1] - p1[1]));\n\t}\n\n\tneighbors(tar: Pair, size: number): [Pair, number][] {\n\t\tconst rs: { n: Node, d: number }[] = [];\n\n\t\tconst search = (n: Node | null, dep: number) => {\n\t\t\tif (n === null) return;\n\n\t\t\tconst ax = dep % this.k;\n\t\t\tconst d = this.#dist(tar, n.p);\n\n\t\t\tif (rs.length < size) {\n\t\t\t\trs.push({ n, d });\n\t\t\t\trs.sort((a, b) => a.d - b.d);\n\t\t\t} else if (d < rs[rs.length - 1].d) {\n\t\t\t\trs[rs.length - 1] = { n, d };\n\t\t\t\trs.sort((a, b) => a.d - b.d);\n\t\t\t}\n\n\t\t\tconst nb: Node | null = tar[ax] < n.p[ax] ? n.nl : n.nr;\n\t\t\tconst ob: Node | null = nb === n.nl ? n.nr : n.nl;\n\n\t\t\tsearch(nb, dep + 1);\n\n\t\t\tif (rs.length < size || Math.abs(tar[ax] - n.p[ax]) < rs[rs.length - 1].d) {\n\t\t\t\tsearch(ob, dep + 1);\n\t\t\t}\n\t\t};\n\n\t\tsearch(this.root, 0);\n\t\treturn rs.map(r => [r.n.q, r.d]);\n\t}\n}\n", "/**\n * This class converts the PCCS color system.\n * Colors where h is -1 are handled especially as an achromatic color (n).\n * Reference: KOBAYASHI Mituo and YOSIKI Kayoko,\n * Mathematical Relation among PCCS Tones, PCCS Color Attributes and Munsell Color Attributes,\n * Journal of the Color Science Association of Japan 25(4), 249-261, 2001.\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet, Quartet } from '../type';\nimport { PI2 } from '../math';\n\nimport * as Munsell from './munsell';\n\n// Hue [0, 24), 24 is also acceptable\nexport const MIN_HUE: number = 0;\nexport const MAX_HUE: number = 24;\nexport const MONO_LIMIT_S: number = 0.01;\n\nconst HUE_NAMES: string[]  = ['', 'pR', 'R', 'yR', 'rO', 'O', 'yO', 'rY', 'Y', 'gY', 'YG', 'yG', 'G', 'bG', 'GB', 'GB', 'gB', 'B', 'B', 'pB', 'V', 'bP', 'P', 'rP', 'RP'];\nconst TONE_NAMES: string[] = ['p', 'p+', 'ltg', 'g', 'dkg', 'lt', 'lt+', 'sf', 'd', 'dk', 'b', 's', 'dp', 'v', 'none'];\nconst MUNSELL_H: number[] = [\n\t96,  // Dummy\n\t0,  4,  7, 10, 14, 18, 22, 25, 28, 33, 38, 43,\n\t49, 55, 60, 65, 70, 73, 76, 79, 83, 87, 91, 96, 100\n];\nconst COEFFICIENTS: Triplet[] = [\n\t[0.853642,  0.084379, -0.002798],  // 0 === 24\n\t[1.042805,  0.046437,  0.001607],  // 2\n\t[1.079160,  0.025470,  0.003052],  // 4\n\t[1.039472,  0.054749, -0.000511],  // 6\n\t[0.925185,  0.050245,  0.000953],  // 8\n\t[0.968557,  0.012537,  0.003375],  // 10\n\t[1.070433, -0.047359,  0.007385],  // 12\n\t[1.087030, -0.051075,  0.006526],  // 14\n\t[1.089652, -0.050206,  0.006056],  // 16\n\t[0.880861,  0.060300, -0.001280],  // 18\n\t[0.897326,  0.053912, -0.000860],  // 20\n\t[0.887834,  0.055086, -0.000847],  // 22\n\t[0.853642,  0.084379, -0.002798],  // 24\n];\n\n/**\n * Enum type for conversion methods.\n */\nexport const ConversionMethod = Object.freeze({\n\t/**\n\t * Concise conversion\n\t */\n\tConcise: {\n\t\tcalcMunsellH: simplyCalcMunsellH,\n\t\tcalcMunsellS: simplyCalcMunsellC,\n\t\tcalcPccsH: simplyCalcPccsH,\n\t\tcalcPccsS: simplyCalcPccsS,\n\t},\n\n\t/**\n\t * Accurate conversion\n\t */\n\tAccurate: {\n\t\tcalcMunsellH: calcMunsellH,\n\t\tcalcMunsellC: calcMunsellC,\n\t\tcalcPccsH: calcPccsH,\n\t\tcalcPccsS: calcPccsS,\n\t}\n});\n\nexport function setConversionMethod(cm: { calcMunsellH: (h: number) => number; calcMunsellC: (h: number, l: number, s: number) => number; calcPccsH: (h: number) => number; calcPccsS: (V: number, C: number, h: number) => number } ) {\n\tconversionMethod = cm;\n}\n\n/**\n * Indicates the currently selected color vision characteristic conversion method.\n */\nexport let conversionMethod = ConversionMethod.Accurate;\n\n/**\n * Enum type for Tone.\n */\nexport enum Tone {\n\tp,\n\tp_p,\n\tltg,\n\tg,\n\tdkg,\n\tlt,\n\tlt_p,\n\tsf,\n\td,\n\tdk,\n\tb,\n\ts,\n\tdp,\n\tv,\n\tnone,\n};\n\n\n// Calculation of PCCS value (accurate) ----------------------------------------\n\n\nfunction calcPccsH(H: number): number {\n\tlet h1: number = -1;\n\tlet h2: number = -1;\n\tfor (let i: number = 1; i < MUNSELL_H.length; ++i) {\n\t\tif (MUNSELL_H[i] <= H) h1 = i;\n\t\tif (H < MUNSELL_H[i]) {\n\t\t\th2 = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (h1 === -1) console.error(\"h1 is -1, H = \" + H);\n\tif (h2 === -1) console.error(\"h2 is -1, H = \" + H);\n\treturn h1 + (h2 - h1) * (H - MUNSELL_H[h1]) / (MUNSELL_H[h2] - MUNSELL_H[h1]);\n}\n\nfunction calcPccsS(V: number, C: number, h: number): number {\n\tconst a: Quartet = calcInterpolatedCoefficients(h);\n\tconst g: number = 0.81 - 0.24 * Math.sin((h - 2.6) / 12 * Math.PI);\n\tconst a0: number = -C / (1 - Math.exp(-g * V));\n\treturn solveEquation(simplyCalcPccsS(V, C, h), a[3], a[2], a[1], a0);\n}\n\nfunction calcInterpolatedCoefficients(h: number): Quartet {\n\tif (MAX_HUE < h) h -= MAX_HUE;\n\tlet hf: number = 0 | Math.floor(h);\n\tif (hf % 2 !== 0) --hf;\n\tlet hc: number = hf + 2;\n\tif (MAX_HUE < hc) hc -= MAX_HUE;\n\n\tconst af: Triplet = COEFFICIENTS[hf / 2], ac: Triplet = COEFFICIENTS[hc / 2], a: Quartet = [0, 0, 0, 0];\n\tfor (let i: number = 0; i < 3; ++i) {\n\t\ta[i + 1] = (h - hf) / (hc - hf) * (ac[i]- af[i]) + af[i];\n\t}\n\treturn a;\n}\n\nfunction solveEquation(x0: number, a3: number, a2: number, a1: number, a0: number): number {\n\tlet x: number = x0;\n\twhile (true) {\n\t\tconst y: number = a3 * x * x * x + a2 * x * x + a1 * x + a0;\n\t\tconst yp: number = 3 * a3 * x * x + 2 * a2 * x + a1;\n\t\tconst x1: number = -y / yp + x;\n\t\tif (Math.abs(x1 - x) < 0.001) break;\n\t\tx = x1;\n\t}\n\treturn x;\n}\n\n\n// Calculation of Munsell value (accurate) -------------------------------------\n\n\nfunction calcMunsellH(h: number): number {\n\tconst h1: number = 0 | Math.floor(h);\n\tconst h2: number = h1 + 1;\n\tlet H1: number = MUNSELL_H[h1];\n\tlet H2: number = MUNSELL_H[h2];\n\tif (H1 > H2) H2 = 100;\n\treturn H1 + (H2 - H1) * (h - h1) / (h2 - h1);\n}\n\nfunction calcMunsellC(h: number, l: number, s: number): number {\n\tconst a: Quartet = calcInterpolatedCoefficients(h);\n\tconst g: number = 0.81 - 0.24 * Math.sin((h - 2.6) / 12 * Math.PI);\n\treturn (a[3] * s * s * s + a[2] * s * s + a[1] * s) * (1 - Math.exp(-g * l));\n}\n\n\n// Calculation of PCCS value (concise) -----------------------------------------\n\n\nfunction simplyCalcPccsH(H: number): number {\n\tconst y: number = H * Math.PI / 50;\n\treturn 24 * y / PI2 + 1.24\n\t\t\t+ 0.02 * Math.cos(y) - 0.1 * Math.cos(2 * y) - 0.11  * Math.cos(3 * y)\n\t\t\t+ 0.68 * Math.sin(y) - 0.3 * Math.sin(2 * y) + 0.013 * Math.sin(3 * y);\n}\n\nfunction simplyCalcPccsS(V: number, C: number, h: number): number {\n\tconst Ct: number = 12 + 1.7 * Math.sin((h + 2.2) * Math.PI / 12);\n\tconst gt: number = 0.81 - 0.24 * Math.sin((h - 2.6) * Math.PI / 12);\n\tconst e2 = 0.004, e1 = 0.077, e0: number = -C / (Ct * (1 - Math.exp(-gt * V)));\n\treturn (-e1 + Math.sqrt(e1 * e1 - 4 * e2 * e0)) / (2 * e2);\n}\n\n\n// Calculation of Munsell value (concise) --------------------------------------\n\n\nfunction simplyCalcMunsellH(h: number): number {\n\tconst x: number = (h - 1) * Math.PI / 12;\n\treturn 100 * x / PI2 - 1\n\t\t\t+ 0.12 * Math.cos(x) + 0.34 * Math.cos(2 * x) + 0.4 * Math.cos(3 * x)\n\t\t\t- 2.7  * Math.sin(x) + 1.5  * Math.sin(2 * x) - 0.4 * Math.sin(3 * x);\n}\n\nfunction simplyCalcMunsellC(h: number, l: number, s: number): number {\n\tconst Ct: number = 12 + 1.7 * Math.sin((h + 2.2) * Math.PI / 12);\n\tconst gt: number = 0.81 - 0.24 * Math.sin((h - 2.6) * Math.PI / 12);\n\treturn Ct * (0.077 * s + 0.0040 * s * s) * (1 - Math.exp(-gt * l));\n}\n\n\n// Munsell ---------------------------------------------------------------------\n\n\n/**\n * Convert Munsell (HVC) to PCCS (hls).\n * @param {Triplet} hvc Hue, value, chroma of Munsell color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} PCCS color.\n */\nexport function fromMunsell([H, V, C]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tlet h: number = 0;\n\tlet s: number = 0;\n\n\tif (Munsell.MAX_HUE <= H) H -= Munsell.MAX_HUE;\n\th = conversionMethod.calcPccsH(H);\n\tif (Munsell.MONO_LIMIT_C <= C) {\n\t\ts = conversionMethod.calcPccsS(V, C, h);\n\t}\n\tif (MAX_HUE <= h) h -= MAX_HUE;\n\n\tdest[0] = h;\n\tdest[1] = V;\n\tdest[2] = s;\n\treturn dest;\n}\n\n/**\n * Convert PCCS (hls) to Munsell (HVC).\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Munsell color.\n */\nexport function toMunsell([h, l, s]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tlet H: number = 0;\n\tlet C: number = 0;\n\n\tH = conversionMethod.calcMunsellH(h);\n\tif (MONO_LIMIT_S <= s) {\n\t\tC = conversionMethod.calcMunsellC(h, l, s);\n\t}\n\tif (H < 0) H += Munsell.MAX_HUE;\n\tif (Munsell.MAX_HUE <= H) H -= Munsell.MAX_HUE;\n\n\tdest[0] = H;\n\tdest[1] = l;\n\tdest[2] = C;\n\treturn dest;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Calculate tone.\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color\n * @return {number} Tone\n */\nexport function tone(hls: Triplet): number {\n\tconst s: number = hls[2];\n\tconst t: number = relativeLightness(hls);\n\tconst tu: number = s * -3 / 10 + 8.5;\n\tconst td: number = s * 3 / 10 + 2.5;\n\n\tif (s < 1) {\n\t\treturn Tone.none;\n\t} else if (1 <= s && s < 4) {\n\t\tif (t < td)  return Tone.dkg;\n\t\tif (t < 5.5) return Tone.g;\n\t\tif (t < tu)  return Tone.ltg;\n\t\tif (s < 2.5) return Tone.p;\n\t\treturn Tone.p_p;\n\t} else if (4 <= s && s < 7) {\n\t\tif (t < td)  return Tone.dk;\n\t\tif (t < 5.5) return Tone.d;\n\t\tif (t < tu)  return Tone.sf;\n\t\tif (s < 5.5) return Tone.lt;\n\t\treturn Tone.lt_p;\n\t} else if (7 <= s && s < 8.5) {\n\t\tif (t < td) return Tone.dp;\n\t\tif (t < tu) return Tone.s;\n\t\treturn Tone.b;\n\t} else {\n\t\treturn Tone.v;\n\t}\n}\n\n/**\n * Return relative lightness (lightness in tone coordinate system).\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color\n * @return {Triplet} Relative lightness L\n */\nexport function relativeLightness([h, l, s]: Triplet): number {\n\treturn l - (0.25 - 0.34 * Math.sqrt(1 - Math.sin((h - 2) * Math.PI / 12))) * s;\n}\n\n/**\n * Return absolute lightness (lightness in PCCS).\n * @param {Triplet} hLs Tone coordinate color\n * @return {Triplet} Absolute lightness l\n */\nexport function absoluteLightness([h, L, s]: Triplet): number {\n\treturn L + (0.25 - 0.34 * Math.sqrt(1 - Math.sin((h - 2) * Math.PI / 12))) * s;\n}\n\n/**\n * Convert PCCS color to tone coordinate color.\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Tone coordinate color.\n */\nexport function toToneCoordinate(hls: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = hls[0];\n\tdest[1] = relativeLightness(hls);\n\tdest[2] = hls[2];\n\treturn dest;\n}\n\n/**\n * Convert tone coordinate color to PCCS color.\n * @param {Triplet} hLs Tone coordinate color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} PCCS color.\n */\nexport function toNormalCoordinate(hLs: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = hLs[0];\n\tdest[1] = absoluteLightness(hLs);\n\tdest[2] = hLs[2];\n\treturn dest;\n}\n\n/**\n * Returns the string representation of PCCS numerical representation.\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color\n * @return {string} String representation\n */\nexport function toString(hls: Triplet): string {\n\tconst str_l: number = Math.round(hls[1] * 10) / 10;\n\tif (hls[2] < MONO_LIMIT_S) {\n\t\tif (9.5 <= hls[1]) return `W N-${str_l}`;\n\t\tif (hls[1] <= 1.5) return `Bk N-${str_l}`;\n\t\treturn `Gy-${str_l} N-${str_l}`;\n\t} else {\n\t\tconst str_h: number = Math.round(hls[0] * 10) / 10;\n\t\tconst str_s: number = Math.round(hls[2] * 10) / 10;\n\n\t\tlet tn: number = Math.round(hls[0]);\n\t\tif (tn <= 0) tn = MAX_HUE;\n\t\tif (MAX_HUE < tn) tn -= MAX_HUE;\n\t\tconst hue: string = HUE_NAMES[tn];\n\t\tconst t: string = TONE_NAMES[tone(hls)];\n\n\t\tif (t === 'none') return `${str_h}:${hue}-${str_l}-${str_s}s`;\n\t\treturn `${t}${str_h} ${str_h}:${hue}-${str_l}-${str_s}s`;\n\t}\n}\n\n/**\n * Returns the string representation of PCCS hues.\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color\n * @return {string} String representation of hues\n */\nexport function toHueString([h,, s]: Triplet): string {\n\tif (s < MONO_LIMIT_S) {\n\t\treturn 'N';\n\t} else {\n\t\tlet tn: number = Math.round(h);\n\t\tif (tn <= 0) tn = MAX_HUE;\n\t\tif (MAX_HUE < tn) tn -= MAX_HUE;\n\t\treturn HUE_NAMES[tn];\n\t}\n}\n\n/**\n * Returns the string representation of PCCS tones.\n * @param {Triplet} hls Hue, lightness, saturation of PCCS color\n * @return {string} String representation of tones\n */\nexport function toToneString(hls: Triplet): string {\n\tif (hls[2] < MONO_LIMIT_S) {\n\t\tif (9.5 <= hls[1]) return 'W';\n\t\tif (hls[1] <= 1.5) return 'Bk';\n\t\treturn 'Gy';\n\t} else {\n\t\treturn TONE_NAMES[tone(hls)];\n\t}\n}\n", "/**\n * This class converts the Munsell (HVC) color system.\n * D65 is used as tristimulus value.\n * Since conversion is performed by approximation based on the distance to the sample color, the conversion result is approximate value.\n * Also, when H is -1, it is regarded as an achromatic color (N) in particular.\n * Reference: https://www.rit.edu/science/munsell-color-science-lab-educational-resources#munsell-renotation-data\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { TBL_SRC_MIN, TBL_V } from '../table/hc2xy-all-min';\nimport { Tree } from '../lib/kdt';\nimport { Pair, Triplet } from '../type';\n\nimport { toIlluminantC as xyz2c,  fromIlluminantC as c2xyz } from './xyz';\nimport { fromXyz as xyz2xyy, toXyz as xyy2xyz }  from './xyy';\n\nexport { toMunsell as fromPccs, fromMunsell as toPccs } from './pccs';\n\nfunction eq0(x: number): boolean {\n\treturn Math.abs(x) < EP;\n}\n\nfunction eq(x0: number, x1: number): boolean {\n\treturn Math.abs(x0 - x1) < EP;\n}\n\nfunction div(a: Pair, b: Pair, r: number): Pair {\n\treturn [(b[0] - a[0]) * r + a[0], (b[1] - a[1]) * r + a[1]];\n}\n\nfunction cross(ax: number, ay: number, bx: number, by: number): number {\n\treturn ax * by - ay * bx;\n}\n\n// Whether a point (x, y) exists within the interior (including the boundary) of the clockwise triangle abc\n// in the mathematical coordinate system (positive on the y axis is upward)\nfunction inside(p: Pair, a: Pair, b: Pair, c: Pair): boolean {\n\t// If x, y are on the right side of ab, the point is outside the triangle\n\tif (cross(p[0] - a[0], p[1] - a[1], b[0] - a[0], b[1] - a[1]) < 0) return false;\n\t// If x, y are on the right side of bc, the point is outside the triangle\n\tif (cross(p[0] - b[0], p[1] - b[1], c[0] - b[0], c[1] - b[1]) < 0) return false;\n\t// If x, y are on the right side of ca, the point is outside the triangle\n\tif (cross(p[0] - c[0], p[1] - c[1], a[0] - c[0], a[1] - c[1]) < 0) return false;\n\treturn true;\n}\n\nconst HUE_NAMES: string[] = ['R', 'YR', 'Y', 'GY', 'G', 'BG', 'B', 'PB', 'P', 'RP'];  // 1R = 1, 9RP = 99, 10RP = 0\nconst EP = 0.0000000000001;\nconst ILLUMINANT_C: Pair = [0.3101, 0.3162];  // Standard illuminant C, white point\n\nlet TBL_MAX_C: number[][];\nlet TBL: (Pair | null)[][][];  // [vi][10 * h / 25][c / 2] -> [x, y]\nlet TBL_TREES: Tree[] = [];\n\nexport const MIN_HUE = 0;\nexport const MAX_HUE = 100;  // Same as MIN_HUE\nexport const MONO_LIMIT_C = 0.05;\n\nexport let isSaturated: boolean = false;\n\ninitTable(TBL_V, TBL_SRC_MIN);\n\nfunction initTable(tbl_v: number[], tbl_src_min: number[][][]): void {\n\tTBL       = new Array(tbl_v.length);  // [vi][10 * h / 25][c / 2] -> [x, y]\n\tTBL_MAX_C = new Array(tbl_v.length);\n\tTBL_TREES = new Array(tbl_v.length);\n\n\tfor (let vi: number = 0; vi < tbl_v.length; vi += 1) {\n\t\tTBL[vi]       = new Array(1000 / 25);\n\t\tTBL_MAX_C[vi] = new Array(1000 / 25);\n\t\tTBL_MAX_C[vi].fill(0);\n\n\t\tfor (let i: number = 0, n: number = 1000 / 25; i < n; i += 1) {\n\t\t\tTBL[vi][i] = new Array(50 / 2 + 2);  // 2 <= C <= 52\n\t\t\tTBL[vi][i].fill(null);\n\t\t}\n\t\tconst data: [Pair, Pair][] = [];\n\n\t\tfor (const cs of tbl_src_min[vi]) {\n\t\t\tconst hi = cs.shift() as number;\n\t\t\tintegrate(cs);\n\t\t\tintegrate(cs);\n\n\t\t\tfor (let i: number = 0; i < cs.length; i += 2) {\n\t\t\t\tconst ci: number = i / 2 + 1;\n\t\t\t\tconst x: number = cs[i + 0] / 1000;\n\t\t\t\tconst y: number = cs[i + 1] / 1000;\n\n\t\t\t\tTBL[vi][hi][ci] = [x, y];\n\t\t\t\tdata.push([[x, y], [hi * 25, ci * 2]]);\n\t\t\t}\n\t\t\tTBL_MAX_C[vi][hi] = cs.length - 2;\n\t\t}\n\t\tTBL_TREES[vi] = new Tree(data);\n\t}\n\n\tfunction integrate(cs: number[]): void {\n\t\tlet x_: number = 0;\n\t\tlet y_: number = 0;\n\n\t\tfor (let i: number = 0; i < cs.length; i += 2) {\n\t\t\tx_ += cs[i];\n\t\t\ty_ += cs[i + 1];\n\t\t\tcs[i]     = x_;\n\t\t\tcs[i + 1] = y_;\n\t\t}\n\t}\n}\n\nfunction getXy(vi: number, ht: number, c: number): Pair | null {\n\tif (c === 0) return ILLUMINANT_C;\n\tif (1000 <= ht) ht -= 1000;\n\treturn TBL[vi][ht / 25][c / 2];\n}\n\nfunction getMaxC(vi: number, ht: number): number {\n\tif (1000 <= ht) ht -= 1000;\n\tif (ht < 0) ht += 1000;\n\treturn TBL_MAX_C[vi][ht / 25];\n}\n\n// Find Y of XYZ (C) from Munsell's V (JIS).\nfunction v2y(v: number): number {\n\tif (v <= 1) return v * 0.0121;\n\tconst v2: number = v * v;\n\tconst v3: number = v2 * v;\n\tconst y: number = 0.0467 * v3 + 0.5602 * v2 - 0.1753 * v + 0.8007;\n\treturn y / 100;\n}\n\n// Munsell's V is obtained from Y of XYZ (C) (JIS, Newton's method).\nfunction y2v(y: number): number {\n\tif (y <= 0.0121) return y / 0.0121;\n\tlet v: number = 10;\n\tfor (let i: number = 0; i < 1000; ++i) {  // Max iteration is 1000.\n\t\tconst f: number = v2y(v) - y;\n\t\tconst fp: number =  (v <= 1) ? 0.0121 : ((3 * 0.0467 * (v * v) + 2 * 0.5602 * v - 0.1753) / 100);\n\t\tif (Math.abs(f) < 0.0001) break;\n\t\tv = v - f / fp;\n\t}\n\treturn v;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n// Find the Munsell value from xyY (standard illuminant C).\nfunction xyy2mun([sx, sy, y]: Triplet): Triplet {\n\tconst v: number = y2v(y);  // Find Munsell lightness\n\tisSaturated = false;\n\n\t// When the lightness is maximum 10\n\tif (eq(v, TBL_V.at(-1) as number)) {\n\t\tconst [h, c] = scanHC(sx, sy, TBL_V.length - 1);\n\t\treturn [h, v, c];\n\t}\n\t// When the lightness is 0 or the lightness is larger than the maximum 10, or when it is an achromatic color (standard illuminant C)\n\tif (eq0(v) || TBL_V.at(-1) as number < v || (eq(sx, ILLUMINANT_C[0]) && eq(sy, ILLUMINANT_C[1]))) {\n\t\treturn [0, v, 0];\n\t}\n\t// Obtain lower side\n\tlet vi_l: number = -1;\n\twhile (TBL_V[vi_l + 1] <= v) ++vi_l;\n\tlet hc_l: Pair = [0, 0] as Pair;  // Hue and chroma of the lower side\n\tif (vi_l !== -1) hc_l = scanHC(sx, sy, vi_l);\n\n\t// Obtain upper side\n\tconst vi_u: number = vi_l + 1;\n\tconst hc_u: Pair = scanHC(sx, sy, vi_u);\n\n\t// When the lightness on the lower side is the minimum 0, the hue is matched with the upper side, and the chroma is set to 0\n\tif (vi_l === -1) {\n\t\thc_l[0] = hc_u[0];\n\t\thc_l[1] = 0;\n\t}\n\tconst v_l: number = ((vi_l === -1) ? 0 : TBL_V[vi_l]);\n\tconst v_h: number = TBL_V[vi_u];\n\tconst r: number = (v - v_l) / (v_h - v_l);\n\n\tconst [h, c] = calcIdpHc(hc_l, hc_u, r);\n\treturn [h, v, c];\n}\n\n// Acquires the hue and chroma for the chromaticity coordinates (x, y) on the surface of the given lightness index.\n// If not included, -1 is returned.\nfunction scanHC(x: number, y: number, vi: number): Pair {\n\tconst p = [x, y] as Pair;\n\tconst [[q, ],] = TBL_TREES[vi].neighbors(p, 1);\n\tlet ht0: number = q[0] - 125;\n\tlet ht1: number = q[0] + 125;\n\n\tif (ht0 < 0 && ht1 < ht0 + 1000) {\n\t\tht0 += 1000;\n\t\tht1 += 1000;\n\t}\n\n\tfor (let ht_l: number = ht0; ht_l <= ht1; ht_l += 25) {  // h 0-975 step 25;\n\t\tinner:\n\t\tfor (let c_l: number = 0; c_l <= 50; c_l += 2) {  // c 0-50 step 2;\n\t\t\tconst [hc_r, state] = scanOneHC(p, vi, ht_l, c_l);\n\t\t\tif (state === 'h') break inner;\n\t\t\tif (hc_r) {\n\t\t\t\treturn [\n\t\t\t\t\t(25 * hc_r[0] + ht_l) / 10,\n\t\t\t\t\t2 * hc_r[1] + c_l\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\tconst ps: [Pair, number][] = TBL_TREES[vi].neighbors(p, 2);\n\tif (2 === ps.length) {\n\t\tisSaturated = true;\n\t\tlet [[[ht0, c0], d0], [[ht1, c1], d1]] = ps;\n\t\tconst r: number = d0 / (d0 + d1);\n\t\treturn calcIdpHc([ht0 / 10, c0], [ht1 / 10, c1], r);\n\t}\n\treturn [0, 0];\n}\n\nfunction scanOneHC(p: Pair, vi: number, ht_l: number, c_l: number): [Pair | null, string] {\n\tlet hc_r: Pair | null = null;\n\n\tconst wa: Pair | null = getXy(vi, ht_l, c_l);\n\tconst wb: Pair | null = getXy(vi, ht_l + 25, c_l);\n\tlet wc: Pair | null = getXy(vi, ht_l + 25, c_l + 2);\n\tlet wd: Pair | null = getXy(vi, ht_l, c_l + 2);\n\n\tif (wa === null && wb === null) return [null, 'h'];\n\n\tif (c_l !== 0) {\n\t\tif (wa && wb && wc && !wd) {\n\t\t\twd = [wa[0] + (wc[0] - wb[0]), wa[1] + (wc[1] - wb[1])]\n\t\t} else if (wa && wb && !wc && wd) {\n\t\t\twc = [wb[0] + (wd[0] - wa[0]), wb[1] + (wd[1] - wa[1])]\n\t\t}\n\t}\n\tif (wa === null || wb === null || wc === null || wd === null) return [null, ''];\n\n\tif (c_l === 0) {\n\t\tif (inside(p, wa, wc, wd)) {\n\t\t\thc_r = interpolationR(p, wa, wd, wb, wc);\n\t\t}\n\t} else {\n\t\tif (inside(p, wa, wc, wd) || inside(p, wa, wb, wc)) {\n\t\t\thc_r = interpolationR(p, wa, wd, wb, wc);\n\t\t}\n\t}\n\treturn [hc_r, ''];\n\n\t/*\n\t\t* Calculate the proportion [h, v] of each point in the area surrounded by the points of the following placement (null if it is invalid).\n\t\t*  ^\n\t\t* y| B C      \u2196H (Direction of rotation) \u2197C (Radial direction)\n\t\t*  | A D\n\t\t*  ------> x\n\t\t*/\n\tfunction interpolationR(p: Pair, wa: Pair, wd: Pair, wb: Pair, wc: Pair): Pair | null {\n\t\t// Find the ratio in the vertical direction\n\t\tlet v: number = -1;\n\n\t\t// Solve a v^2 + b v + c = 0\n\t\tconst ea: number = (wa[0] - wd[0]) * (wa[1] + wc[1] - wb[1] - wd[1]) - (wa[0] + wc[0] - wb[0] - wd[0]) * (wa[1] - wd[1]);\n\t\tconst eb: number = (p[0] - wa[0]) * (wa[1] + wc[1] - wb[1] - wd[1]) + (wa[0] - wd[0]) * (wb[1] - wa[1]) - (wa[0] + wc[0] - wb[0] - wd[0]) * (p[1] - wa[1]) - (wb[0] - wa[0]) * (wa[1] - wd[1]);\n\t\tconst ec: number = (p[0] - wa[0]) * (wb[1] - wa[1]) - (p[1] - wa[1]) * (wb[0] - wa[0]);\n\n\t\tif (eq0(ea)) {\n\t\t\tif (!eq0(eb)) v = -ec / eb;\n\t\t} else {\n\t\t\tconst rt: number = Math.sqrt(eb * eb - 4 * ea * ec);\n\t\t\tconst v1: number = (-eb + rt) / (2 * ea), v2 = (-eb - rt) / (2 * ea);\n\n\t\t\tif (wa[0] === wb[0] && wa[1] === wb[1]) {  // In this case, v1 is always 0, but this is not a solution.\n\t\t\t\tif (0 <= v2 && v2 <= 1) v = v2;\n\t\t\t} else {\n\t\t\t\tif      (0 <= v1 && v1 <= 1) v = v1;\n\t\t\t\telse if (0 <= v2 && v2 <= 1) v = v2;\n\t\t\t}\n\t\t}\n\t\tif (v < 0) return null;\n\n\t\t// Find the ratio in the horizontal direction\n\t\tlet h: number = -1, h1: number = -1, h2: number = -1;\n\t\tconst deX: number = (wa[0] - wd[0] - wb[0] + wc[0]) * v - wa[0] + wb[0];\n\t\tconst deY: number = (wa[1] - wd[1] - wb[1] + wc[1]) * v - wa[1] + wb[1];\n\n\t\tif (!eq0(deX)) h1 = ((wa[0] - wd[0]) * v + p[0] - wa[0]) / deX;\n\t\tif (!eq0(deY)) h2 = ((wa[1] - wd[1]) * v + p[1] - wa[1]) / deY;\n\n\t\tif      (0 <= h1 && h1 <= 1) h = h1;\n\t\telse if (0 <= h2 && h2 <= 1) h = h2;\n\n\t\tif (h < 0) return null;\n\n\t\treturn [h, v];\n\t}\n}\n\nfunction calcIdpHc([h0, c0]: Pair, [h1, c1]: Pair, r: number): Pair {\n\tif (Math.abs(h1 - h0) > MAX_HUE * 0.5) {\n\t\tif (h0 < h1) h0 += MAX_HUE;\n\t\telse if (h0 > h1) h1 += MAX_HUE;\n\t}\n\n\tlet h: number = (h1 - h0) * r + h0;\n\tif (MAX_HUE <= h) h -= MAX_HUE;\n\tlet c: number = (c1 - c0) * r + c0;\n\tif (c < MONO_LIMIT_C) c = 0;\n\treturn [h, c];\n}\n\n\n// -----------------------------------------------------------------------------\n\n\nfunction mun2xyy([h, v, c]: Triplet): Triplet {\n\tif (MAX_HUE <= h) h -= MAX_HUE;\n\tconst Y: number = v2y(v);\n\tisSaturated = false;\n\n\t// When the lightness is 0 or achromatic (check this first)\n\tif (eq0(v) || h < 0 || c < MONO_LIMIT_C) {\n\t\tisSaturated = eq0(v) && 0 < c;\n\t\treturn [...ILLUMINANT_C, Y];\n\t}\n\t// When the lightness is the maximum value 10 or more\n\tconst v_max = TBL_V.at(-1) as number;\n\tif (v_max <= v) {\n\t\tconst xy: [number, number, boolean] = scanXY(h, c, TBL_V.length - 1);\n\t\tisSaturated = (v_max < v);\n\t\treturn [xy[0], xy[1], Y];\n\t}\n\tlet vi_l: number = -1;\n\twhile (TBL_V[vi_l + 1] <= v) ++vi_l;\n\tconst vi_u: number = vi_l + 1;\n\n\t// Obtain lower side\n\tlet xy_l: [number, number, boolean];\n\tif (vi_l !== -1) {\n\t\txy_l = scanXY(h, c, vi_l);\n\t} else {  // When the lightness of the lower side is the minimum 0, use standard illuminant.\n\t\txy_l = [...ILLUMINANT_C, false];\n\t\tisSaturated = true;\n\t}\n\t// Obtain upper side\n\tconst xy_u: [number, number, boolean] = scanXY(h, c, vi_u);\n\n\tconst v_l: number = ((vi_l === -1) ? 0 : TBL_V[vi_l]);\n\tconst v_u: number = TBL_V[vi_u];\n\tconst r: number = (v - v_l) / (v_u - v_l);\n\n\tif (!xy_l[2] && !xy_u[2]) {\n\t\tisSaturated = true;\n\t} else if (!xy_l[2] || !xy_u[2]) {\n\t\tif (r < 0.5) {\n\t\t\tif (!xy_l[2]) isSaturated = true;\n\t\t} else {\n\t\t\tif (!xy_u[2]) isSaturated = true;\n\t\t}\n\t}\n\tconst xy: Pair = div(xy_l as unknown as Pair, xy_u as unknown as Pair, r);\n\treturn [...xy, Y];\n}\n\n// Obtain the hue and chroma for the chromaticity coordinates (h, c) on the surface of the given lightness index.\n// Return false if it is out of the range of the table.\nfunction scanXY(h: number, c: number, vi: number): [number, number, boolean] {\n\tconst ht: number = h * 10;\n\tconst p = [ht, c] as Pair;\n\n\tconst c_l: number = 0 | Math.floor(c / 2) * 2;\n\tconst c_u: number = c_l + 2;\n\n\tlet ht_l: number = 0 | Math.floor(ht / 25) * 25;\n\tlet ht_u: number = ht_l + 25;\n\tlet maxC_hl: number = 0;\n\tlet maxC_hu: number = 0;\n\n\tfor (; maxC_hl === 0; ht_l -= 25) {\n\t\tmaxC_hl = getMaxC(vi, ht_l);\n\t\tif (maxC_hl !== 0) break;\n\t}\n\tfor (; maxC_hu === 0; ht_u += 25) {\n\t\tmaxC_hu = getMaxC(vi, ht_u);\n\t\tif (maxC_hu !== 0) break;\n\t}\n\n\tif (c < maxC_hl && maxC_hu <= c) {\n\t\tfor (let c_c: number = maxC_hu; c_c <= maxC_hl - 2; c_c += 2) {\n\t\t\tif (inside(p, [ht_u, maxC_hu], [ht_l, c_c], [ht_l, c_c + 2])) {\n\t\t\t\tconst xy: Pair = interpolate3(vi, p, [ht_u, maxC_hu], [ht_l, c_c], [ht_l, c_c + 2]);\n\t\t\t\treturn [...xy, true];\n\t\t\t}\n\t\t}\n\t}\n\tif (maxC_hl <= c && c < maxC_hu) {\n\t\tfor (let c_c: number = maxC_hl; c_c <= maxC_hu - 2; c_c += 2) {\n\t\t\tif (inside(p, [ht_l, maxC_hl], [ht_u, c_c + 2], [ht_u, c_c])) {\n\t\t\t\tconst xy: Pair = interpolate3(vi, p, [ht_l, maxC_hl], [ht_u, c_c + 2], [ht_u, c_c]);\n\t\t\t\treturn [...xy, true];\n\t\t\t}\n\t\t}\n\t}\n\tif (maxC_hl <= c || maxC_hu <= c) {\n\t\tconst xy: Pair = interpolate2(vi, p, [ht_l, maxC_hl], [ht_u, maxC_hu]);\n\t\treturn [...xy, false];\n\t}\n\tconst xy: Pair = interpolate4(vi, p, [ht_l, c_l], [ht_u, c_l], [ht_u, c_u], [ht_l, c_u]);\n\treturn [...xy, true];\n\n\tfunction interpolate2(vi: number, p: Pair, a: Pair, b: Pair): Pair {\n\t\tconst rx: number = (p[0] - a[0]) / (b[0] - a[0]);\n\n\t\tconst wa = getXy(vi, ...a) as Pair;\n\t\tconst wb = getXy(vi, ...b) as Pair;\n\n\t\treturn div(wa, wb, rx);\n\t}\n\n\tfunction interpolate3(vi: number, p: Pair, a: Pair, b: Pair, c: Pair): Pair {\n\t\t// Barycentric coordinates for 2D interpolation\n\t\tconst f: number = (b[1] - c[1]) * (a[0] - c[0]) + (c[0] - b[0]) * (a[1] - c[1]);\n\t\tconst w1: number = ((b[1] - c[1]) * (p[0] - c[0]) + (c[0] - b[0]) * (p[1] - c[1])) / f;\n\t\tconst w2: number = ((c[1] - a[1]) * (p[0] - c[0]) + (a[0] - c[0]) * (p[1] - c[1])) / f;\n\t\tconst w3: number = 1 - w1 - w2;\n\n\t\tconst wa = getXy(vi, ...a) as Pair;\n\t\tconst wb = getXy(vi, ...b) as Pair;\n\t\tconst wc = getXy(vi, ...c) as Pair;\n\n\t\treturn [\n\t\t\twa[0] * w1 + wb[0] * w2 + wc[0] * w3,\n\t\t\twa[1] * w1 + wb[1] * w2 + wc[1] * w3,\n\t\t];\n\t}\n\n\t// d c\n\t// a b\n\tfunction interpolate4(vi: number, p: Pair, a: Pair, b: Pair, c: Pair, d: Pair): Pair {\n\t\tconst rx: number = (p[0] - a[0]) / (b[0] - a[0]);\n\t\tconst ry: number = (p[1] - a[1]) / (d[1] - a[1]);\n\n\t\tconst wa = getXy(vi, ...a) as Pair;\n\t\tconst wb = getXy(vi, ...b) as Pair;\n\t\tconst wc = getXy(vi, ...c) as Pair;\n\t\tconst wd = getXy(vi, ...d) as Pair;\n\n\t\t// Checking (wa === wb) in case both are ILLUMINANT_C.\n\t\tconst wab: Pair = (wa === wb) ? wa : div(wa, wb, rx);\n\t\tconst wdc: Pair = div(wd, wc, rx);\n\n\t\treturn div(wab, wdc, ry);\n\t}\n}\n\n\n// XYZ -------------------------------------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ to Munsell (HVC).\n * @param {Triplet} xyz XYZ color (standard illuminant D65).\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} Munsell color.\n */\nexport function fromXyz(xyz: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst r: Triplet = xyy2mun(xyz2xyy(xyz2c(xyz, dest), dest));\n\tdest[0] = r[0];\n\tdest[1] = r[1];\n\tdest[2] = r[2];\n\treturn dest;\n}\n\n/**\n * Convert Munsell (HVC) to CIE 1931 XYZ.\n * @param {Triplet} hvc Hue, value, chroma of Munsell color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ color.\n */\nexport function toXyz([h, v, c]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\treturn c2xyz(xyy2xyz(mun2xyy([h, v, c]), dest), dest);\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Convert name-based hue expression to hue value.\n * If the Name-based hue expression is N, -1 is returned.\n * @param {string} hueName Name-based hue expression\n * @return {number} Hue value\n */\nexport function hueNameToHueValue(hueName: string): number {\n\tif (hueName.length === 1) return -1;  // In case of achromatic color N\n\n\tfunction isDigit(s: string) { return Number.isInteger(parseInt(s)); }\n\tconst len = isDigit(hueName.charAt(hueName.length - 2)) ? 1 : 2;  // Length of color name\n\tconst n: string = hueName.substring(hueName.length - len);\n\n\tlet hv: number = parseFloat(hueName.substring(0, hueName.length - len));\n\thv += HUE_NAMES.indexOf(n) * 10;\n\tif (MAX_HUE <= hv) hv -= MAX_HUE;\n\treturn hv;\n}\n\n/**\n * Convert hue value to name-based hue expression.\n * If the hue value is -1, or if the chroma value is 0, N is returned.\n * @param {number} hue Hue value\n * @param {number} chroma Chroma value\n * @return {string} Name-based hue expression\n */\nexport function hueValueToHueName(hue: number, chroma: number): string {\n\tif (hue === -1 || eq0(chroma)) return 'N';\n\tif (hue <= 0) hue += MAX_HUE;\n\tlet h10: number = (0 | hue * 10) % 100;\n\tlet c: number = 0 | (hue / 10);\n\tif (h10 === 0) {\n\t\th10 = 100;\n\t\tc -= 1;\n\t}\n\treturn (Math.round(h10 * 10) / 100) + HUE_NAMES[c];\n}\n\n/**\n * Returns the string representation of Munsell numerical representation.\n * @param {Triplet} hvc Hue, value, chroma of Munsell color\n * @return {string} String representation\n */\nexport function toString([h, v, c]: Triplet): string {\n\tconst str_v: number = Math.round(v * 10) / 10;\n\tif (c < MONO_LIMIT_C) {\n\t\treturn `N ${str_v}`;\n\t} else {\n\t\tconst hue: string = hueValueToHueName(h, c);\n\t\tconst str_c: number = Math.round(c * 10) / 10;\n\t\treturn `${hue} ${str_v}/${str_c}`;\n\t}\n}\n", "/**\n * This class converts the CIE 1931 XYZ color system.\n *\n * @author Takuto Yanagida\n * @version 2024-11-08\n */\n\nimport { Triplet } from '../type';\n\nexport { toXyz as fromLrgb, fromXyz as toLrgb } from './lrgb';\nexport { toXyz as fromXyy, fromXyz as toXyy } from './xyy';\nexport { toXyz as fromLab, fromXyz as toLab } from './lab';\nexport { toXyz as fromLms, fromXyz as toLms } from './lms';\nexport { toXyz as fromMunsell, fromXyz as toMunsell } from './munsell';\n\n\n// Conversion of Standard Illuminant -------------------------------------------\n\n\n/**\n * Convert CIE 1931 XYZ of standard illuminant C to CIE 1931 XYZ of standard illuminant D65.\n * Reference: http://www.brucelindbloom.com/index.html?MunsellCalculator.html (Von Kries method)\n * @param {Triplet} xyz XYZ color (standard illuminant C).\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ of standard illuminant D65.\n */\nexport function fromIlluminantC([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] =  0.9972812 * x + -0.0093756 * y + -0.0154171 * z;\n\tdest[1] = -0.0010298 * x +  1.0007636 * y +  0.0002084 * z;\n\tdest[2] =                                    0.9209267 * z;\n\treturn dest;\n}\n\n/**\n * Convert CIE 1931 XYZ of standard illuminant D65 to CIE 1931 XYZ of standard illuminant C.\n * Reference: http://www.brucelindbloom.com/index.html?MunsellCalculator.html (Von Kries method)\n * @param {Triplet} xyz XYZ color (standard illuminant D65).\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} XYZ of standard illuminant C.\n */\nexport function toIlluminantC([x, y, z]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = 1.0027359 * x +  0.0093941 * y +  0.0167846 * z;\n\tdest[1] = 0.0010319 * x +  0.9992466 * y + -0.0002089 * z;\n\tdest[2] =                                   1.0858628 * z;\n\treturn dest;\n}\n", "/**\n * Color vision simulation.\n *\n * @author Takuto Yanagida\n * @version 2024-08-18\n */\n\nimport { Triplet } from '../type';\n\nimport { fromXyz as xyz2lms } from '../cs/lms';\nimport { fromLrgb as lrgb2xyz } from '../cs/xyz';\n\n/*\n * Reference: Brettel, H.; Vi\u00E9not, F. & Mollon, J. D.,\n * Computerized simulation of color appearance for dichromats,\n * Journal of the Optical Society of America A, 1997, 14, 2647-2655.\n */\n\n/**\n * Simulate protanopia\n * @param {Triplet} lms LMS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in protanopia.\n */\nexport function brettelP([l, m, s]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = 0.0 * l + 2.02344 * m + -2.52581 * s;\n\tdest[1] = 0.0 * l + 1.0     * m +  0.0     * s;\n\tdest[2] = 0.0 * l + 0.0     * m +  1.0     * s;\n\treturn dest;\n}\n\n/**\n * Simulate deuteranopia\n * @param {Triplet} lms LMS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in deuteranopia.\n */\nexport function brettelD([l, m, s]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = 1.0      * l + 0.0 * m + 0.0     * s;\n\tdest[1] = 0.494207 * l + 0.0 * m + 1.24827 * s;\n\tdest[2] = 0.0      * l + 0.0 * m + 1.0     * s;\n\treturn dest;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/*\n * Reference: Katsunori Okajima, Syuu Kanbe,\n * A Real-time Color Simulation of Dichromats,\n * IEICE technical report 107(117), 107-110, 2007-06-21.\n */\n\nconst OC_LMS_BASE: Triplet  = xyz2lms([1, 1, 1]);\nconst OC_LMS_BASE2: Triplet = xyz2lms(lrgb2xyz([1, 1, 1]));\n\nlet doOc: boolean = false;\nlet ocAlpha: number = 1;\nlet ocBeta: number = 1;\n\n/**\n * Set the options for Okajima correction.\n *\n * @param {boolean} doCorrection - Whether to apply the Okajima correction.\n * @param {number} [alpha=1] - The alpha parameter for the correction.\n * @param {number} [beta=1] - The beta parameter for the correction.\n * @return {void}\n */\nexport function setOkajimaCorrectionOption(doCorrection: boolean, alpha: number = 1, beta: number = 1): void {\n\tdoOc = doCorrection;\n\tocAlpha = alpha;\n\tocBeta = beta;\n}\n\n/**\n * Correct simulation of protanopia\n * @param {number} m Original M of LMS color.\n * @param {Triplet} lms LMS color of protanopia simulation.\n * @param {Triplet} base Base LMS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in protanopia.\n */\nexport function okajimaCorrectionP(m: number, [l2, m2, s2]: Triplet, base: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst sp1 = m / base[1];\n\tconst dp0 = l2 / base[0];\n\tconst dp1 = m2 / base[1];\n\tconst dp2 = s2 / base[2];\n\tconst k = ocBeta * sp1 / (ocAlpha * dp0 + ocBeta * dp1);\n\tdest[0] = (k * dp0) * base[0];\n\tdest[1] = (k * dp1) * base[1];\n\tdest[2] = (k * dp2) * base[2];\n\treturn dest;\n}\n\n/**\n * Correct simulation of deuteranopia\n * @param {number} l Original L of LMS color.\n * @param {Triplet} lms LMS color of deuteranopia simulation.\n * @param {Triplet} base Base LMS color.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in deuteranopia.\n */\nexport function okajimaCorrectionD(l: number, [l2, m2, s2]: Triplet, base: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst sp0 = l / base[0];\n\tconst dp0 = l2 / base[0];\n\tconst dp1 = m2 / base[1];\n\tconst dp2 = s2 / base[2];\n\tconst k = ocAlpha * sp0 / (ocAlpha * dp0 + ocBeta * dp1);\n\tdest[0] = (k * dp0) * base[0];\n\tdest[1] = (k * dp1) * base[1];\n\tdest[2] = (k * dp2) * base[2];\n\treturn dest;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Convert LMS to LMS in protanopia (Method 1).\n * @param {Triplet} lms LMS color\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in protanopia\n */\nexport function lmsToProtanopia(lms: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tbrettelP(lms, dest);\n\tif (doOc) {\n\t\tokajimaCorrectionP(lms[1], dest, OC_LMS_BASE, dest);\n\t}\n\treturn dest;\n}\n\n/**\n * Convert LMS to LMS in deuteranopia (Method 1).\n * @param {Triplet} lms LMS color\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in deuteranopia\n */\nexport function lmsToDeuteranopia(lms: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tbrettelD(lms, dest);\n\tif (doOc) {\n\t\tokajimaCorrectionD(lms[0], dest, OC_LMS_BASE, dest);\n\t}\n\treturn dest;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Convert Linear RGB to LMS in protanopia (Method 2).\n * @param {Triplet} lrgb Linear RGB color\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in protanopia\n */\nexport function lrgbToProtanopia([lr, lg, lb]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst lrgb2: Triplet = [\n\t\t0.992052 * lr + 0.003974,\n\t\t0.992052 * lg + 0.003974,\n\t\t0.992052 * lb + 0.003974,\n\t];\n\tconst lms = xyz2lms(lrgb2xyz(lrgb2));\n\tbrettelP(lms, dest);\n\n\tif (doOc) {\n\t\tokajimaCorrectionP(lms[1], dest, OC_LMS_BASE2, dest);\n\t}\n\treturn dest;\n}\n\n/**\n * Convert Linear RGB to LMS in deuteranopia (Method 2).\n * @param {Triplet} lrgb Linear RGB color\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} LMS color in deuteranopia\n */\nexport function lrgbToDeuteranopia([lr, lg, lb]: Triplet, dest: Triplet = [0, 0, 0]): Triplet {\n\tconst lrgb2: Triplet = [\n\t\t0.957237 * lr + 0.0213814,\n\t\t0.957237 * lg + 0.0213814,\n\t\t0.957237 * lb + 0.0213814,\n\t];\n\tconst lms = xyz2lms(lrgb2xyz(lrgb2));\n\tbrettelD(lms, dest);\n\n\tif (doOc) {\n\t\tokajimaCorrectionD(lms[0], dest, OC_LMS_BASE2, dest);\n\t}\n\treturn dest;\n}\n", "/**\n * Functions for Color Space Conversion\n *\n * @author Takuto Yanagida\n * @version 2024-11-12\n */\n\nimport { Triplet } from './type';\n\nimport * as Lab from './cs/lab';\nimport * as Lrgb from './cs/lrgb';\nimport * as Rgb from './cs/rgb';\nimport * as Xyz from './cs/xyz';\n\n/**\n * Convert sRGB to Lightness-only sRGB.\n * @param {Triplet} rgb sRGB color\n * @return {Triplet} Lightness-only sRGB color\n */\nexport function toMonochromeRgb(rgb: Triplet): Triplet {\n\tconst l: number = Lab.lightnessFromXyz(Xyz.fromLrgb(Lrgb.fromRgb(rgb)));\n\treturn Rgb.fromLrgb(Lrgb.fromXyz(Xyz.fromLab([l, 0, 0])));\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Convert color integer to sRGB.\n * @param {number} v Color integer.\n * @param {Triplet} dest dest An array where the result will be stored. If not provided, a new array will be created and returned.\n * @return {Triplet} sRGB color.\n */\nexport function fromInteger(v: number, dest: Triplet = [0, 0, 0]): Triplet {\n\tdest[0] = (v >> 16) & 0xFF;\n\tdest[1] = (v >>  8) & 0xFF;\n\tdest[2] = (v      ) & 0xFF;\n\treturn dest;\n}\n\n/**\n * Convert sRGB to color integer.\n * @param {Triplet} rgb sRGB color.\n * @return {number} Color integer.\n */\nexport function toInteger([r, g, b]: Triplet): number {\n\treturn (r << 16) | (g << 8) | b | 0xff000000;\n}\n\n\n// -----------------------------------------------------------------------------\n\n\n/**\n * Parse a CSS RGB or RGBA color string in various formats and return an array of R, G, B, and A values as numbers.\n * @param {string} str - CSS RGB or RGBA color string (e.g., \"rgb(255, 0, 128)\", \"rgb(100% 0% 50%)\", \"rgba(255, 0, 128, 0.5)\", \"rgb(255 0 128 / 50%)\").\n * @return {number[]} Array of [R, G, B, A] as numbers.\n */\nexport function parseRgb(str: string): number[] | null {\n\tconst re = /rgba?\\(\\s*([\\d.]+%?)\\s*[,\\s]\\s*([\\d.]+%?)\\s*[,\\s]\\s*([\\d.]+%?)\\s*(?:\\/\\s*([\\d.]+%?))?\\s*\\)/i;\n\tconst m: RegExpMatchArray | null = str.match(re);\n\n\tif (m) {\n\t\tconst r: number = m[1].endsWith('%') ? parseFloat(m[1]) * 2.55 : parseFloat(m[1]);\n\t\tconst g: number = m[2].endsWith('%') ? parseFloat(m[2]) * 2.55 : parseFloat(m[2]);\n\t\tconst b: number = m[3].endsWith('%') ? parseFloat(m[3]) * 2.55 : parseFloat(m[3]);\n\n\t\tlet a: number = 1;\n\t\tif (m[4] !== undefined) {\n\t\t\ta = m[4].endsWith('%') ? parseFloat(m[4]) / 100 : parseFloat(m[4]);\n\t\t}\n\t\treturn [Math.round(r), Math.round(g), Math.round(b), a];\n\t}\n\treturn null;\n}\n\n/**\n * Parse a hex color string and return an array of R, G, B, and A values as numbers.\n * @param {string} str - CSS hex color string (e.g., \"#ff5733\", \"#f53\", \"#ff573380\", \"#f538\").\n * @return {number[]} Array of [R, G, B, A] as numbers.\n */\nexport function parseHex(str: string): number[] | null {\n\tconst re = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$|^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n\tconst m: RegExpMatchArray | null = str.match(re);\n\n\tif (m) {\n\t\tif (m[1]) {\n\t\t\tconst r: number = parseInt(m[1], 16);\n\t\t\tconst g: number = parseInt(m[2], 16);\n\t\t\tconst b: number = parseInt(m[3], 16);\n\t\t\tconst a: number = m[4] ? parseInt(m[4], 16) / 255 : 1;\n\t\t\treturn [r, g, b, a];\n\t\t}\n\t\tif (m[5]) {\n\t\t\tconst r: number = parseInt(m[5] + m[5], 16);\n\t\t\tconst g: number = parseInt(m[6] + m[6], 16);\n\t\t\tconst b: number = parseInt(m[7] + m[7], 16);\n\t\t\tconst a: number = m[8] ? parseInt(m[8] + m[8], 16) / 255 : 1;\n\t\t\treturn [r, g, b, a];\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Parse a CSS HSL or HSLA color string in various formats and return an array of H, S, L, and A values as numbers.\n * @param {string} str - CSS HSL or HSLA color string (e.g., \"hsl(50 80% 40%)\", \"hsl(0 80% 50% / 25%)\", \"hsl(0, 80%, 50%)\").\n * @return {number[]} Array of [H, S, L, A] as numbers.\n */\nexport function parseHsl(str: string): number[] | null {\n\tconst re = /hsla?\\(\\s*([\\d.]+)\\s*[,\\s]\\s*([\\d.]+)%\\s*[,\\s]\\s*([\\d.]+)%\\s*(?:\\/\\s*([\\d.]+%?))?\\s*\\)/i;\n\tconst m: RegExpMatchArray | null = str.match(re);\n\n\tif (m) {\n\t\tconst h: number = parseFloat(m[1]);\n\t\tconst s: number = parseFloat(m[2]);\n\t\tconst l: number = parseFloat(m[3]);\n\n\t\tlet a: number = 1;\n\t\tif (m[4] !== undefined) {\n\t\t\ta = m[4].endsWith('%') ? parseFloat(m[4]) / 100 : parseFloat(m[4]);\n\t\t}\n\t\treturn [h, s, l, a];\n\t}\n\treturn null;\n}\n\n/**\n * Parse a CSS Lab color string and return an array of L, a, b, and A values as numbers.\n * @param {string} str - CSS Lab color string (e.g., \"lab(50% 20 30)\", \"lab(50% 20 30 / 0.8)\").\n * @return {number[]} Array of [L, a, b, A] as numbers.\n */\nexport function parseLab(str: string): number[] | null {\n\tconst re = /lab\\(\\s*([\\d.]+)%?\\s+([\\d.-]+)\\s+([\\d.-]+)\\s*(?:\\/\\s*([\\d.]+))?\\s*\\)/i;\n\tconst m: RegExpMatchArray | null = str.match(re);\n\n\tif (m) {\n\t\tconst l: number = parseFloat(m[1]);\n\t\tconst a: number = parseFloat(m[2]);\n\t\tconst b: number = parseFloat(m[3]);\n\n\t\tlet al: number = 1;\n\t\tif (m[4] !== undefined) {\n\t\t\tal = parseFloat(m[4]);\n\t\t}\n\t\treturn [l, a, b, al];\n\t}\n\treturn null;\n}\n\n/**\n * Parse a CSS LCH color string and return an array of L, C, H, and A values as numbers.\n * @param {string} str - CSS LCH color string (e.g., \"lch(50% 40 250deg)\", \"lch(50% 40 250deg / 0.8)\").\n * @return {number[]} Array of [L, C, H, A] as numbers.\n */\nexport function parseLch(str: string): number[] | null {\n\tconst re = /lch\\(\\s*([\\d.]+)%?\\s+([\\d.]+)\\s+([\\d.]+)(?:deg)?\\s*(?:\\/\\s*([\\d.]+))?\\s*\\)/i;\n\tconst m: RegExpMatchArray | null = str.match(re);\n\n\tif (m) {\n\t\tconst l: number = parseFloat(m[1]);\n\t\tconst c: number = parseFloat(m[2]);\n\t\tconst h: number = parseFloat(m[3]);\n\n\t\tlet al: number = 1;\n\t\tif (m[4] !== undefined) {\n\t\t\tal = parseFloat(m[4]);\n\t\t}\n\t\treturn [l, c, h, al];\n\t}\n\treturn null;\n}\n", "/**\n * Color\n *\n * @author Takuto Yanagida\n * @version 2024-11-12\n */\n\nimport { Triplet } from './type';\nimport * as Category from './eval/category';\nimport * as Conspicuity from './eval/conspicuity';\nimport * as Difference from './eval/difference';\nimport * as ColorVision from './sim/color-vision';\nimport * as Util from './util';\n\nimport * as Rgb from './cs/rgb';\nimport * as Hsl from './cs/hsl';\nimport * as Yiq from './cs/yiq';\nimport * as Lrgb from './cs/lrgb';\nimport * as Xxy from './cs/xyy';\nimport * as Lab from './cs/lab';\nimport * as Lch from './cs/lch';\nimport * as Lms from './cs/lms';\nimport * as Munsell from './cs/munsell';\nimport * as Pccs from './cs/pccs';\n\nexport enum ColorSpace {\n\tRgb,\n\tHsl,\n\tYiq,\n\tLrgb,\n\tXyz,\n\tXyy,\n\tLab,\n\tLch,\n\tLms,\n\tMunsell,\n\tPccs,\n\tTone,\n}\n\nexport class Color {\n\n\n\t/**\n\t * Creates a Color object based on the integer.\n\t * @param i Integer.\n\t * @returns A Color object.\n\t */\n\tstatic fromInteger(i: number): Color {\n\t\treturn new Color(ColorSpace.Rgb, Util.fromInteger(i | 0xff000000));\n\t}\n\n\t/**\n\t * Parses a color string in various formats and returns a corresponding Color object.\n\t *\n\t * @param {string} str - The color string to parse.\n\t * @returns {Color | null} A Color object if parsing is successful; otherwise, null.\n\t */\n\tstatic fromString(str: string): Color | null {\n\t\tlet cs: any = null;\n\t\tif (cs = Util.parseRgb(str)) return new Color(ColorSpace.Rgb, [cs[0], cs[1], cs[2]], cs[3]);\n\t\tif (cs = Util.parseHex(str)) return new Color(ColorSpace.Rgb, [cs[0], cs[1], cs[2]], cs[3]);\n\t\tif (cs = Util.parseHsl(str)) return new Color(ColorSpace.Hsl, [cs[0], cs[1], cs[2]], cs[3]);\n\t\tif (cs = Util.parseLab(str)) return new Color(ColorSpace.Lab, [cs[0], cs[1], cs[2]], cs[3]);\n\t\tif (cs = Util.parseLch(str)) return new Color(ColorSpace.Lch, [cs[0], cs[1], cs[2]], cs[3]);\n\t\treturn null;\n\t}\n\n\t#ts: Map<ColorSpace, Triplet> = new Map();\n\t#us: Map<string, string | boolean | number> = new Map();\n\t#cs: ColorSpace | null = null;\n\t#al: number = 1;\n\n\tconstructor(cs: ColorSpace | null = null, t: Triplet | null = null, al: number = 1) {\n\t\tif (cs !== null && t !== null) {  // Must check for null.\n\t\t\tthis.#ts.set(cs, t);\n\t\t\tthis.#cs = cs;\n\t\t\tthis.#al = al;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a string representation of an object.\n\t */\n\ttoString(): string {\n\t\tif (null === this.#cs) {\n\t\t\treturn 'empty';\n\t\t}\n\t\tconst t = this.#ts.get(this.#cs) as Triplet;\n\t\treturn `${ColorSpace[this.#cs]} [${t[0]}, ${t[1]}, ${t[2]}] (${this.#al})`;\n\t}\n\n\tset(cs: ColorSpace, t: Triplet, al: number = 1): void {\n\t\tthis.#ts.clear();\n\t\tthis.#us.clear();\n\n\t\tthis.#ts.set(cs, t);\n\t\tthis.#cs = cs;\n\t\tthis.#al = al;\n\t}\n\n\talpha(al: number | null = null): number | void {\n\t\tif (null === al) return this.#al;\n\t\tthis.#al = al;\n\t}\n\n\tas(cs: ColorSpace): Triplet {\n\t\tswitch (cs) {\n\t\t\tcase ColorSpace.Rgb    : return this.asRgb();\n\t\t\tcase ColorSpace.Hsl    : return this.asHsl();\n\t\t\tcase ColorSpace.Yiq    : return this.asYiq();\n\t\t\tcase ColorSpace.Lrgb   : return this.asLrgb();\n\t\t\tcase ColorSpace.Xyz    : return this.asXyz();\n\t\t\tcase ColorSpace.Xyy    : return this.asXyy();\n\t\t\tcase ColorSpace.Lab    : return this.asLab();\n\t\t\tcase ColorSpace.Lch    : return this.asLch();\n\t\t\tcase ColorSpace.Lms    : return this.asLms();\n\t\t\tcase ColorSpace.Munsell: return this.asMunsell();\n\t\t\tcase ColorSpace.Pccs   : return this.asPccs();\n\t\t\tcase ColorSpace.Tone   : return this.asTone();\n\t\t}\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\tasRgb(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Rgb)) {\n\t\t\treturn this.#ts.get(ColorSpace.Rgb) as Triplet;\n\t\t}\n\t\tlet t: Triplet;\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Hsl:\n\t\t\t\tt = Hsl.toRgb(this.asHsl());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tt = Rgb.fromLrgb(this.asLrgb());\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Rgb, t);\n\t\tthis.#us.set('rgb_saturation', Rgb.isSaturated);\n\t\treturn t;\n\t}\n\n\tasHsl(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Hsl)) {\n\t\t\treturn this.#ts.get(ColorSpace.Hsl) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Hsl.fromRgb(this.asRgb());\n\t\tthis.#ts.set(ColorSpace.Hsl, t);\n\t\treturn t;\n\t}\n\n\tasYiq(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Yiq)) {\n\t\t\treturn this.#ts.get(ColorSpace.Yiq) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Yiq.fromLrgb(this.asLrgb());\n\t\tthis.#ts.set(ColorSpace.Yiq, t);\n\t\treturn t;\n\t}\n\n\tasLrgb(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Lrgb)) {\n\t\t\treturn this.#ts.get(ColorSpace.Lrgb) as Triplet;\n\t\t}\n\t\tlet t: Triplet;\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Rgb:\n\t\t\tcase ColorSpace.Hsl:\n\t\t\t\tt = Rgb.toLrgb(this.asRgb());\n\t\t\t\tbreak;\n\t\t\tcase ColorSpace.Yiq:\n\t\t\t\tt = Yiq.toLrgb(this.asYiq());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tt = Lrgb.fromXyz(this.asXyz());\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Lrgb, t);\n\t\treturn t;\n\t}\n\n\tasXyz(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Xyz)) {\n\t\t\treturn this.#ts.get(ColorSpace.Xyz) as Triplet;\n\t\t}\n\t\tlet t: Triplet = [0, 0, 0];\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Rgb:\n\t\t\tcase ColorSpace.Hsl:\n\t\t\tcase ColorSpace.Yiq:\n\t\t\tcase ColorSpace.Lrgb:\n\t\t\t\tt = Lrgb.toXyz(this.asLrgb());\n\t\t\t\tbreak;\n\t\t\tcase ColorSpace.Lch:\n\t\t\tcase ColorSpace.Lab:\n\t\t\t\tt = Lab.toXyz(this.asLab());\n\t\t\t\tbreak;\n\t\t\tcase ColorSpace.Xyy:\n\t\t\t\tt = Xxy.toXyz(this.asXyy());\n\t\t\t\tthis.#us.set('xyy_saturation', Xxy.isSaturated);\n\t\t\t\tbreak;\n\t\t\tcase ColorSpace.Lms:\n\t\t\t\tt = Lms.toXyz(this.asLms());\n\t\t\t\tbreak;\n\t\t\tcase ColorSpace.Munsell:\n\t\t\tcase ColorSpace.Pccs:\n\t\t\tcase ColorSpace.Tone:\n\t\t\t\tt = Munsell.toXyz(this.asMunsell());\n\t\t\t\tthis.#us.set('munsell_saturation', Munsell.isSaturated);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Xyz, t);\n\t\treturn t;\n\t}\n\n\tasXyy(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Xyy)) {\n\t\t\treturn this.#ts.get(ColorSpace.Xyy) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Xxy.fromXyz(this.asXyz());\n\t\tthis.#ts.set(ColorSpace.Xyy, t);\n\t\treturn t;\n\t}\n\n\tasLab(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Lab)) {\n\t\t\treturn this.#ts.get(ColorSpace.Lab) as Triplet;\n\t\t}\n\t\tlet t: Triplet;\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Lch:\n\t\t\t\tt = Lch.toLab(this.asLch());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tt = Lab.fromXyz(this.asXyz());\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Lab, t);\n\t\treturn t;\n\t}\n\n\tasLch(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Lch)) {\n\t\t\treturn this.#ts.get(ColorSpace.Lch) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Lch.fromLab(this.asLab());\n\t\tthis.#ts.set(ColorSpace.Lch, t);\n\t\treturn t;\n\t}\n\n\tasLms(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Lms)) {\n\t\t\treturn this.#ts.get(ColorSpace.Lms) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Lms.fromXyz(this.asXyz());\n\t\tthis.#ts.set(ColorSpace.Lms, t);\n\t\treturn t;\n\t}\n\n\tasMunsell(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Munsell)) {\n\t\t\treturn this.#ts.get(ColorSpace.Munsell) as Triplet;\n\t\t}\n\t\tlet t: Triplet;\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Pccs:\n\t\t\tcase ColorSpace.Tone:\n\t\t\t\tt = Pccs.toMunsell(this.asPccs());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tt = Munsell.fromXyz(this.asXyz());\n\t\t\t\tthis.#us.set('munsell_saturation', Munsell.isSaturated);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Munsell, t);\n\t\treturn t;\n\t}\n\n\tasPccs(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Pccs)) {\n\t\t\treturn this.#ts.get(ColorSpace.Pccs) as Triplet;\n\t\t}\n\t\tlet t: Triplet;\n\t\tswitch (this.#cs) {\n\t\t\tcase ColorSpace.Tone:\n\t\t\t\tt = Pccs.toNormalCoordinate(this.asTone());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tt = Pccs.fromMunsell(this.asMunsell());\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.#ts.set(ColorSpace.Pccs, t);\n\t\treturn t;\n\t}\n\n\tasTone(): Triplet {\n\t\tif (this.#ts.has(ColorSpace.Tone)) {\n\t\t\treturn this.#ts.get(ColorSpace.Tone) as Triplet;\n\t\t}\n\t\tconst t: Triplet = Pccs.toToneCoordinate(this.asPccs());\n\t\tthis.#ts.set(ColorSpace.Tone, t);\n\t\treturn t;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\tisRGBSaturated(forceToCheck: boolean = false): boolean {\n\t\tif (forceToCheck && !this.#us.has('rgb_saturation')) {\n\t\t\tthis.asRgb();\n\t\t}\n\t\treturn (this.#us.get('rgb_saturation') ?? false) as boolean;\n\t}\n\n\tisXyySaturated(): boolean {\n\t\treturn (this.#us.get('xyy_saturation') ?? false) as boolean;\n\t}\n\n\tisMunsellSaturated(): boolean {\n\t\treturn (this.#us.get('munsell_saturation') ?? false) as boolean;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\tasMunsellNotation(): string {\n\t\tif (this.#us.has('munsell_notation')) {\n\t\t\treturn this.#us.get('munsell_notation') as string;\n\t\t}\n\t\tconst s: string = Munsell.toString(this.asMunsell());\n\t\tthis.#us.set('munsell_notation', s);\n\t\treturn s;\n\t}\n\n\tasPCCSNotation(): string {\n\t\tif (this.#us.has('pccs_notation')) {\n\t\t\treturn this.#us.get('pccs_notation') as string;\n\t\t}\n\t\tconst s: string = Pccs.toString(this.asPccs());\n\t\tthis.#us.set('pccs_notation', s);\n\t\treturn s;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\tasInteger(): number {\n\t\tif (this.#us.has('integer')) {\n\t\t\treturn this.#us.get('integer') as number;\n\t\t}\n\t\tconst i: number = Util.toInteger(this.asRgb());\n\t\tthis.#us.set('integer', i);\n\t\treturn i;\n\t}\n\n\tasConspicuity(): number {\n\t\tif (this.#us.has('conspicuity')) {\n\t\t\treturn this.#us.get('conspicuity') as number;\n\t\t}\n\t\tconst s: number = Conspicuity.conspicuityOfLab(this.asLab());\n\t\tthis.#us.set('conspicuity', s);\n\t\treturn s;\n\t}\n\n\tasCategory(): string {\n\t\tif (this.#us.has('category')) {\n\t\t\treturn this.#us.get('category') as string;\n\t\t}\n\t\tconst n: string = Category.categoryOfXyy(this.asXyy());\n\t\tthis.#us.set('category', n);\n\t\treturn n;\n\t}\n\n\tdifferenceFrom(c: Color, method: 'sqrt' | 'cie76' | 'ciede2000' = 'ciede2000'): number {\n\t\tswitch (method) {\n\t\t\tcase 'sqrt':\n\t\t\t\treturn Difference.distance(this.asLab(), c.asLab());\n\t\t\tcase 'cie76':\n\t\t\t\treturn Difference.CIE76(this.asLab(), c.asLab());\n\t\t\tcase 'ciede2000':\n\t\t\tdefault:\n\t\t\t\treturn Difference.CIEDE2000(this.asLab(), c.asLab());\n\t\t}\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\ttoMonochrome(): Color {\n\t\treturn new Color(ColorSpace.Lab, [this.asLab()[0], 0, 0]);\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\ttoProtanopia(method: 'lms' | 'lrgb' = 'lrgb', doCorrection: boolean = false): Color {\n\t\tColorVision.setOkajimaCorrectionOption(doCorrection);\n\t\tswitch (method) {\n\t\t\tcase 'lms':\n\t\t\t\tconst lms0: Triplet = ColorVision.lmsToProtanopia(this.asLms());\n\t\t\t\treturn new Color(ColorSpace.Lms, lms0);\n\t\t\tcase 'lrgb':\n\t\t\tdefault:\n\t\t\t\tconst lms1: Triplet = ColorVision.lrgbToProtanopia(this.asLrgb());\n\t\t\t\treturn new Color(ColorSpace.Lms, lms1);\n\t\t}\n\t}\n\n\ttoDeuteranopia(method: 'lms' | 'lrgb' = 'lrgb', doCorrection: boolean = false): Color {\n\t\tColorVision.setOkajimaCorrectionOption(doCorrection);\n\t\tswitch (method) {\n\t\t\tcase 'lms':\n\t\t\t\tconst lms0: Triplet = ColorVision.lmsToDeuteranopia(this.asLms());\n\t\t\t\treturn new Color(ColorSpace.Lms, lms0);\n\t\t\tcase 'lrgb':\n\t\t\tdefault:\n\t\t\t\tconst lms1: Triplet = ColorVision.lrgbToDeuteranopia(this.asLrgb());\n\t\t\t\treturn new Color(ColorSpace.Lms, lms1);\n\t\t}\n\t}\n}\n", "/**\n * Class representing color information in various color spaces, including Lab, Protanopia, and Deuteranopia.\n * Provides methods for creating color instances and calculating differences in Lab color space.\n *\n * @author Takuto Yanagida\n * @version 2024-11-06\n */\n\nimport { Color, ColorSpace } from 'iroay/iroay';\nimport { Vision } from './vision';\n\ntype Triplet = [number, number, number];\n\nexport class Value {\n\n\t/**\n\t * Creates a new `Value` instance if the specified Lab color is within RGB gamut.\n\t *\n\t * @param lab - The Lab color values as a triplet.\n\t * @returns A new `Value` instance or `null` if the color is not within RGB gamut.\n\t */\n\tstatic newInstance(lab: Triplet): Value | null {\n\t\tconst c = new Color(ColorSpace.Lab, lab);\n\t\tif (c.isRGBSaturated(true)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Value(c);\n\t}\n\n\t#cv: Color;\n\t#cP: Color;\n\t#cD: Color;\n\t#cM: Color;\n\n\t/** Color triplets, accessible within the package for derivation reference */\n\tlab : Triplet;\n\tlabP: Triplet;\n\tlabD: Triplet;\n\ttone: Triplet;\n\n\t/**\n\t * Constructs a `Value` instance from either a color integer or a `Color` object.\n\t *\n\t * @param colorInt_c - The color as an integer (with alpha set to 255) or as a `Color` object.\n\t */\n\tconstructor(colorInt_c: number | Color) {\n\t\tif (colorInt_c instanceof Color) {\n\t\t\tthis.#cv = colorInt_c;\n\t\t} else {\n\t\t\tthis.#cv = Color.fromInteger(colorInt_c);\n\t\t}\n\t\tthis.#cP = this.#cv.toProtanopia();\n\t\tthis.#cD = this.#cv.toDeuteranopia();\n\t\tthis.#cM = new Color(ColorSpace.Lab, [this.#cv.asLab()[0], 0, 0]);\n\n\t\tthis.lab  = this.#cv.asLab();\n\t\tthis.labP = this.#cP.asLab();\n\t\tthis.labD = this.#cD.asLab();\n\t\tthis.tone = this.#cv.asTone();\n\t}\n\n\t/**\n\t * Retrieves the color.\n\t *\n\t * @returns The color.\n\t */\n\tgetColor(vis: Vision = Vision.TRICHROMACY): Color {\n\t\tswitch (vis) {\n\t\t\tcase Vision.PROTANOPIA  : return this.#cP;\n\t\t\tcase Vision.DEUTERANOPIA: return this.#cD;\n\t\t\tcase Vision.MONOCHROMACY: return this.#cM;\n\t\t\tdefault                 : return this.#cv;\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the color difference between this color and another in the Lab color space.\n\t *\n\t * @param v - The other `Value` instance to compare with.\n\t * @returns The color difference calculated using the CIE76 formula.\n\t */\n\tdifferenceFrom(v: Value, vis: Vision = Vision.TRICHROMACY): number {\n\t\tswitch (vis) {\n\t\t\tcase Vision.PROTANOPIA  : return this.#cP.differenceFrom(v.#cP);\n\t\t\tcase Vision.DEUTERANOPIA: return this.#cD.differenceFrom(v.#cD);\n\t\t\tcase Vision.MONOCHROMACY: return this.#cM.differenceFrom(v.#cM);\n\t\t\tdefault                 : return this.#cv.differenceFrom(v.#cv);\n\t\t}\n\t}\n\n}\n", "/**\n * A class representing color schemes and related information.\n *\n * @author Takuto Yanagida\n * @version 2024-12-12\n */\n\nimport { Color } from 'iroay/iroay';\nimport { Voronoi } from 'voronoi/voronoi';\n\nimport { Value } from './value';\nimport { Vision } from \"./vision\";\n\ntype Triplet = [number, number, number];\n\nclass Combination {\n\n\t/**\n\t * Represents a combination of two color indices with a color difference and a vision type.\n\t *\n\t * @param index1 - The index of the first color.\n\t * @param c1 - The color value of the first color.\n\t * @param index2 - The index of the second color.\n\t * @param c2 - The color value of the second color.\n\t * @param diff - The difference value between the two colors.\n\t * @param vision - The type of vision used in comparison.\n\t */\n\tconstructor(public index1: number, public c1: number, public index2: number, public c2: number, public diff: number, public vision: Vision) {}\n\n}\n\nexport class Scheme {\n\n\t/**\n\t * Creates an adjacency list for all combinations of color pairs.\n\t *\n\t * @param size - The total number of colors.\n\t * @returns An array of index pairs representing all color adjacencies.\n\t */\n\tprivate static createAllAdjacencyList(size: number): [number, number][] {\n\t\tconst ret: [number, number][] = [];\n\t\tfor (let i: number = 0; i < size; ++i) {\n\t\t\tfor (let j: number = i + 1; j < size; ++j) {\n\t\t\t\tret.push([i, j]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#ads    : [number, number][];  // Adjacency list\n\t#vals   : Value[] = [];        // List of color values\n\t#fixed  : boolean[];           // Fixed flag for each color\n\t#combs  : Combination[];       // List of color combinations\n\t#quality: number;              // Quality metric for the scheme\n\n\t#bnSize! : number;  // Size of the bottleneck color\n\t#bnIndex!: number;  // Index of the bottleneck color\n\n\t#lowDiffT!: Combination;  // Lowest difference for trichromatic vision\n\t#lowDiffP!: Combination;  // Lowest difference for protanopia\n\t#lowDiffD!: Combination;  // Lowest difference for deuteranopia\n\t#lowDiffM!: Combination;  // Lowest difference for monochromatic vision\n\n\t/**\n\t * Initializes the Scheme with color values, adjacencies, fixed flags, and quality.\n\t *\n\t * @param colorInts - Array of color values in integer format.\n\t * @param adjacencies - Array of adjacency pairs; if null, defaults to all pairs.\n\t * @param fixed - Array indicating if each color is fixed; defaults to all false.\n\t * @param quality - A quality metric for the scheme.\n\t */\n\tconstructor(colorInts: number[], adjacencies: [number, number][] | null = null, fixed: boolean[] | null = null, quality: number = 1) {\n\t\tif (adjacencies === null) {\n\t\t\tadjacencies = Scheme.createAllAdjacencyList(colorInts.length);\n\t\t}\n\t\tthis.#ads = [...adjacencies];\n\t\tfor (const ci of colorInts) {\n\t\t\tthis.#vals.push(new Value(ci));\n\t\t}\n\t\tif (fixed === null) {\n\t\t\tthis.#fixed = new Array(this.#vals.length);\n\t\t\tthis.#fixed.fill(false);\n\t\t} else {\n\t\t\tthis.#fixed = [...fixed];\n\t\t}\n\t\tthis.#deriveBottleneck();\n\t\tthis.#combs   = this.#createAllCombinationList();\n\t\tthis.#quality = quality;\n\t}\n\n\t/**\n\t * Sets the fixed flags for the colors in the scheme.\n\t *\n\t * @param fs - Array of boolean flags indicating if each color is fixed.\n\t */\n\tsetFixedFlags(fs: boolean[]): void {\n\t\tthis.#fixed = [...fs];\n\t}\n\n\t/**\n\t * Sets the internal quality metric for the scheme.\n\t *\n\t * @param quality - The quality value to set.\n\t */\n\tsetQualityInternally(quality: number): void {\n\t\tthis.#quality = quality;\n\t}\n\n\t/**\n\t * Determines the bottleneck color based on Voronoi partition sizes.\n\t */\n\t#deriveBottleneck(): void {\n\t\tconst sizes: number[] = this.#calcSizeList();\n\t\tlet min: number = 0;\n\n\t\tfor (let i: number = 0; i < sizes.length; ++i) {\n\t\t\tif (sizes[i] < sizes[min]) {\n\t\t\t\tmin = i;\n\t\t\t}\n\t\t}\n\t\tthis.#bnIndex = min;\n\t\tthis.#bnSize  = sizes[min];\n\t}\n\n\t/**\n\t * Calculates an array representing the sizes of each Voronoi partition,\n\t * used to identify bottleneck colors.\n\t *\n\t * @returns An array of partition sizes.\n\t */\n\t#calcSizeList(): number[] {\n\t\tconst vd: Voronoi = new Voronoi(0, 100, -127, 127, -127, 127);  // L, a, b\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tvd.addSite(this.getColor(i).asLab());\n\t\t}\n\t\tvd.createCells(this.getAdjacencyTable());\n\n\t\tconst ret: number[] = [];\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tret.push(vd.countGrids(i, 5));\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Creates a list of all color combinations based on adjacency and vision type.\n\t *\n\t * @returns An array of all possible color combinations.\n\t */\n\t#createAllCombinationList(): Combination[] {\n\t\tconst combs: Combination[] = [];\n\t\tconst table: number[][] = this.getAdjacencyTable();\n\n\t\tthis.#lowDiffT = this.addCombinations(table, Vision.TRICHROMACY,  combs) as Combination;\n\t\tthis.#lowDiffP = this.addCombinations(table, Vision.PROTANOPIA,   combs) as Combination;\n\t\tthis.#lowDiffD = this.addCombinations(table, Vision.DEUTERANOPIA, combs) as Combination;\n\t\tthis.#lowDiffM = this.addCombinations(table, Vision.MONOCHROMACY, combs) as Combination;\n\n\t\tcombs.sort(\n\t\t\t(o1: Combination, o2: Combination) => {\n\t\t\t\tif (o1.diff < o2.diff) return -1;\n\t\t\t\tif (o1.diff > o2.diff) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t);\n\t\treturn combs;\n\t}\n\n\t/**\n\t * Adds color combinations to the destination array and finds the lowest difference.\n\t *\n\t * @param table - Adjacency table of color pairs.\n\t * @param vis - Vision type for comparison.\n\t * @param dest - Array to store the color combinations.\n\t * @returns The combination with the lowest difference.\n\t */\n\tprivate addCombinations(table: number[][], vis: Vision, dest: Combination[]):  Combination | null {\n\t\tlet lowDiff: Combination | null = null;\n\t\tfor (let i: number = 0; i < table.length; ++i) {\n\t\t\tfor (const j of table[i]) {\n\t\t\t\tif (i >= j) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst diff: number = this.getDifference(i, j, vis);\n\t\t\t\tconst c: Combination = new Combination(i, this.getColor(i, vis).asInteger(), j, this.getColor(j, vis).asInteger(), diff, vis);\n\t\t\t\tdest.push(c);\n\t\t\t\tif (lowDiff == null || diff < lowDiff.diff) {\n\t\t\t\t\tlowDiff = c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lowDiff;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Returns the list of adjacency pairs.\n\t *\n\t * @returns A copy of the adjacency list.\n\t */\n\tgetAdjacencies(): [number, number][] {\n\t\treturn [...this.#ads];\n\t}\n\n\t/**\n\t * Provides the adjacency table, optionally omitting a specified index.\n\t *\n\t * @param omittedIndex - Index to omit from the adjacency table; defaults to -1.\n\t * @returns A 2D array representing the adjacency table.\n\t */\n\tgetAdjacencyTable(omittedIndex: number = -1): number[][] {\n\t\tconst table: number[][] = [];\n\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tconst rel: number[] = [];\n\t\t\tfor (const [idx0, idx1] of this.#ads) {\n\t\t\t\tif (idx0 === omittedIndex || idx1 === omittedIndex) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (idx0 === i) rel.push(idx1);\n\t\t\t\telse if (idx1 === i) rel.push(idx0);\n\t\t\t}\n\t\t\ttable.push(rel);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Computes the conspicuity array, normalizing values between 0 and 1.\n\t *\n\t * @returns An array of normalized conspicuity values for each color.\n\t */\n\tgetConspicuityArray(): number[] {\n\t\tconst ret: number[] = [];\n\n\t\tlet min: number = Number.MAX_VALUE;\n\t\tlet max: number = Number.MIN_VALUE;\n\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tconst c: number = this.#vals[i].getColor().asConspicuity();\n\t\t\tif (c < min) {\n\t\t\t\tmin = c;\n\t\t\t} else if (max < c) {\n\t\t\t\tmax = c;\n\t\t\t}\n\t\t}\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tret.push((this.#vals[i].getColor().asConspicuity() - min) / (max - min));\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns the total number of colors in the scheme.\n\t *\n\t * @returns The size of the color scheme.\n\t */\n\tsize(): number {\n\t\treturn this.#vals.length;\n\t}\n\n\t/**\n\t * Checks if a color at a given index is fixed.\n\t *\n\t * @param idx - Index of the color.\n\t * @returns True if the color is fixed, otherwise false.\n\t */\n\tisFixed(idx: number): boolean {\n\t\treturn this.#fixed[idx];\n\t}\n\n\t/**\n\t * Retrieves the color at a specified index for a given vision type.\n\t *\n\t * @param idx - Index of the color.\n\t * @param vis - Vision type; defaults to TRICHROMACY.\n\t * @returns The color object for the specified index.\n\t */\n\tgetColor(idx: number, vis: Vision = Vision.TRICHROMACY): Color {\n\t\treturn this.#vals[idx].getColor(vis);\n\t}\n\n\t/**\n\t * Gets the iterator of the values.\n\t */\n\t[Symbol.iterator](): Iterator<Value> {\n\t\treturn this.#vals[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Returns the index of the bottleneck color in the scheme.\n\t *\n\t * @returns The index of the bottleneck color.\n\t */\n\tgetBottleneckIndex(): number {\n\t\treturn this.#bnIndex;\n\t}\n\n\t/**\n\t * Returns the size of the bottleneck color in the scheme.\n\t *\n\t * @returns The size of the bottleneck color.\n\t */\n\tgetBottleneckSize(): number {\n\t\treturn this.#bnSize;\n\t}\n\n\t/**\n\t * Calculates the color difference between two indices for a given vision type.\n\t *\n\t * @param idx0 - Index of the first color.\n\t * @param idx1 - Index of the second color.\n\t * @param vis - Vision type; defaults to TRICHROMACY.\n\t * @returns The difference between the two colors.\n\t */\n\tgetDifference(idx0: number, idx1: number, vis: Vision = Vision.TRICHROMACY): number {\n\t\treturn this.#vals[idx0].differenceFrom(this.#vals[idx1], vis);\n\t}\n\n\t/**\n\t * Retrieves the combination with the lowest difference for a given vision type.\n\t *\n\t * @param vis - Vision type; defaults to TRICHROMACY.\n\t * @returns The combination with the lowest color difference.\n\t */\n\tgetLowestDifferenceCombination(vis: Vision = Vision.TRICHROMACY): Combination {\n\t\tif (null === vis) {\n\t\t\tlet com: Combination = this.#lowDiffT;\n\t\t\tif (this.#lowDiffP.diff < com.diff) com = this.#lowDiffP;\n\t\t\tif (this.#lowDiffD.diff < com.diff) com = this.#lowDiffD;\n\t\t\tif (this.#lowDiffM.diff < com.diff) com = this.#lowDiffM;\n\t\t\treturn com;\n\t\t}\n\t\tswitch (vis) {\n\t\t\tcase Vision.PROTANOPIA  : return this.#lowDiffP;\n\t\t\tcase Vision.DEUTERANOPIA: return this.#lowDiffD;\n\t\t\tcase Vision.MONOCHROMACY: return this.#lowDiffM;\n\t\t\tdefault                 : return this.#lowDiffT;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves all combinations that match specified vision types.\n\t *\n\t * @param T - Include trichromacy combinations.\n\t * @param P - Include protanopia combinations.\n\t * @param D - Include deuteranopia combinations.\n\t * @param M - Include monochromacy combinations.\n\t * @returns An array of color combinations matching the specified vision types.\n\t */\n\tgetCombinationList(T: boolean, P: boolean, D: boolean, M: boolean): Combination[] {\n\t\tconst com: Combination[] = [];\n\n\t\tfor (const c of this.#combs) {\n\t\t\t     if (T && c.vision == Vision.TRICHROMACY)  com.push(c);\n\t\t\telse if (P && c.vision == Vision.PROTANOPIA)   com.push(c);\n\t\t\telse if (D && c.vision == Vision.DEUTERANOPIA) com.push(c);\n\t\t\telse if (M && c.vision == Vision.MONOCHROMACY) com.push(c);\n\t\t}\n\t\treturn com;\n\t}\n\n\t/**\n\t * Retrieves the lowest color difference for a given vision type.\n\t *\n\t * @param vis - Vision type.\n\t * @returns The lowest color difference value for the specified vision type.\n\t */\n\tgetLowestDifference(vis: Vision): number {\n\t\tswitch (vis) {\n\t\t\tcase Vision.PROTANOPIA  : return this.#lowDiffP.diff;\n\t\t\tcase Vision.DEUTERANOPIA: return this.#lowDiffD.diff;\n\t\t\tcase Vision.MONOCHROMACY: return this.#lowDiffM.diff;\n\t\t\tdefault                 : return this.#lowDiffT.diff;\n\t\t}\n\t}\n\n\t/**\n\t * Computes the total color difference from another Scheme.\n\t *\n\t * @param cs - The other color scheme.\n\t * @returns The total difference value.\n\t */\n\ttotalDifferenceFrom(cs: Scheme): number {\n\t\tlet sum: number = 0;\n\n\t\tfor (let i: number = 0; i < this.#vals.length; ++i) {\n\t\t\tsum += this.#vals[i].differenceFrom(cs.#vals[i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Retrieves the quality metric of the scheme.\n\t *\n\t * @returns The quality value.\n\t */\n\tgetQuality(): number {\n\t\treturn this.#quality;\n\t}\n\n\t/**\n\t * Calculates the average normalized difference for a vision type.\n\t *\n\t * @param vis - Vision type.\n\t * @returns The average normalized difference.\n\t */\n\taveNablaE(vis: Vision): number {\n\t\tlet sum: number = 0;\n\n\t\tfor (const [idx0, idx1] of this.#ads) {\n\t\t\tconst dE: number = this.#vals[idx0].differenceFrom(this.#vals[idx1]);\n\t\t\tconst de: number = this.getDifference(idx0, idx1, vis);\n\t\t\tsum += Math.abs(dE - de) / dE;\n\t\t}\n\t\treturn sum / this.#ads.length;\n\t}\n\n\t/**\n\t * Calculates the average delta E (color difference) between two schemes.\n\t *\n\t * @param org - Original scheme.\n\t * @param mod - Modified scheme.\n\t * @returns The average color difference.\n\t */\n\tstatic aveDeltaE(org: Scheme, mod: Scheme): number {\n\t\tlet sum: number = 0;\n\n\t\tfor (let i: number = 0; i < org.#vals.length; ++i) {\n\t\t\tconst dE: number = org.#vals[i].differenceFrom(mod.#vals[i]);\n\t\t\tsum += dE;\n\t\t}\n\t\treturn sum / org.size();\n\t}\n\n\t/**\n\t * Calculates the average delta H (hue difference) between two schemes.\n\t *\n\t * @param org - Original scheme.\n\t * @param mod - Modified scheme.\n\t * @returns The average hue difference.\n\t */\n\tstatic aveDeltaH(org: Scheme, mod: Scheme): number {\n\t\tlet sum: number = 0;\n\n\t\tfor (let i: number = 0; i < org.#vals.length; ++i) {\n\t\t\tconst o: Triplet = org.getColor(i).asPccs();\n\t\t\tconst m: Triplet = mod.getColor(i).asPccs();\n\t\t\tconst asH: number = Math.abs(m[0] - o[0]);\n\t\t\tconst dH: number = Math.min(asH, 24 - asH);\n\t\t\tsum += dH;\n\t\t}\n\t\treturn sum / org.size();\n\t}\n\n\t/**\n\t * Calculates the average delta T (tint difference) between two schemes.\n\t *\n\t * @param org - Original scheme.\n\t * @param mod - Modified scheme.\n\t * @returns The average tint difference.\n\t */\n\tstatic aveDeltaT(org: Scheme, mod: Scheme): number {\n\t\tlet sum: number = 0;\n\n\t\tfor (let i: number = 0; i < org.#vals.length; ++i) {\n\t\t\tconst o: Triplet = org.getColor(i).asPccs();\n\t\t\tconst m: Triplet = mod.getColor(i).asPccs();\n\t\t\tsum += Math.sqrt((m[1] - o[1]) * (m[1] - o[1]) + (m[2] - o[2]) * (m[2] - o[2]));\n\t\t}\n\t\treturn sum / org.size();\n\t}\n\n\t/**\n\t * Generates a string representing the lowest difference combinations by vision type.\n\t *\n\t * @returns A formatted string of the lowest difference combinations.\n\t */\n\ttoString(): string {\n\t\tconst tn: string[] = ['T', 'P', 'D', 'M'];\n\t\tconst vs: Vision[] = Object.keys(Vision).map(x => parseInt(x)).filter(x => !isNaN(x)) as Vision[];\n\t\tconst lc: Combination = this.getLowestDifferenceCombination();\n\t\tlet sb: string = '';\n\n\t\tfor (const [i, vis] of vs.entries()) {\n\t\t\tconst com: Combination = this.getLowestDifferenceCombination(vis);\n\t\t\tsb += `${(com == lc ? '*' : ' ')}${tn[i]}<${String(com.index1).padStart(2, '0')}, ${String(com.index2).padStart(2, '0')}>${com.diff.toFixed(2)}`;\n\t\t\tif (i < vs.length - 1) {\n\t\t\t\tsb += ', ';\n\t\t\t}\n\t\t}\n\t\treturn sb;\n\t}\n\n}\n", "/**\r\n * Class for generating relations between colors.\r\n * This class establishes constraints for color separation and preservation relations based on given parameters.\r\n *\r\n * Conditions are checked for various vision types and perceptual constraints.\r\n *\r\n * @author Takuto Yanagida\r\n * @version 2024-11-06\r\n */\r\n\r\nimport { FuzzyRelation, Relation } from 'stlics/stlics';\r\nimport { Scheme } from './scheme';\r\nimport { Value } from './value';\r\nimport { Vision } from './vision';\r\nimport { Parameters } from './parameters';\r\nimport { Candidates } from './candidates';\r\nimport { RelationFactory } from './relation-factory';\r\n\r\nexport class RelationFactory1 implements RelationFactory {\r\n\r\n\t#doCheckT: boolean;\r\n\t#doCheckP: boolean;\r\n\t#doCheckD: boolean;\r\n\t#doCheckM: boolean;\r\n\r\n\t#tarDiffT: number;\r\n\t#tarDiffP: number;\r\n\t#tarDiffD: number;\r\n\t#tarDiffL: number;\r\n\t#maxDiff : number;\r\n\r\n\t#doKeepHue: boolean;\r\n\t#hueTol   : number;\r\n\t#maxHueTol: number;\r\n\r\n\t#doKeepTone: boolean;\r\n\t#toneTol   : number;\r\n\t#maxToneTol: number;\r\n\r\n\t#doCheckConspicuity: boolean;\r\n\t#conspicuityRate   : number;\r\n\t#conspicuityArray  : number[];\r\n\r\n\t/**\r\n\t * Initializes the RelationFactory1 with a color scheme and parameter settings.\r\n\t *\r\n\t * @param s - Scheme instance providing color data.\r\n\t * @param param - Parameters instance for configuration values.\r\n\t */\r\n\tconstructor(s: Scheme, param: Parameters) {\r\n\t\tthis.#doCheckT = param.doCheckVision(Vision.TRICHROMACY);\r\n\t\tthis.#doCheckP = param.doCheckVision(Vision.PROTANOPIA);\r\n\t\tthis.#doCheckD = param.doCheckVision(Vision.DEUTERANOPIA);\r\n\t\tthis.#doCheckM = param.doCheckVision(Vision.MONOCHROMACY);\r\n\r\n\t\tthis.#tarDiffT = param.getTargetDifference(Vision.TRICHROMACY);\r\n\t\tthis.#tarDiffP = param.getTargetDifference(Vision.PROTANOPIA);\r\n\t\tthis.#tarDiffD = param.getTargetDifference(Vision.DEUTERANOPIA);\r\n\t\tthis.#tarDiffL = param.getTargetDifference(Vision.MONOCHROMACY);\r\n\r\n\t\tconst ds: number[] = [0];\r\n\t\tif (this.#doCheckT) ds.push(this.#tarDiffT - s.getLowestDifference(Vision.TRICHROMACY));\r\n\t\tif (this.#doCheckP) ds.push(this.#tarDiffP - s.getLowestDifference(Vision.PROTANOPIA));\r\n\t\tif (this.#doCheckD) ds.push(this.#tarDiffD - s.getLowestDifference(Vision.DEUTERANOPIA));\r\n\t\tif (this.#doCheckM) ds.push(this.#tarDiffL - s.getLowestDifference(Vision.MONOCHROMACY));\r\n\t\tthis.#maxDiff = Math.max(...ds);\r\n\r\n\t\tthis.#doKeepHue = param.doPreserveHue();\r\n\t\tthis.#hueTol    = param.getHueTolerance();\r\n\t\tthis.#maxHueTol = param.getMaximumHueDifference();\r\n\r\n\t\tthis.#doKeepTone = param.doPreserveTone();\r\n\t\tthis.#toneTol    = param.getToneTolerance();\r\n\t\tthis.#maxToneTol = param.getMaximumToneDifference();\r\n\r\n\t\tthis.#doCheckConspicuity = param.doCheckConspicuity();\r\n\t\tthis.#conspicuityRate    = param.getConspicuityRate();\r\n\t\tthis.#conspicuityArray   = this.#doCheckConspicuity ? s.getConspicuityArray() : [];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Relation instance between two colors.\r\n\t *\r\n\t * @param idx0 - Index of the first color.\r\n\t * @param idx1 - Index of the second color.\r\n\t * @param cans0 - Candidates instance for the first color.\r\n\t * @param cans1 - Candidates instance for the second color.\r\n\t * @param noPreservation - Specifies which index should skip preservation constraints; defaults to -1.\r\n\t * @returns A new Relation instance based on color separation and preservation constraints.\r\n\t */\r\n\tnewInstance(idx0: number, idx1: number, cans0: Candidates, cans1: Candidates, noPreservation: number = -1): Relation {\r\n\t\treturn new ColorRelation(this, idx0, idx1, cans0, cans1, noPreservation);\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\t/**\r\n\t * Computes the constraint satisfaction for separation constraints.\r\n\t *\r\n\t * @param cv0 - Value instance of the first color.\r\n\t * @param cv1 - Value instance of the second color.\r\n\t * @returns Satisfaction scale for separation constraints.\r\n\t */\r\n\tsepScale(cv0: Value, cv1: Value): number {\r\n\t\tlet dT: number = 1024, dP: number = 1024, dD: number = 1024, dM: number = 1024;\r\n\t\tif (this.#doCheckT) dT = this.#s2s(cv0.differenceFrom(cv1), this.#tarDiffT);\r\n\t\tif (this.#doCheckP) dP = this.#s2s(cv0.differenceFrom(cv1, Vision.PROTANOPIA), this.#tarDiffP);\r\n\t\tif (this.#doCheckD) dD = this.#s2s(cv0.differenceFrom(cv1, Vision.DEUTERANOPIA), this.#tarDiffD);\r\n\t\tif (this.#doCheckM) dM = this.#s2s(cv0.differenceFrom(cv1, Vision.MONOCHROMACY), this.#tarDiffL);\r\n\t\treturn Math.min(dT, dP, dD, dM);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the distance to a satisfaction scale based on target difference.\r\n\t *\r\n\t * @param d - Calculated difference.\r\n\t * @param tarD - Target difference for satisfaction.\r\n\t * @returns The satisfaction scale based on the difference to the target.\r\n\t */\r\n\t#s2s(d: number, tarD: number): number {\r\n\t\treturn 1 - (tarD - d) / this.#maxDiff;  // Proportional to the distance from the target difference\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the constraint satisfaction for preservation constraints.\r\n\t *\r\n\t * @param idx - Index of the color.\r\n\t * @param org - Original Value instance.\r\n\t * @param mod - Modified Value instance.\r\n\t * @returns Satisfaction scale for preservation constraints.\r\n\t */\r\n\tpreScale(idx: number, org: Value, mod: Value): number {\r\n\t\tif (!this.#doKeepHue && !this.#doKeepTone) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tconst [o0, o1, o2]: number[] = org.tone;\r\n\t\tconst [m0, m1, m2]: number[] = mod.tone;\r\n\r\n\t\tlet sH: number = 1024, sT: number = 1024;\r\n\t\tif (this.#doKeepHue) {\r\n\t\t\tconst d: number = Math.abs(m0 - o0);\r\n\t\t\tsH = this.#p2s(idx, d, this.#hueTol, this.#maxHueTol);\r\n\t\t}\r\n\t\tif (this.#doKeepTone) {\r\n\t\t\tconst d: number = Math.sqrt((m1 - o1) * (m1 - o1) + (m2 - o2) * (m2 - o2));\r\n\t\t\tsT = this.#p2s(idx, d, this.#toneTol, this.#maxToneTol);\r\n\t\t}\r\n\t\treturn Math.min(sH, sT);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the preservation difference to a satisfaction scale.\r\n\t *\r\n\t * @param idx - Index of the color.\r\n\t * @param d - Calculated difference.\r\n\t * @param tol - Tolerance value for satisfaction.\r\n\t * @param maxTol - Maximum allowed tolerance.\r\n\t * @returns The satisfaction scale based on preservation tolerance.\r\n\t */\r\n\t#p2s(idx: number, d: number, tol: number, maxTol: number): number {\r\n\t\tif (this.#doCheckConspicuity) {\r\n\t\t\ttol = tol * (1 - this.#conspicuityRate * this.#conspicuityArray[idx]);\r\n\t\t}\r\n\t\treturn (maxTol - d) / (maxTol - tol);\r\n\t}\r\n\r\n}\r\n\r\nclass ColorRelation implements FuzzyRelation {\r\n\r\n\t#that: RelationFactory1;\r\n\t#nop : number;  // Specifies which color index skips preservation (0 or 1)\r\n\t#idx0: number;\r\n\t#idx1: number;\r\n\r\n\t#cans0: Candidates;\r\n\t#cans1: Candidates;\r\n\t#orig0: Value;\r\n\t#orig1: Value;\r\n\r\n\t/**\r\n\t * Initializes a new SeparationRelation with specified candidates and constraints.\r\n\t *\r\n\t * @param that - The RelationFactory1 instance containing constraint data.\r\n\t * @param idx0 - Index of the first color.\r\n\t * @param idx1 - Index of the second color.\r\n\t * @param cans0 - Candidates instance for the first color.\r\n\t * @param cans1 - Candidates instance for the second color.\r\n\t * @param nop - Specifies which color index skips preservation constraints; 0 for the first color, 1 for the second color.\r\n\t */\r\n\tconstructor(that: RelationFactory1, idx0: number, idx1: number, cans0: Candidates, cans1: Candidates, nop: number) {\r\n\t\tthis.#that = that;\r\n\t\tthis.#nop  = nop;\r\n\t\tthis.#idx0 = idx0;\r\n\t\tthis.#idx1 = idx1;\r\n\r\n\t\tthis.#cans0 = cans0;\r\n\t\tthis.#cans1 = cans1;\r\n\t\tthis.#orig0 = cans0.getOriginal();\r\n\t\tthis.#orig1 = cans1.getOriginal();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the satisfaction degree based on values of two colors.\r\n\t *\r\n\t * @param val0 - Index of the first color candidate.\r\n\t * @param val1 - Index of the second color candidate.\r\n\t * @returns The degree of satisfaction for the relationship.\r\n\t */\r\n\tsatisfactionDegree(val0: number, val1: number): number {\r\n\t\tconst cv0: Value = this.#cans0.values()[val0];\r\n\t\tconst cv1: Value = this.#cans1.values()[val1];\r\n\r\n\t\tconst s : number = this.#sig(this.#that.sepScale(cv0, cv1));\r\n\t\tconst p0: number = (this.#nop === 0 || val0 === 0) ? 1 : this.#sig(this.#that.preScale(this.#idx0, this.#orig0, cv0));\r\n\t\tconst p1: number = (this.#nop === 1 || val1 === 0) ? 1 : this.#sig(this.#that.preScale(this.#idx1, this.#orig1, cv1));\r\n\t\treturn Math.min(s, p0, p1);\r\n\t}\r\n\r\n\t/**\r\n\t * Sigmoid function for adjusting satisfaction levels.\r\n\t *\r\n\t * @param s - Satisfaction scale.\r\n\t * @returns The sigmoid-adjusted satisfaction.\r\n\t */\r\n\t#sig(s: number): number {\r\n\t\treturn 1 / (1 + Math.exp(-12 * (s - 0.5)));\r\n\t}\r\n\r\n}\r\n", "/**\n * Represents a collection of candidate values, with one designated as the original.\n * Provides methods to access and modify the original value and check if it has been assigned.\n *\n * @author Takuto Yanagida\n * @version 2024-11-12\n */\n\nimport { Value } from './value';\n\nexport class Candidates {\n\n\t#orig: Value | null = null;\n\t#vs  : Value[] = [];\n\n\t/**\n\t * Retrieves the original value if assigned; otherwise, returns the first value in the candidates list.\n\t *\n\t * @returns The original value if assigned, or the first value in the candidate list.\n\t */\n\tgetOriginal(): Value {\n\t\tif (this.#orig !== null) {\n\t\t\treturn this.#orig;\n\t\t}\n\t\treturn this.#vs[0];\n\t}\n\n\t/**\n\t * Sets the specified value as the original value.\n\t *\n\t * @param original - The value to designate as the original.\n\t */\n\tsetOriginal(original: Value): void {\n\t\tthis.#orig = original;\n\t}\n\n\t/**\n\t * Checks if an original value has been assigned.\n\t *\n\t * @returns `true` if an original value has been assigned; otherwise, `false`.\n\t */\n\tisOriginalAssigned(): boolean {\n\t\treturn this.#orig !== null;\n\t}\n\n\t/**\n\t * Retrieves the list of candidate values.\n\t *\n\t * @returns An array of candidate values.\n\t */\n\tvalues(): Value[] {\n\t\treturn this.#vs;\n\t}\n\n}\n", "/**\n * Class for generating a domain of approximate colors.\n * This factory selects colors that satisfy all of the following conditions:\n * 1) Colors within the Voronoi-partitioned region.\n * 2) Colors representable in RGB.\n * 3) Colors within a maximum distance to adjacent colors in CIELAB.\n * 4) Colors within double the tolerance or maximum standard limits for hue and tone in PCCS.\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Voronoi } from 'voronoi/voronoi';\nimport { Scheme } from './scheme';\nimport { Value } from './value';\nimport { Parameters } from './parameters';\nimport { DomainFactory } from './domain-factory';\nimport { Candidates } from './candidates';\n\ntype Triplet = [number, number, number];\n\nexport class DomainFactory2 implements DomainFactory {\n\n\tstatic DEBUG: boolean = false;\n\n\tstatic MAX_DELTA_HUE : number = 12;  // Based on PCCS standard\n\tstatic MAX_DELTA_TONE: number = Math.sqrt(10 * 10 + 10 * 10);  // Based on PCCS standard\n\n\t#scheme        : Scheme;\n\t#res           : number;\n\t#doPreserveHue : boolean;\n\t#doPreserveTone: boolean;\n\t#dHueMax       : number;\n\t#dToneMax      : number;\n\n\t/**\n\t * Initializes the DomainFactory2 with a color scheme and parameter settings.\n\t *\n\t * @param s - Scheme instance for color data.\n\t * @param param - Parameters instance for configuration values.\n\t */\n\tconstructor(s: Scheme, param: Parameters) {\n\t\tthis.#scheme = s;\n\t\tthis.#res    = param.getResolution();\n\n\t\tthis.#doPreserveHue  = param.doPreserveHue();\n\t\tthis.#doPreserveTone = param.doPreserveTone();\n\n\t\tthis.#dHueMax  = Math.min(param.getHueTolerance() * 2, DomainFactory2.MAX_DELTA_HUE);\n\t\tthis.#dToneMax = Math.min(param.getToneTolerance() * 2, DomainFactory2.MAX_DELTA_TONE);\n\t}\n\n\t/**\n\t * Builds the color domain candidates, optionally omitting a specified index.\n\t *\n\t * @param omitIdx - Index to omit from domain construction; defaults to -1.\n\t * @returns An array of Candidates arrays, representing possible color approximations.\n\t */\n\tbuild(omitIdx: number = -1): Candidates[] {\n\t\tconst ret: (Candidates | null)[] = [];\n\t\tconst at : number[][] = this.#scheme.getAdjacencyTable(omitIdx);\n\t\tconst vp : Voronoi = this.#createVoronoiPartition(at);\n\n\t\tif (-1 === omitIdx) {\n\t\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\t\tconst cd: Candidates = new Candidates();\n\n\t\t\t\tif (!this.#scheme.isFixed(i)) {\n\t\t\t\t\tconst grid   : Triplet[] = vp.getGrids(i, this.#res);\n\t\t\t\t\tconst maxDiff: number = this.#getMaxDiff(at, i);\n\n\t\t\t\t\tfor (const c of grid) {\n\t\t\t\t\t\tconst cv: Value | null = Value.newInstance(c);\n\t\t\t\t\t\tif (cv === null) {\n\t\t\t\t\t\t\tcontinue;  // check saturation\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.#isCandidate(i, cv, maxDiff)) {\n\t\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!cd.values().length) {\n\t\t\t\t\tconst lab: Triplet = this.#scheme.getColor(i).asLab();\n\t\t\t\t\tconst cv : Value | null = Value.newInstance(lab);\n\n\t\t\t\t\tif (cv !== null) {\n\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tret.push(cd);\n\t\t\t}\n\t\t} else {\n\t\t\tlet fullDomSize : number = 0;\n\t\t\tlet fullDomIndex: number = -1;\n\n\t\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\t\tif (i === omitIdx) {\n\t\t\t\t\tret.push(null);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst cd  : Candidates = new Candidates();\n\t\t\t\tconst grid: Triplet[] = vp.getGrids(i, this.#res);\n\n\t\t\t\tif (!this.#scheme.isFixed(i)) {\n\t\t\t\t\tconst maxDiff: number = this.#getMaxDiff(at, i);\n\n\t\t\t\t\tfor (const c of grid) {\n\t\t\t\t\t\tconst cv: Value | null = Value.newInstance(c);\n\n\t\t\t\t\t\tif (cv === null) {\n\t\t\t\t\t\t\tcontinue;  // check saturation\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.#isCandidate(i, cv, maxDiff)) {\n\t\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!cd.values().length) {\n\t\t\t\t\tconst lab: Triplet = this.#scheme.getColor(i).asLab();\n\t\t\t\t\tconst cv : Value | null = Value.newInstance(lab);\n\n\t\t\t\t\tif (cv !== null) {\n\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tret.push(cd);\n\n\t\t\t\tif (fullDomSize < grid.length) {\n\t\t\t\t\tfullDomSize  = grid.length;\n\t\t\t\t\tfullDomIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tret[omitIdx] = this.#createFullDomain(fullDomIndex, vp);\n\t\t\tret[omitIdx].setOriginal(Value.newInstance(this.#scheme.getColor(omitIdx).asLab()) as Value);\n\t\t}\n\t\tif (DomainFactory2.DEBUG) {\n\t\t\tfor (const can of ret) {\n\t\t\t\tconsole.log('Candidate size: ' + (can as Candidates).values().length);\n\t\t\t}\n\t\t}\n\t\tthis.#printCandidateSize(ret as Candidates[]);\n\t\treturn ret as Candidates[];\n\t}\n\n\t/**\n\t * Calculates the maximum difference for the adjacent colors of a given index.\n\t *\n\t * @param adjTab - Adjacency table for the color scheme.\n\t * @param idx - Index for which to calculate the maximum adjacent color difference.\n\t * @returns The maximum difference to an adjacent color.\n\t */\n\t#getMaxDiff(adjTab: number[][], idx: number): number {\n\t\tconst rel: number[] = adjTab[idx];\n\t\tlet max: number = 0;\n\n\t\tfor (let i of rel) {\n\t\t\tconst d: number = this.#scheme.getDifference(idx, i);\n\t\t\tif (max < d) {\n\t\t\t\tmax = d;\n\t\t\t}\n\t\t}\n\t\tif (DomainFactory2.DEBUG) {\n\t\t\tconsole.log('DomainFactory: Max Distance: ' + max);\n\t\t}\n\t\treturn max;\n\t}\n\n\t/**\n\t * Creates a full domain of candidates for a specified index.\n\t *\n\t * @param idx - Index for which to create the full domain.\n\t * @param vp - Voronoi instance for partitioning.\n\t * @returns A Candidates instance representing the full color domain for the index.\n\t */\n\t#createFullDomain(idx: number, vp: Voronoi): Candidates {\n\t\tconst full = new Candidates();\n\t\tconst grid: Triplet[] = vp.getGrids(idx, this.#res);\n\n\t\tfor (const g of grid) {\n\t\t\tconst cv: Value | null = Value.newInstance(g);\n\t\t\tif (cv) {\n\t\t\t\tfull.values().push(cv);\n\t\t\t}\n\t\t}\n\t\treturn full;\n\t}\n\n\t/**\n\t * Creates a Voronoi partition based on an adjacency table.\n\t *\n\t * @param adjTab - Adjacency table defining relationships between color sites.\n\t * @returns A Voronoi instance representing the partitioned color space.\n\t */\n\t#createVoronoiPartition(adjTab: number[][]): Voronoi {\n\t\tconst vp: Voronoi = new Voronoi(0, 100, -127, 127, -127, 127);  // L, a, b\n\n\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\tvp.addSite(this.#scheme.getColor(i).asLab());\n\t\t}\n\t\tvp.createCells(adjTab);\n\t\treturn vp;\n\t}\n\n\t/**\n\t * Determines if a Value instance qualifies as a valid candidate based on max differences.\n\t *\n\t * @param idx - Index of the color in the scheme.\n\t * @param cv - Value instance to evaluate.\n\t * @param maxDiff - Maximum allowable difference to adjacent colors.\n\t * @returns True if the candidate is valid; otherwise, false.\n\t */\n\t#isCandidate(idx: number, cv: Value, maxDiff: number): boolean {\n\t\tif (maxDiff < this.#scheme.getColor(idx).differenceFrom(cv.getColor())) {\n\t\t\treturn false;\n\t\t}\n\t\tconst org: Triplet = this.#scheme.getColor(idx).asTone();\n\t\tconst can: Triplet = cv.getColor().asTone();\n\n\t\tif (this.#doPreserveHue) {\n\t\t\tconst as: number = Math.abs(can[0] - org[0]);\n\t\t\tconst d : number = Math.min(as, 24 - as);\n\n\t\t\tif (this.#dHueMax < d) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (this.#doPreserveTone) {\n\t\t\tconst d: number = (can[1] - org[1]) * (can[1] - org[1]) + (can[2] - org[2]) * (can[2] - org[2]);\n\n\t\t\tif (this.#dToneMax * this.#dToneMax < d) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Logs the size of each candidate set if debugging is enabled.\n\t *\n\t * @param ret - Array of Candidates representing potential colors.\n\t */\n\t#printCandidateSize(ret: Candidates[]): void {\n\t\tif (DomainFactory2.DEBUG) {\n\t\t\tfor (const r of ret) {\n\t\t\t\tconsole.log('DomainFactory: Candidate Size: ' + r.values().length);\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "/**\n * Class for generating relations between colors.\n * This class establishes constraints for color separation and preservation relations based on given parameters.\n *\n * Conditions are checked for various vision types and perceptual constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-11-12\n */\n\nimport { FuzzyRelation, Relation } from 'stlics/stlics';\nimport { Adjuster } from './adjuster';\nimport { Scheme } from './scheme';\nimport { Value } from './value';\nimport { Vision } from './vision';\nimport { Parameters } from './parameters';\nimport { Candidates } from './candidates';\nimport { RelationFactory } from './relation-factory';\nimport { DomainFactory2 } from './domain-factory2';\n\nexport class RelationFactory2 implements RelationFactory {\n\n\t#scheme: Scheme;\n\n\t#doCheckP: boolean;\n\t#doCheckD: boolean;\n\t#doCheckM: boolean;\n\n\t#ratioToTri: number = 1;  // Target color difference relative to trichromacy\n\t#maxDiff   : number = Number.NaN;\n\n\t#doKeepHue: boolean;\n\t#hueTol   : number;\n\t#maxHueD  : number;\n\n\t#doKeepTone: boolean;\n\t#toneTol   : number;\n\t#maxToneD  : number;\n\n\t#bottleneckColor: number;\n\n\t/**\n\t * Initializes the RelationFactory2 with a color scheme and parameter settings.\n\t *\n\t * @param s - Scheme instance providing color data.\n\t * @param p - Parameters instance for configuration values.\n\t * @param bottleneckColor - Optional index for the bottleneck color; defaults to -1.\n\t */\n\tconstructor(s: Scheme, p: Parameters, bottleneckColor: number = -1) {\n\t\tthis.#scheme = s;\n\n\t\tthis.#doCheckP = p.doCheckVision(Vision.PROTANOPIA);\n\t\tthis.#doCheckD = p.doCheckVision(Vision.DEUTERANOPIA);\n\t\tthis.#doCheckM = p.doCheckVision(Vision.MONOCHROMACY);\n\n\t\tthis.#doKeepHue = p.doPreserveHue();\n\t\tthis.#hueTol    = p.getHueTolerance();\n\t\tthis.#maxHueD   = Math.min(this.#hueTol * 2, DomainFactory2.MAX_DELTA_HUE);\n\n\t\tthis.#doKeepTone = p.doPreserveTone();\n\t\tthis.#toneTol    = p.getToneTolerance();\n\t\tthis.#maxToneD   = Math.min(this.#toneTol * 2, DomainFactory2.MAX_DELTA_TONE);\n\n\t\tthis.#bottleneckColor = bottleneckColor;\n\t}\n\n\t/**\n\t * Creates a new Relation instance between two colors.\n\t *\n\t * @param _idx0 - Index of the first color.\n\t * @param _idx1 - Index of the second color.\n\t * @param cans0 - Candidates instance for the first color.\n\t * @param cans1 - Candidates instance for the second color.\n\t * @param noPreservation - Specifies which index should skip preservation constraints; defaults to -1.\n\t * @returns A new Relation instance based on color separation and preservation constraints.\n\t */\n\tnewInstance(_idx0: number, _idx1: number, cans0: Candidates, cans1: Candidates, noPreservation: number = -1): Relation {\n\t\tif (noPreservation !== 0 && noPreservation !== 1) {\n\t\t\tthis.#updateRatioToTrichromacy(cans0, cans1);\n\t\t}\n\t\treturn new ColorRelation(this, this.#ratioToTri, cans0, cans1, noPreservation);\n\t}\n\n\t/**\n\t * Updates the ratio to trichromacy by calculating the average color difference for vision types.\n\t *\n\t * @param cans0 - Candidates instance for the first color.\n\t * @param cans1 - Candidates instance for the second color.\n\t */\n\t#updateRatioToTrichromacy(cans0: Candidates, cans1: Candidates): void {\n\t\tconst orig0: Value = cans0.getOriginal();\n\t\tconst orig1: Value = cans1.getOriginal();\n\t\tlet maxDiff: number = 0;\n\n\t\tfor (const v0 of cans0.values()) {\n\t\t\tif (this.preScale(orig0, v0) < 1) {\n\t\t\t\tcontinue;  // Since 1 is not obtained through the sigmoid function, compare with Scale\n\t\t\t}\n\t\t\tfor (const v1 of cans1.values()) {\n\t\t\t\tif (this.preScale(orig1, v1) < 1) {\n\t\t\t\t\tcontinue;  // Since 1 is not obtained through the sigmoid function, compare with Scale\n\t\t\t\t}\n\t\t\t\tlet dP: number = 1024, dD: number = 1024, dM: number = 1024;\n\t\t\t\tlet sum: number = 0;\n\t\t\t\tlet div: number = 0;\n\n\t\t\t\tif (this.#doCheckP) {\n\t\t\t\t\tdP = v0.differenceFrom(v1, Vision.PROTANOPIA);\n\t\t\t\t\tsum += dP;\n\t\t\t\t\tdiv += 1;\n\t\t\t\t}\n\t\t\t\tif (this.#doCheckD) {\n\t\t\t\t\tdD = v0.differenceFrom(v1, Vision.DEUTERANOPIA);\n\t\t\t\t\tsum += dD;\n\t\t\t\t\tdiv += 1;\n\t\t\t\t}\n\t\t\t\tif (this.#doCheckM) {\n\t\t\t\t\tdM = v0.differenceFrom(v1, Vision.MONOCHROMACY);\n\t\t\t\t\tsum += dM;\n\t\t\t\t\tdiv += 1;\n\t\t\t\t}\n\t\t\t\t// const min: number = Math.min(dP, dD, dM);\n\t\t\t\tconst ave: number = sum / div;\n\n\t\t\t\tconst d: number = ave;  // Using average (ave) gives slightly better results\n\t\t\t\tif (maxDiff < d) maxDiff = d;\n\t\t\t}\n\t\t}\n\t\tconst r: number = maxDiff / orig0.differenceFrom(orig1);\n\t\tif (r < this.#ratioToTri) this.#ratioToTri = r;\n\t}\n\n\t/**\n\t * Calculates the maximum difference between the target color difference\n\t * and the current color difference for each adjacent color in the specified color vision type.\n\t */\n\tvalidateMaxDiff(): void {\n\t\tif (!Number.isNaN(this.#maxDiff)) {\n\t\t\treturn;\n\t\t}\n\t\tif (Adjuster.DEBUG) {\n\t\t\tconsole.log('RelationFactory: Ratio to trichromacy: ' + this.#ratioToTri);\n\t\t}\n\t\tlet max: number = 0;\n\t\tfor (const [i0, i1] of this.#scheme.getAdjacencies()) {\n\t\t\tif (i0 === this.#bottleneckColor || i1 === this.#bottleneckColor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.#scheme.isFixed(i0) && this.#scheme.isFixed(i1)) {\n\t\t\t\tcontinue;  // No constraints if both colors are fixed\n\t\t\t}\n\t\t\tconst dT: number = this.#scheme.getDifference(i0, i1, Vision.TRICHROMACY);\n\t\t\tlet dP: number = 1024, dD: number = 1024, dM: number = 1024;\n\t\t\tlet sum: number = 0;\n\t\t\tlet div: number = 0;\n\n\t\t\tif (this.#doCheckP) {\n\t\t\t\tdP = this.#scheme.getDifference(i0, i1, Vision.PROTANOPIA);\n\t\t\t\tsum += dP;\n\t\t\t\tdiv += 1;\n\t\t\t}\n\t\t\tif (this.#doCheckD) {\n\t\t\t\tdD = this.#scheme.getDifference(i0, i1, Vision.DEUTERANOPIA);\n\t\t\t\tsum += dD;\n\t\t\t\tdiv += 1;\n\t\t\t}\n\t\t\tif (this.#doCheckM) {\n\t\t\t\tdM = this.#scheme.getDifference(i0, i1, Vision.MONOCHROMACY);\n\t\t\t\tsum += dM;\n\t\t\t\tdiv += 1;\n\t\t\t}\n\t\t\t// const min: number = Math.min(dP, dD, dM);\n\t\t\tconst ave: number = sum / div;\n\n\t\t\tconst d: number = ave;  // Using average (ave) gives slightly better results\n\t\t\tconst D: number = Math.abs(dT * this.#ratioToTri - d);  // Use absolute value when calculating MaxDeltaDst\n\t\t\tif (max < D) max = D;\n\t\t}\n\t\tif (Adjuster.DEBUG) {\n\t\t\tconsole.log('RelationFactory: Max Delta Distance: ' + max);\n\t\t}\n\t\tthis.#maxDiff = max;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Calculates satisfaction for separation constraints based on target color difference.\n\t *\n\t * @param v0 - Value instance of the first color.\n\t * @param v1 - Value instance of the second color.\n\t * @param tarDiff - Target difference to satisfy.\n\t * @returns Satisfaction scale for separation constraints.\n\t */\n\tsepScale(v0: Value, v1: Value, tarDiff: number): number {\n\t\tlet dP: number = 1024, dD: number = 1024, dM: number = 1024;\n\t\tlet sum: number = 0;\n\t\tlet div: number = 0;\n\n\t\tif (this.#doCheckP) {\n\t\t\tdP = v0.differenceFrom(v1, Vision.PROTANOPIA);\n\t\t\tsum += dP;\n\t\t\tdiv += 1;\n\t\t}\n\t\tif (this.#doCheckD) {\n\t\t\tdD = v0.differenceFrom(v1, Vision.DEUTERANOPIA);\n\t\t\tsum += dD;\n\t\t\tdiv += 1;\n\t\t}\n\t\tif (this.#doCheckM) {\n\t\t\tdM = v0.differenceFrom(v1, Vision.MONOCHROMACY);\n\t\t\tsum += dM;\n\t\t\tdiv += 1;\n\t\t}\n\t\tconst min: number = Math.min(dP, dD, dM);\n\t\t// const ave: number = sum / div;\n\n\t\tconst d: number = min;  // AVE or MIN\n\t\treturn 1 - Math.abs(tarDiff - d) / this.#maxDiff;  // Based on distance to target color difference\n\t}\n\n\t/**\n\t * Calculates satisfaction for preservation constraints based on hue and tone tolerance.\n\t *\n\t * @param org - Original Value instance.\n\t * @param mod - Modified Value instance.\n\t * @returns Satisfaction scale for preservation constraints.\n\t */\n\tpreScale(org: Value, mod: Value): number {\n\t\tif (org.getColor().asInteger() === mod.getColor().asInteger()) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!this.#doKeepHue && !this.#doKeepTone) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst [o0, o1, o2]: number[] = org.tone;\n\t\tconst [m0, m1, m2]: number[] = mod.tone;\n\n\t\tlet sH: number = 1024, sT: number = 1024;\n\t\tlet sum: number = 0;\n\t\tlet div: number = 0;\n\n\t\tif (this.#doKeepHue) {\n\t\t\tconst d: number = Math.abs(m0 - o0);\n\t\t\tconst D: number = Math.min(d, 24 - d);\n\t\t\tsH = 1 - (D - this.#hueTol) / (this.#maxHueD - this.#hueTol);\n\t\t\tsum += sH;\n\t\t\tdiv += 1;\n\t\t}\n\t\tif (this.#doKeepTone) {\n\t\t\tconst d: number = Math.sqrt((m1 - o1) * (m1 - o1) + (m2 - o2) * (m2 - o2));\n\t\t\tsT = 1 - (d - this.#toneTol) / (this.#maxToneD - this.#toneTol);\n\t\t\tsum += sT;\n\t\t\tdiv += 1;\n\t\t}\n\t\tconst min: number = Math.min(sH, sT);\n\t\t// const ave: number = sum / div;\n\n\t\treturn min;  // AVE or MIN\n\t}\n\n}\n\nclass ColorRelation implements FuzzyRelation {\n\n\t#that: RelationFactory2;\n\t#nop : number;  // Specifies which color index skips preservation (0 or 1)\n\n\t#cans0: Candidates;\n\t#cans1: Candidates;\n\t#orig0: Value;\n\t#orig1: Value;\n\n\t#tarDiff: number;\n\n\t/**\n\t * Initializes a new SeparationRelation with specified candidates and constraints.\n\t *\n\t * @param that - The RelationFactory2 instance containing constraint data.\n\t * @param ratioToTri - Ratio to trichromacy for target difference.\n\t * @param cans0 - Candidates instance for the first color.\n\t * @param cans1 - Candidates instance for the second color.\n\t * @param nop - Specifies which color index skips preservation constraints; 0 for the first color, 1 for the second color.\n\t */\n\tconstructor(that: RelationFactory2, ratioToTri: number, cans0: Candidates, cans1: Candidates, nop: number) {\n\t\tthis.#that = that;\n\t\tthis.#nop  = nop;\n\n\t\tthis.#cans0 = cans0;\n\t\tthis.#cans1 = cans1;\n\t\tthis.#orig0 = cans0.getOriginal();\n\t\tthis.#orig1 = cans1.getOriginal();\n\n\t\tthis.#tarDiff = this.#orig0.differenceFrom(this.#orig1) * ratioToTri;\n\t}\n\n\t/**\n\t * Calculates the satisfaction degree based on values of two colors.\n\t *\n\t * @param val0 - Index of the first color candidate.\n\t * @param val1 - Index of the second color candidate.\n\t * @returns The degree of satisfaction for the relationship.\n\t */\n\tsatisfactionDegree(val0: number, val1: number): number {\n\t\tthis.#that.validateMaxDiff();  // Called here as it needs to be evaluated after all constraints are created\n\t\tconst cv0: Value = this.#cans0.values()[val0];\n\t\tconst cv1: Value = this.#cans1.values()[val1];\n\n\t\tconst s : number = this.#sig(this.#that.sepScale(cv0, cv1, this.#tarDiff));\n\t\tconst p0: number = (this.#nop === 0) ? 1 : this.#sig(this.#that.preScale(this.#orig0, cv0));\n\t\tconst p1: number = (this.#nop === 1) ? 1 : this.#sig(this.#that.preScale(this.#orig1, cv1));\n\n\t\t// const ave: number = ((p0 + p1) / 2 + s) / 2;\n\t\tconst min: number = Math.min(s, p0, p1);\n\t\treturn min;  // AVE or MIN\n\t}\n\n\t/**\n\t * Applies a sigmoid function for satisfaction adjustment.\n\t *\n\t * @param s - Satisfaction scale.\n\t * @returns The sigmoid-adjusted satisfaction.\n\t */\n\t#sig(s: number): number {\n\t\treturn 1 / (1 + Math.exp(-9.19 * (s - 0.5)));  // 12 -> 9.19\n\t}\n\n}\n", "/**\n * Class for generating domains of approximate colors.\n * This factory produces candidates based on various color constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Voronoi } from 'voronoi/voronoi';\nimport { Scheme } from './scheme';\nimport { Value } from './value';\nimport { Parameters } from './parameters';\nimport { DomainFactory } from './domain-factory';\nimport { Candidates } from './candidates';\n\ntype Triplet = [number, number, number];\n\nexport class DomainFactory1 implements DomainFactory {\n\n\tstatic DEBUG: boolean = false;\n\n\t#scheme        : Scheme;\n\t#res           : number;\n\t#doPreserveHue : boolean;\n\t#doPreserveTone: boolean;\n\t#dHueMax       : number;\n\t#dToneMax      : number;\n\t#maxDiff       : number;\n\n\t/**\n\t * Initializes the DomainFactory1 with a color scheme and parameter settings.\n\t *\n\t * @param s - Scheme instance for color data.\n\t * @param param - Parameters instance for configuration values.\n\t */\n\tconstructor(s: Scheme, param: Parameters) {\n\t\tthis.#scheme = s;\n\t\tthis.#res    = param.getResolution();\n\n\t\tthis.#doPreserveHue  = param.doPreserveHue();\n\t\tthis.#doPreserveTone = param.doPreserveTone();\n\n\t\tthis.#dHueMax  = param.getMaximumHueDifference();\n\t\tthis.#dToneMax = param.getMaximumToneDifference();\n\t\tthis.#maxDiff  = param.getMaximumDifference();\n\t}\n\n\t/**\n\t * Builds the color domain candidates, optionally omitting a specified index.\n\t *\n\t * @param omitIdx - Index to omit from domain construction; defaults to -1.\n\t * @returns An array of Candidates arrays, representing possible color approximations.\n\t */\n\tbuild(omitIdx: number = -1): Candidates[] {\n\t\tconst ret: (Candidates | null)[] = [];\n\t\tconst vp : Voronoi = this.#createVoronoiPartition(this.#scheme.getAdjacencyTable(omitIdx));\n\n\t\tif (-1 === omitIdx) {\n\t\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\t\tconst cd: Candidates = new Candidates();\n\n\t\t\t\tif (!this.#scheme.isFixed(i)) {\n\t\t\t\t\tconst grid: Triplet[] = vp.getGrids(i, this.#res);\n\n\t\t\t\t\tfor (const c of grid) {\n\t\t\t\t\t\tconst cv: Value | null = Value.newInstance(c);\n\t\t\t\t\t\tif (cv === null) {\n\t\t\t\t\t\t\tcontinue;  // check saturation\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.#isCandidate(i, cv)) {\n\t\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!cd.values().length) {\n\t\t\t\t\tconst lab: Triplet = this.#scheme.getColor(i).asLab();\n\t\t\t\t\tconst cv : Value | null = Value.newInstance(lab);\n\n\t\t\t\t\tif (cv !== null) {\n\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tret.push(cd);\n\t\t\t}\n\t\t} else {\n\t\t\tlet fullDom: Candidates | null = null;\n\n\t\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\t\tif (i === omitIdx) {\n\t\t\t\t\tret.push(null);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst cd  : Candidates = new Candidates();\n\t\t\t\tconst full: Candidates = new Candidates();\n\n\t\t\t\tif (!this.#scheme.isFixed(i)) {\n\t\t\t\t\tconst grid: Triplet[] = vp.getGrids(i, this.#res);\n\n\t\t\t\t\tfor (const c of grid) {\n\t\t\t\t\t\tconst cv: Value | null = Value.newInstance(c);\n\n\t\t\t\t\t\tif (cv === null) {\n\t\t\t\t\t\t\tcontinue;  // check saturation\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.#isCandidate(i, cv)) {\n\t\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfull.values().push(cv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!cd.values().length) {\n\t\t\t\t\tconst lab: Triplet = this.#scheme.getColor(i).asLab();\n\t\t\t\t\tconst cv : Value | null = Value.newInstance(lab);\n\n\t\t\t\t\tif (cv !== null) {\n\t\t\t\t\t\tcd.values().push(cv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tret.push(cd);\n\n\t\t\t\tif (fullDom == null || fullDom.values().length < full.values().length) {\n\t\t\t\t\tfullDom = full;\n\t\t\t\t}\n\t\t\t}\n\t\t\tret[omitIdx] = fullDom as Candidates;\n\n\t\t}\n\t\tif (DomainFactory1.DEBUG) {\n\t\t\tfor (const can of ret) {\n\t\t\t\tconsole.log('Candidate size: ' + (can as Candidates).values().length);\n\t\t\t}\n\t\t}\n\t\tthis.#printCandidateSize(ret as Candidates[]);\n\t\treturn ret as Candidates[];\n\t}\n\n\t/**\n\t * Creates a Voronoi partition based on an adjacency table.\n\t *\n\t * @param adjTab - Adjacency table defining relationships between color sites.\n\t * @returns A Voronoi instance representing the partitioned color space.\n\t */\n\t#createVoronoiPartition(adjTab: number[][]): Voronoi {\n\t\tconst vp = new Voronoi(0, 100, -127, 127, -127, 127);  // L, a, b\n\n\t\tfor (let i: number = 0; i < this.#scheme.size(); ++i) {\n\t\t\tvp.addSite(this.#scheme.getColor(i).asLab());\n\t\t}\n\t\tvp.createCells(adjTab);\n\t\treturn vp;\n\t}\n\n\t/**\n\t * Checks if a Value instance qualifies as a valid candidate for a given index.\n\t *\n\t * @param idx - Index of the color in the scheme.\n\t * @param cv - Value instance to evaluate.\n\t * @returns True if the candidate is valid; otherwise, false.\n\t */\n\t#isCandidate(idx: number, cv: Value): boolean {\n\t\tif (this.#maxDiff < this.#scheme.getColor(idx).differenceFrom(cv.getColor())) {\n\t\t\treturn false;\n\t\t}\n\t\tconst org: Triplet = this.#scheme.getColor(idx).asTone();\n\t\tconst can: Triplet = cv.getColor().asTone();\n\n\t\tif (this.#doPreserveHue) {\n\t\t\tconst as: number = Math.abs(can[0] - org[0]);\n\t\t\tconst d : number = Math.min(as, 24 - as);\n\n\t\t\tif (this.#dHueMax < d) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (this.#doPreserveTone) {\n\t\t\tconst d: number = (org[1] - can[1]) * (org[1] - can[1]) + (org[2] - can[2]) * (org[2] - can[2]);\n\n\t\t\tif (this.#dToneMax * this.#dToneMax < d) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Logs the size of each candidate set if debugging is enabled.\n\t *\n\t * @param ret - Array of Candidates representing potential colors.\n\t */\n\t#printCandidateSize(ret: Candidates[]): void {\n\t\tif (DomainFactory1.DEBUG) {\n\t\t\tfor (const r of ret) {\n\t\t\t\tconsole.log('DomainFactory: Candidate Size: ' + r.values().length);\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "/**\n * Class representing a color adjustment system.\n * Provides methods to adjust color schemes based on a variety of parameters and constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-12-12\n */\n\nimport { Problem, Domain, Solver, AssignmentList, FuzzyForwardChecking, SRS3, FuzzyBreakout } from 'stlics/stlics';\n\nimport { Parameters, SolverType } from './parameters';\nimport { Scheme } from './scheme';\nimport { Candidates } from './candidates';\nimport { Value } from './value';\nimport { RelationFactory } from './relation-factory';\nimport { RelationFactory1 } from './relation-factory1';\nimport { RelationFactory2 } from './relation-factory2';\nimport { DomainFactory1 } from './domain-factory1';\nimport { DomainFactory2 } from './domain-factory2';\n\nexport class Adjuster {\n\n\tstatic DEBUG: boolean = true;\n\n\t#param: Parameters = new Parameters();\n\t#als  : ((s: Scheme, degree: number) => boolean)[] = [];\n\n\t#org! : Scheme;\n\t#cans!: Candidates[];\n\t#mod! : Scheme;\n\n\t/**\n\t * Initializes an instance of `Adjuster` with optional parameters.\n\t *\n\t * @param param - Optional parameters for the color adjustment system.\n\t */\n\tconstructor(param: Parameters | null = null) {\n\t\tif (param) {\n\t\t\tthis.#param = param;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the current parameters for color adjustment.\n\t *\n\t * @returns The current `Parameters` instance.\n\t */\n\tgetParameters(): Parameters {\n\t\treturn this.#param;\n\t}\n\n\t/**\n\t * Sets the parameters for color adjustment.\n\t *\n\t * @param param - The `Parameters` instance to set.\n\t */\n\tsetParameters(param: Parameters): void {\n\t\tthis.#param = param;\n\t}\n\n\t/**\n\t * Adds a listener to the adjuster, which will be notified of proposed color adjustments.\n\t *\n\t * @param al - The `AdjusterListener` instance to add.\n\t */\n\taddListener(al: ((s: Scheme, degree: number) => boolean)): void {\n\t\tthis.#als.push(al);\n\t}\n\n\t/**\n\t * Removes a listener from the adjuster.\n\t *\n\t * @param al - The `AdjusterListener` instance to remove.\n\t */\n\tremoveListener(al: ((s: Scheme, degree: number) => boolean)): void {\n\t\tconst i: number = this.#als.indexOf(al);\n\t\tif (-1 !== i) {\n\t\t\tthis.#als.splice(i, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the color scheme based on the provided original scheme and constraints.\n\t *\n\t * @param org - The original color scheme to adjust.\n\t * @returns The adjusted color scheme or `null` if no solution was found.\n\t */\n\tadjust(org: Scheme): Scheme | null {\n\t\tthis.#org = org;\n\n\t\tlet p: Problem;\n\t\tif (this.#param.isBottleneckResolved()) {\n\t\t\tp = this.#createProblemWithBottleneck(this.#org.getBottleneckIndex());\n\t\t} else {\n\t\t\tp = this.#createProblem();\n\t\t}\n\t\torg.setQualityInternally(p.worstSatisfactionDegree());\n\n\t\tconst s: Solver = this.#createSolver(p);\n\t\ttry {\n\t\t\tif (!s.solve()) {\n\t\t\t\tif (Adjuster.DEBUG) {\n\t\t\t\t\tconsole.log('Adjuster: No solution found.');\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tif (Adjuster.DEBUG) {\n\t\t\t\tconsole.log('Adjuster: Exception occurred: ' + (ex as Error).toString());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn this.#mod;\n\t}\n\n\t/**\n\t * Creates a `Problem` instance representing the constraints and relations between colors.\n\t *\n\t * @returns A `Problem` instance based on the current parameters.\n\t */\n\t#createProblem(): Problem {\n\t\tlet rf: RelationFactory;\n\t\tif (this.#param.isRatioModeEnabled()) {\n\t\t\trf         = new RelationFactory2(this.#org, this.#param);\n\t\t\tthis.#cans = new DomainFactory2(this.#org, this.#param).build();\n\t\t} else {\n\t\t\trf         = new RelationFactory1(this.#org, this.#param);\n\t\t\tthis.#cans = new DomainFactory1(this.#org, this.#param).build();\n\t\t}\n\t\tconst p: Problem = new Problem();\n\t\tfor (const can of this.#cans) {\n\t\t\tp.createVariable({\n\t\t\t\tname  : 'v',\n\t\t\t\tdomain: p.createDomain({\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tmax: can.values().length - 1\n\t\t\t\t}) as Domain,\n\t\t\t\tvalue: 0,\n\t\t\t});\n\t\t}\n\t\tfor (const [idx0, idx1] of this.#org.getAdjacencies()) {\n\t\t\tif (this.#org.isFixed(idx0) && this.#org.isFixed(idx1)) {  // No constraints if both are fixed colors\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet nom: number = -1;\n\t\t\tif (this.#org.isFixed(idx0)) nom = 0;\n\t\t\tif (this.#org.isFixed(idx1)) nom = 1;\n\n\t\t\tp.createConstraint({\n\t\t\t\trelation : rf.newInstance(idx0, idx1, this.#cans[idx0], this.#cans[idx1], nom),\n\t\t\t\tvariables: [p.variableAt(idx0), p.variableAt(idx1)],\n\t\t\t});\n\t\t}\n\t\treturn p;\n\t}\n\n\t/**\n\t * Creates a `Problem` instance while considering a bottleneck constraint.\n\t *\n\t * @param bottleneck - The index of the bottleneck to consider.\n\t * @returns A `Problem` instance with bottleneck constraints applied.\n\t */\n\t#createProblemWithBottleneck(bottleneck: number): Problem {\n\t\tlet rf: RelationFactory;\n\t\tif (this.#param.isRatioModeEnabled()) {\n\t\t\trf         = new RelationFactory2(this.#org, this.#param, bottleneck);\n\t\t\tthis.#cans = new DomainFactory2(this.#org, this.#param).build(bottleneck);\n\t\t} else {\n\t\t\trf         = new RelationFactory1(this.#org, this.#param);\n\t\t\tthis.#cans = new DomainFactory1(this.#org, this.#param).build(bottleneck);\n\t\t}\n\t\tconst p: Problem = new Problem();\n\t\tfor (const can of this.#cans) {\n\t\t\tp.createVariable({\n\t\t\t\tname  : 'v',\n\t\t\t\tdomain: p.createDomain({\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tmax: can.values().length - 1\n\t\t\t\t}) as Domain,\n\t\t\t\tvalue : 0\n\t\t\t});\n\t\t}\n\t\tfor (const [idx0, idx1] of this.#org.getAdjacencies()) {\n\t\t\tif (this.#org.isFixed(idx0) && this.#org.isFixed(idx1)) {  // No constraints if both are fixed colors\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet nom: number = -1;\n\t\t\tif (idx0 == bottleneck || this.#org.isFixed(idx0)) nom = 0;\n\t\t\tif (idx1 == bottleneck || this.#org.isFixed(idx1)) nom = 1;\n\n\t\t\tp.createConstraint({\n\t\t\t\trelation : rf.newInstance(idx0, idx1, this.#cans[idx0], this.#cans[idx1], nom),\n\t\t\t\tvariables: [p.variableAt(idx0), p.variableAt(idx1)],\n\t\t\t});\n\t\t}\n\t\treturn p;\n\t}\n\n\t/**\n\t * Creates a solver for the specified problem, based on the solver type in the parameters.\n\t *\n\t * @param p - The problem to solve.\n\t * @returns A `Solver` instance configured with the current parameters.\n\t */\n\t#createSolver(p: Problem): Solver {\n\t\tlet s: Solver;\n\n\t\tswitch (this.#param.getSolverType()) {\n\t\t\tcase SolverType.FC:\n\t\t\tdefault:\n\t\t\t\ts = new FuzzyForwardChecking(p);\n\t\t\t\t(s as FuzzyForwardChecking).setUsingMinimumRemainingValuesHeuristics(true);\n\t\t\t\t(s as FuzzyForwardChecking).setIncrementStepOfWorstSatisfactionDegree(0.05);\n\t\t\t\tbreak;\n\t\t\tcase SolverType.SRS3:\n\t\t\t\ts = new SRS3(p);\n\t\t\t\t(s as SRS3).setRandomness(false);\n\t\t\t\tbreak;\n\t\t\tcase SolverType.FUZZY_BREAKOUT:\n\t\t\t\ts = new FuzzyBreakout(p);\n\t\t\t\t(s as FuzzyBreakout).setRandomness(false);\n\t\t\t\tbreak;\n\t\t}\n\t\ts.setTimeLimit(this.#param.getTimeLimit());\n\t\ts.setTargetRate(this.#param.getTargetDesirability());\n\n\t\ts.addListener((solution: AssignmentList, worstDegree: number): boolean => {\n\t\t\treturn this.#notifyResult(solution, worstDegree);\n\t\t});\n\t\treturn s;\n\t}\n\n\t/**\n\t * Notifies listeners with the results of the color adjustment solution.\n\t *\n\t * @param solution - The solution obtained by the solver.\n\t * @param worstDegree - The worst satisfaction degree of the solution.\n\t * @returns `true` if the search should finish; otherwise, `false`.\n\t */\n\t#notifyResult(solution: AssignmentList, worstDegree: number): boolean {\n\t\tconst res: number[] = [];\n\n\t\tfor (let i: number = 0; i < this.#org.size(); ++i) {\n\t\t\tconst val: number = solution.at(i).value();\n\t\t\tconst cv : Value  = this.#cans[i].values()[val];\n\t\t\tres.push(cv.getColor().asInteger());\n\t\t}\n\n\t\tthis.#mod = new Scheme(res, this.#org.getAdjacencies(), null, worstDegree);\n\t\tlet finish: boolean = (worstDegree > 0.999);  // Automatic termination\n\n\t\tfor (const al of this.#als) {\n\t\t\tif (al(this.#mod, worstDegree)) {\n\t\t\t\tfinish = true;\n\t\t\t}\n\t\t}\n\t\treturn finish;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["Element", "#index", "#name", "index", "name", "Variable", "_Variable", "Element", "#INVALID", "#owner", "#d", "#v", "#cs", "owner", "d", "n", "np", "v", "index", "c", "xs", "x", "i", "value", "Domain", "DomainRanged", "Domain", "#min", "#max", "min", "max", "v", "index", "DomainArbitrary", "Domain", "#vs", "vs", "v", "index", "Constraint", "_Constraint", "Element", "r", "n", "np", "s", "sn", "Constraint1", "Constraint", "#xs", "r", "x", "index", "cs", "c", "sd", "cd", "v", "s", "Constraint2", "Constraint", "#xs", "r", "x1", "x2", "index", "x", "cs", "c", "n", "sd", "cd", "v1", "v2", "d1", "d2", "s", "Constraint3", "Constraint", "#xs", "r", "x1", "x2", "x3", "index", "x", "cs", "c", "n", "sd", "cd", "v1", "v2", "v3", "d1", "d2", "d3", "s", "ConstraintN", "Constraint", "#xs", "#vs", "r", "xs", "index", "x", "cs", "c", "n", "i", "sd", "emptyIndices", "currentStep", "cd", "d", "v", "s", "Problem", "#fv", "o", "d", "Variable", "#fc", "r", "xs", "Constraint1", "Constraint2", "Constraint3", "ConstraintN", "#isFuzzy", "#xs", "#cs", "fn", "x", "args", "DomainArbitrary", "DomainRanged", "c", "index", "i", "comparator", "name", "v1", "v2", "cs", "cur", "s", "Constraint", "ave", "n", "Solver", "#debugOutput", "#listeners", "pro", "count", "msec", "rate", "l", "solution", "worstDegree", "finish", "flag", "fn", "str", "Assignment", "#x", "#v", "args", "AssignmentList", "_AssignmentList", "xs", "al", "#as", "p", "x", "Assignment", "a", "variable", "value", "diff", "index", "DomainPruner", "_DomainPruner", "#UNHIDDEN", "#hiddenLevels", "#hiddenSize", "size", "index", "level", "i", "FuzzyForwardChecking", "_FuzzyForwardChecking", "Solver", "#xs", "#sol", "AssignmentList", "#relCons", "#solWorstDeg", "#iterCount", "#endTime", "#useMRV", "#degInc", "#sequence", "#unaryCons", "#checkedCons", "#pruneIntensively", "p", "worstSatisfactionDegree", "#initializeRelatedConstraintTable", "temp", "c", "flag", "degree", "rate", "e", "j", "i", "#getConstraintsBetween", "vi_index", "vj_index", "#pruneUnaryConstraints", "x", "orgVal", "d", "dp", "n", "#checkForwardConsistency", "level", "vi", "d_i", "dp_i", "#checkForwardConsistency2", "vj", "d_j", "dp_j", "loop_i", "ni", "nj", "#checkForwardConsistency3", "vk", "d_k", "dp_k", "k", "nk", "#checkForwardConsistencyN", "v_i", "emptySize", "emp", "indexes", "comLoop", "hidden", "#checkForward", "index", "x_i", "cs", "#checkBackwardConsistency", "vc", "s", "Constraint", "#refresh", "index_x_i", "x_j", "#indexOfVariableWithMRV", "size", "#branch", "bc", "xc_index", "xc", "nextLevel", "#branchLast", "deg", "DomainPruner", "success", "FuzzyBreakout", "Solver", "#isRandom", "#ws", "#lastSolDeg", "p", "flag", "#findCandidates", "worstXs", "canList", "maxDiff", "x", "x_v", "nowVio", "c", "out", "v", "diff", "#listWorstVariables", "worstCs", "xs", "endTime", "iterCount", "deg", "AssignmentList", "sol", "vcs", "wsd", "a", "SRS3", "_SRS3", "Solver", "#closedList", "#openList", "#nodes", "#neighborConstraints", "#c_stars", "#iterCount", "#endTime", "#isRandom", "p", "c", "TreeNode", "#getNeighborConstraints", "i", "#repair", "c0", "canList", "AssignmentList", "minDeg0", "min", "maxDeg0", "x", "x_v", "out", "v", "deg0", "deg", "Constraint", "a", "#shrink", "node", "removeCStar", "temp", "#spread", "tnc", "#srs", "wsd_cs", "cn", "n", "sol", "success", "solutionWorstDeg", "flag", "#children", "#parent", "#obj", "obj", "tn", "tns", "Vision", "Parameters", "#maxDiff", "#maxHueDiff", "#maxToneDiff", "#resolution", "diff", "resolution", "#doCheckT", "#doCheckP", "#doCheckD", "#doCheckM", "#tarDiffT", "#tarDiffP", "#tarDiffD", "#tarDiffM", "#isRatioMode", "#doKeepHue", "#hueTol", "#doKeepTone", "#toneTol", "#conspicuity", "#conspicuityRate", "trichromacy", "protanopia", "deuteranopia", "monochromacy", "vis", "enabled", "f", "difference", "rate", "#timeLimit", "#targetDesirability", "#solver", "#isBottleneckResolved", "timeLimit", "d", "s", "resolved", "SolverType", "add", "a", "b", "sub", "intDiv", "m", "n", "Plane", "_Plane", "#A", "#B", "#C", "#D", "p0", "p1", "len", "p", "vs", "sides", "v", "#intersection", "v0", "v1", "d", "u", "es", "ret", "e", "Edge", "#bgn", "#end", "v", "Face", "_Face", "#firstEdge", "es", "n", "i", "ret", "e", "refSide", "vertToSide", "edgeToInter", "v", "cx", "cy", "resolution", "pc", "#countInternalPoints", "inc", "ips", "#getIntersectionPoints", "x0", "x1", "s", "x", "z", "ps", "#getInternalPoints", "y", "pts", "xs", "#getIntersection", "#removeDuplicates", "y0", "y1", "A", "B", "C", "vs", "a", "b", "res", "cur", "Mesh", "_Mesh", "#vs", "#es", "#fs", "vs", "faceIndex", "m", "v", "vis", "faceEs", "vi", "Edge", "Face", "#pairEdges", "es", "e0", "e1", "p", "site", "siteSide", "edgeToInter", "sides", "newVs", "newEs", "newFs", "f", "newFaceVs", "unpairedEs", "e", "#createFaceEdgesFromUnpairedEdges", "org", "norm", "Plane", "add", "next", "ne", "Voronoi", "_Voronoi", "#defaultVs", "#sites", "#cells", "x0", "x1", "y0", "y1", "z0", "z1", "site", "adjacencyTable", "weightTable", "#divide1", "#divide2", "#divide3", "s", "m", "Mesh", "t", "p", "Plane", "intDiv", "sub", "adjTab", "i", "a", "weiTab", "as", "ws", "j", "index", "resolution", "ret", "norm", "c", "f", "pc", "inc", "ps", "CC_TABLE", "DEG_RAD", "RAD_DEG", "PI2", "atan2rad", "bs", "as", "mag", "a", "b", "CATEGORICAL_COLORS", "Y_TO_LUM", "LUM_TABLE", "categoryOfXyy", "sx", "sy", "y", "lum", "diff", "clu", "d", "t", "CC_TABLE", "dis", "cc", "i", "x", "mag", "ci", "conspicuityOfLab", "as", "bs", "h", "atan2rad", "RAD_DEG", "a", "distance", "v11", "v12", "v13", "v21", "v22", "v23", "CIE76", "ls1", "as1", "bs1", "ls2", "as2", "bs2", "CIEDE2000", "C1", "mag", "C2", "Cb", "G", "ap1", "ap2", "Cp1", "Cp2", "hp1", "atan", "hp2", "DLp", "DCp", "Dhp", "DHp", "sin", "Lbp", "Cbp", "hbp", "T", "cos", "Dth", "sq", "RC", "SL", "SC", "SH", "RT", "kL", "kC", "kH", "v", "y", "x", "atan2rad", "RAD_DEG", "deg", "DEG_RAD", "SMITH_POKORNY", "SMITH_POKORNY_INV", "BRADFORD", "BRADFORD_INV", "VON_KRIES", "VON_KRIES_INV", "ConversionMethod", "conversionMethod", "ConversionMethod", "fromXyz", "x", "y", "z", "dest", "cm", "toXyz", "l", "m", "s", "fromRgb", "r", "g", "b", "dest", "v", "c", "l", "s", "h", "toRgb", "hp", "x", "m", "MIN", "MAX", "INV_MAX", "isSaturated", "checkRange", "vs", "min", "max", "i", "fn", "v", "ifn", "fromLrgb", "lr", "lg", "lb", "dest", "toLrgb", "r", "g", "b", "fromLrgb", "lr", "lg", "lb", "dest", "toLrgb", "y", "i", "q", "fromXyz", "x", "y", "z", "dest", "toXyz", "lr", "lg", "lb", "D50_xyz", "D50_XYZ", "D65_xyz", "D65_XYZ", "isSaturated", "fromXyz", "x", "y", "z", "dest", "sum", "D65_xyz", "toXyz", "sx", "sy", "d0", "d1", "d2", "D65_XYZ", "fromLab", "ls", "as", "bs", "dest", "rad", "atan2rad", "mag", "RAD_DEG", "toLab", "cs", "h", "DEG_RAD", "C1", "C2", "C3", "XYZ_TRISTIMULUS_VALUES", "D65_XYZ", "fn", "v", "ifn", "fromXyz", "x", "y", "z", "dest", "fx", "fy", "fz", "toXyz", "ls", "as", "bs", "TBL_V", "TBL_SRC_MIN", "Node", "p", "q", "nl", "nr", "Tree", "ps", "k", "#build", "dep", "ax", "p0", "p1", "med", "#dist", "tar", "size", "rs", "search", "n", "d", "a", "b", "nb", "ob", "r", "MAX_HUE", "MONO_LIMIT_S", "HUE_NAMES", "TONE_NAMES", "MUNSELL_H", "COEFFICIENTS", "ConversionMethod", "simplyCalcMunsellH", "simplyCalcMunsellC", "simplyCalcPccsH", "simplyCalcPccsS", "calcMunsellH", "calcMunsellC", "calcPccsH", "calcPccsS", "conversionMethod", "ConversionMethod", "calcPccsH", "H", "h1", "h2", "i", "MUNSELL_H", "calcPccsS", "V", "C", "h", "a", "calcInterpolatedCoefficients", "g", "a0", "solveEquation", "simplyCalcPccsS", "MAX_HUE", "hf", "hc", "af", "COEFFICIENTS", "ac", "x0", "a3", "a2", "a1", "x", "y", "yp", "x1", "calcMunsellH", "H1", "H2", "calcMunsellC", "l", "s", "simplyCalcPccsH", "PI2", "Ct", "gt", "e2", "e1", "e0", "simplyCalcMunsellH", "simplyCalcMunsellC", "fromMunsell", "dest", "conversionMethod", "MONO_LIMIT_C", "toMunsell", "MONO_LIMIT_S", "tone", "hls", "relativeLightness", "tu", "td", "absoluteLightness", "L", "toToneCoordinate", "toNormalCoordinate", "hLs", "toString", "str_l", "str_h", "str_s", "tn", "hue", "HUE_NAMES", "t", "TONE_NAMES", "eq0", "x", "EP", "eq", "x0", "x1", "div", "a", "b", "r", "cross", "ax", "ay", "bx", "by", "inside", "p", "c", "HUE_NAMES", "ILLUMINANT_C", "TBL_MAX_C", "TBL", "TBL_TREES", "MAX_HUE", "MONO_LIMIT_C", "isSaturated", "initTable", "TBL_V", "TBL_SRC_MIN", "tbl_v", "tbl_src_min", "TBL", "TBL_MAX_C", "TBL_TREES", "vi", "n", "data", "cs", "hi", "integrate", "i", "ci", "x", "y", "Tree", "x_", "y_", "getXy", "ht", "c", "ILLUMINANT_C", "getMaxC", "v2y", "v", "v2", "y2v", "f", "fp", "xyy2mun", "sx", "sy", "eq", "h", "scanHC", "eq0", "vi_l", "hc_l", "vi_u", "hc_u", "v_l", "v_h", "r", "calcIdpHc", "p", "q", "ht0", "ht1", "ht_l", "inner", "c_l", "hc_r", "state", "scanOneHC", "ps", "c0", "d0", "c1", "d1", "wa", "wb", "wc", "wd", "inside", "interpolationR", "ea", "eb", "ec", "rt", "v1", "h1", "h2", "deX", "deY", "h0", "mun2xyy", "Y", "v_max", "xy", "scanXY", "xy_l", "xy_u", "v_u", "div", "c_u", "ht_u", "maxC_hl", "maxC_hu", "c_c", "interpolate3", "interpolate2", "interpolate4", "a", "b", "rx", "w1", "w2", "w3", "d", "ry", "wab", "wdc", "fromXyz", "xyz", "dest", "toIlluminantC", "toXyz", "fromIlluminantC", "hueValueToHueName", "hue", "chroma", "eq0", "MAX_HUE", "h10", "c", "HUE_NAMES", "toString", "h", "v", "str_v", "MONO_LIMIT_C", "str_c", "fromIlluminantC", "x", "y", "z", "dest", "toIlluminantC", "brettelP", "l", "m", "s", "dest", "brettelD", "OC_LMS_BASE", "fromXyz", "OC_LMS_BASE2", "toXyz", "doOc", "ocAlpha", "ocBeta", "setOkajimaCorrectionOption", "doCorrection", "alpha", "beta", "okajimaCorrectionP", "l2", "m2", "s2", "base", "sp1", "dp0", "dp1", "dp2", "k", "okajimaCorrectionD", "sp0", "lmsToProtanopia", "lms", "lmsToDeuteranopia", "lrgbToProtanopia", "lr", "lg", "lb", "lrgb2", "lrgbToDeuteranopia", "fromInteger", "v", "dest", "toInteger", "r", "g", "b", "parseRgb", "str", "re", "m", "a", "parseHex", "parseHsl", "h", "s", "l", "parseLab", "al", "parseLch", "c", "ColorSpace", "Color", "_Color", "i", "fromInteger", "str", "cs", "parseRgb", "parseHex", "parseHsl", "parseLab", "parseLch", "#ts", "#us", "#cs", "#al", "al", "t", "toRgb", "fromLrgb", "isSaturated", "fromRgb", "toLrgb", "fromXyz", "toXyz", "toLab", "fromLab", "toMunsell", "toNormalCoordinate", "fromMunsell", "toToneCoordinate", "forceToCheck", "s", "toString", "toInteger", "conspicuityOfLab", "n", "categoryOfXyy", "c", "method", "distance", "CIE76", "CIEDE2000", "doCorrection", "setOkajimaCorrectionOption", "lms0", "lmsToProtanopia", "lms1", "lrgbToProtanopia", "lmsToDeuteranopia", "lrgbToDeuteranopia", "Value", "_Value", "lab", "c", "Color", "#cv", "#cP", "#cD", "#cM", "colorInt_c", "vis", "v", "Combination", "index1", "c1", "index2", "c2", "diff", "vision", "Scheme", "_Scheme", "size", "ret", "i", "j", "#ads", "#vals", "#fixed", "#combs", "#quality", "#bnSize", "#bnIndex", "#lowDiffT", "#lowDiffP", "#lowDiffD", "#lowDiffM", "colorInts", "adjacencies", "fixed", "quality", "ci", "Value", "#deriveBottleneck", "#createAllCombinationList", "fs", "sizes", "#calcSizeList", "min", "vd", "Voronoi", "combs", "table", "o1", "o2", "vis", "dest", "lowDiff", "c", "omittedIndex", "rel", "idx0", "idx1", "max", "idx", "com", "T", "P", "D", "M", "cs", "sum", "dE", "de", "org", "mod", "o", "m", "asH", "dH", "tn", "vs", "Vision", "x", "lc", "sb", "RelationFactory1", "#doCheckT", "#doCheckP", "#doCheckD", "#doCheckM", "#tarDiffT", "#tarDiffP", "#tarDiffD", "#tarDiffL", "#maxDiff", "#doKeepHue", "#hueTol", "#maxHueTol", "#doKeepTone", "#toneTol", "#maxToneTol", "#doCheckConspicuity", "#conspicuityRate", "#conspicuityArray", "s", "param", "ds", "idx0", "idx1", "cans0", "cans1", "noPreservation", "ColorRelation", "cv0", "cv1", "dT", "dP", "dD", "dM", "#s2s", "d", "tarD", "idx", "org", "mod", "o0", "o1", "o2", "m0", "m1", "m2", "sH", "sT", "#p2s", "tol", "maxTol", "#that", "#nop", "#idx0", "#idx1", "#cans0", "#cans1", "#orig0", "#orig1", "that", "nop", "val0", "val1", "#sig", "p0", "p1", "Candidates", "#orig", "#vs", "original", "DomainFactory2", "_DomainFactory2", "#scheme", "#res", "#doPreserveHue", "#doPreserveTone", "#dHueMax", "#dToneMax", "s", "param", "omitIdx", "ret", "at", "vp", "#createVoronoiPartition", "cd", "Candidates", "grid", "maxDiff", "#getMaxDiff", "c", "cv", "Value", "#isCandidate", "lab", "fullDomSize", "fullDomIndex", "i", "#createFullDomain", "can", "#printCandidateSize", "adjTab", "idx", "rel", "max", "d", "full", "g", "Voronoi", "org", "as", "r", "RelationFactory2", "#scheme", "#doCheckP", "#doCheckD", "#doCheckM", "#ratioToTri", "#maxDiff", "#doKeepHue", "#hueTol", "#maxHueD", "#doKeepTone", "#toneTol", "#maxToneD", "#bottleneckColor", "s", "p", "bottleneckColor", "DomainFactory2", "_idx0", "_idx1", "cans0", "cans1", "noPreservation", "#updateRatioToTrichromacy", "ColorRelation", "orig0", "orig1", "maxDiff", "v0", "v1", "dP", "dD", "dM", "sum", "div", "d", "r", "Adjuster", "max", "i0", "i1", "dT", "D", "tarDiff", "org", "mod", "o0", "o1", "o2", "m0", "m1", "m2", "sH", "sT", "#that", "#nop", "#cans0", "#cans1", "#orig0", "#orig1", "#tarDiff", "that", "ratioToTri", "nop", "val0", "val1", "cv0", "cv1", "#sig", "p0", "p1", "DomainFactory1", "_DomainFactory1", "#scheme", "#res", "#doPreserveHue", "#doPreserveTone", "#dHueMax", "#dToneMax", "#maxDiff", "s", "param", "omitIdx", "ret", "vp", "#createVoronoiPartition", "i", "cd", "Candidates", "grid", "c", "cv", "Value", "#isCandidate", "lab", "fullDom", "full", "can", "#printCandidateSize", "adjTab", "Voronoi", "idx", "org", "as", "d", "r", "Adjuster", "_Adjuster", "#param", "Parameters", "#als", "#org", "#cans", "#mod", "param", "al", "i", "org", "p", "#createProblemWithBottleneck", "#createProblem", "s", "#createSolver", "ex", "rf", "RelationFactory2", "DomainFactory2", "RelationFactory1", "DomainFactory1", "Problem", "can", "idx0", "idx1", "nom", "bottleneck", "FuzzyForwardChecking", "SRS3", "FuzzyBreakout", "solution", "worstDegree", "#notifyResult", "res", "val", "cv", "Scheme", "finish"]
}
